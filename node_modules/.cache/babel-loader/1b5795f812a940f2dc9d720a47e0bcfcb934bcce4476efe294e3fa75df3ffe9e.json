{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\nimport * as XLSX from \"xlsx\"; // Import the xlsx library\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TimesheetList = () => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n\n  const [sortOrder, setSortOrder] = useState(\"asc\"); // Initial sorting order: ascending\n  const [sortBy, setSortBy] = useState(\"totalTime\"); // Default sorting by total time\n\n  const [expandedRows, setExpandedRows] = useState({});\n  const [allExpanded, setAllExpanded] = useState(false);\n  const [selectedGroup, setSelectedGroup] = useState(\"All\");\n  const handleGroupFilter = group => {\n    setSelectedGroup(group);\n  };\n  const filteredEmployees = employees.filter(employee => selectedGroup === \"All\" || employee.group === selectedGroup);\n  const toggleAllRows = () => {\n    setAllExpanded(!allExpanded);\n\n    // Update individual expandedRows based on the global toggle\n    const updatedExpandedRows = {};\n    employees.forEach(employee => {\n      updatedExpandedRows[employee.id] = !allExpanded;\n    });\n    setExpandedRows(updatedExpandedRows);\n  };\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n  const [today, setToday] = useState(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1; // JS months are 0-indexed\n    const day = now.getDate();\n    return `${month}-${day < 10 ? '0' + day : day}`; // Format MM-DD\n  });\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), snapshot => {\n        const employeeData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, snapshot => {\n        const updatedTimesheetData = {};\n        snapshot.forEach(doc => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    var _timesheetData$employ, _timesheetData$employ2, _timesheetData$employ3, _timesheetData$employ4, _timesheetData$employ5, _timesheetData$employ6;\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(((_timesheetData$employ = timesheetData[employeeId]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.startTime) || \"\");\n    setEndTime(((_timesheetData$employ3 = timesheetData[employeeId]) === null || _timesheetData$employ3 === void 0 ? void 0 : (_timesheetData$employ4 = _timesheetData$employ3[date]) === null || _timesheetData$employ4 === void 0 ? void 0 : _timesheetData$employ4.endTime) || \"\");\n    setIsHoliday(((_timesheetData$employ5 = timesheetData[employeeId]) === null || _timesheetData$employ5 === void 0 ? void 0 : (_timesheetData$employ6 = _timesheetData$employ5[date]) === null || _timesheetData$employ6 === void 0 ? void 0 : _timesheetData$employ6.isHoliday) || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = event => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = event => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n  // Toggle holiday status\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n    if (newIsHoliday) {\n      // If it's a holiday, reset normal time, night shift time, and total time\n      setNormalTime(0);\n      setNightShiftHours(0);\n      setTotalTime(totalTime);\n      setHolidayTime(totalTime); // The holiday time becomes the total time worked\n    } else {\n      // If it's not a holiday, recalculate times\n      calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n    }\n  };\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n\n    // Convert startDate and endDate to Date objects if necessary\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    const nightShiftStartHour = 22; // 10:00 PM\n    const nightShiftEndHour = 6; // 6:00 AM (next day)\n\n    // Initialize nightShiftHours to 0\n    let nightShiftHours = 0;\n\n    // Convert start and end times to decimal hours for easier calculations\n    let startTime = startDate.getHours() + startDate.getMinutes() / 60;\n    let endTime = endDate.getHours() + endDate.getMinutes() / 60;\n\n    // Case 1: Entire shift is within the night shift period (10 PM to 6 AM)\n    if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) && (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n      nightShiftHours = (endDate - startDate) / (1000 * 60 * 60); // Entire shift is within night shift\n    }\n    // Case 2: Shift starts before 10 PM and ends during or after the night shift (crosses into night shift)\n    else if (startTime < nightShiftStartHour && (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n      // Calculate hours from 10 PM to end time for night shift\n      let nightShiftStartTime = new Date(startDate);\n      nightShiftStartTime.setHours(nightShiftStartHour, 0, 0); // Set to 10:00 PM\n      nightShiftHours = (endDate - nightShiftStartTime) / (1000 * 60 * 60); // Hours from 10 PM onwards\n    }\n    // Case 3: Shift starts during the night shift and ends after 6 AM (crosses out of night shift)\n    else if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) && endTime >= nightShiftEndHour) {\n      let nightShiftEndTime = new Date(startDate);\n      nightShiftEndTime.setHours(nightShiftEndHour, 0, 0); // Set to 6:00 AM\n      nightShiftHours = (nightShiftEndTime - startDate) / (1000 * 60 * 60); // Hours until 6 AM\n    }\n    // Case 4: No night shift overlap (shift is entirely outside 10 PM to 6 AM)\n    else {\n      nightShiftHours = 0; // No night shift overlap\n    }\n    setTotalTime(totalTimeInHours.toFixed(1));\n    setNightShiftHours(nightShiftHours.toFixed(1));\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(1));\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(1));\n  };\n\n  // Save timesheet data to Firestore\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      var _await$getDoc$data;\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = ((_await$getDoc$data = (await getDoc(timesheetDocRef)).data()) === null || _await$getDoc$data === void 0 ? void 0 : _await$getDoc$data.hours) || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShiftHours),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday\n      };\n      await setDoc(timesheetDocRef, {\n        hours: timesheetData\n      });\n      setModalOpen(false);\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Calculate monthly totals for an employee\n  const calculateMonthlyTotal = employeeId => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0,\n      totalTime: 0\n    };\n    const monthDays = generateMonthDays(currentYear, currentMonth);\n    monthDays.forEach(date => {\n      var _timesheetData$employ7;\n      const data = (_timesheetData$employ7 = timesheetData[employeeId]) === null || _timesheetData$employ7 === void 0 ? void 0 : _timesheetData$employ7[date];\n      if (data) {\n        monthlyTotal.normalTime += data.normalTime || 0;\n        monthlyTotal.nightShift += data.nightShift || 0;\n        monthlyTotal.holidayTime += data.holidayTime || 0;\n        monthlyTotal.totalTime += data.totalTime || 0;\n      }\n    });\n    return monthlyTotal;\n  };\n\n  // Change to previous month\n  const goToPreviousMonth = () => {\n    setCurrentMonth(prevMonth => prevMonth === 0 ? 11 : prevMonth - 1);\n    if (currentMonth === 0) setCurrentYear(currentYear - 1); // Handle year change\n  };\n\n  // Change to next month\n  const goToNextMonth = () => {\n    setCurrentMonth(prevMonth => prevMonth === 11 ? 0 : prevMonth + 1);\n    if (currentMonth === 11) setCurrentYear(currentYear + 1); // Handle year change\n  };\n  const getColorForWorkedHours = (totalWorkedHours, expectedHours) => {\n    const diff = totalWorkedHours - expectedHours; // Difference from expected hours\n\n    if (diff >= -10 && diff <= 10) {\n      // Green range: -10 <= diff <= 10\n      const greenIntensity = Math.round(155 + 100 * (10 - Math.abs(diff)) / 10); // 155 to 255\n      return `rgb(0, ${greenIntensity}, 0)`; // Shades from dark green to bright green\n    } else if (diff < -10) {\n      // Red range: diff < -10 (underperformance)\n      const adjustedDiff = Math.min(Math.abs(diff) - 10, 50); // Scaling factor\n      const redIntensity = Math.round(100 + 155 * adjustedDiff / 50); // 100 to 255 (more dramatic red)\n      return `rgb(${redIntensity}, 0, -1)`; // Shades from dark red to bright red\n    } else {\n      // Yellow range: diff > 10 (overperformance)\n      const adjustedDiff = Math.min(diff - 10, 40); // Scaling factor\n      const yellowIntensity = Math.round(155 + 100 * adjustedDiff / 40); // 155 to 255\n      return `rgb(${yellowIntensity}, ${yellowIntensity}, 0)`; // Shades from dark yellow to bright yellow\n    }\n  };\n\n  // Get the days for the selected month\n  const monthDays = generateMonthDays(currentYear, currentMonth);\n  const handleSort = column => {\n    const newSortOrder = sortBy === column && sortOrder === \"asc\" ? \"desc\" : \"asc\"; // Toggle sort order\n    setSortBy(column); // Set the column to sort by\n    setSortOrder(newSortOrder); // Update the sort order\n\n    // Sort the employees based on the selected column and order\n    const sortedEmployees = [...employees].sort((a, b) => {\n      const totalA = calculateMonthlyTotal(a.id)[column];\n      const totalB = calculateMonthlyTotal(b.id)[column];\n      if (newSortOrder === \"asc\") {\n        return totalA - totalB;\n      } else {\n        return totalB - totalA;\n      }\n    });\n    setEmployees(sortedEmployees); // Set the sorted employees list\n  };\n  const exportToExcel = () => {\n    // Prepare the data for export\n    const sheetData = [];\n\n    // Header row without the \"Date:\" prefix\n    const headerRow = [\"Employee Name\", \"Shift Type\", ...monthDays.map(date => date), \"Total\"];\n    sheetData.push(headerRow);\n\n    // Create an array to hold the merges\n    const merges = [];\n\n    // Iterate through the employees and their timesheet data\n    employees.forEach(employee => {\n      const monthlyTotal = calculateMonthlyTotal(employee.id);\n\n      // Create a row for each shift type (Regular, Night, Holiday, Total)\n      const rows = [{\n        shiftType: \"Regular\",\n        data: monthDays.map(date => {\n          var _timesheetData$employ8;\n          const data = (_timesheetData$employ8 = timesheetData[employee.id]) === null || _timesheetData$employ8 === void 0 ? void 0 : _timesheetData$employ8[date];\n          return data ? data.normalTime.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.normalTime.toFixed(1)\n      }, {\n        shiftType: \"Night\",\n        data: monthDays.map(date => {\n          var _timesheetData$employ9;\n          const data = (_timesheetData$employ9 = timesheetData[employee.id]) === null || _timesheetData$employ9 === void 0 ? void 0 : _timesheetData$employ9[date];\n          return data ? data.nightShift.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.nightShift.toFixed(1)\n      }, {\n        shiftType: \"Holiday\",\n        data: monthDays.map(date => {\n          var _timesheetData$employ10;\n          const data = (_timesheetData$employ10 = timesheetData[employee.id]) === null || _timesheetData$employ10 === void 0 ? void 0 : _timesheetData$employ10[date];\n          return data ? data.holidayTime.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.holidayTime.toFixed(1)\n      }, {\n        shiftType: \"Total\",\n        data: monthDays.map(date => {\n          var _timesheetData$employ11;\n          const data = (_timesheetData$employ11 = timesheetData[employee.id]) === null || _timesheetData$employ11 === void 0 ? void 0 : _timesheetData$employ11[date];\n          return data ? data.totalTime.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.totalTime.toFixed(1)\n      }];\n\n      // For each shift type, add a row and also merge the \"Employee Name\" cell for all related rows\n      let startRow = sheetData.length;\n      rows.forEach((row, index) => {\n        const newRow = [index === 0 ? employee.name : \"\",\n        // Merge the \"Employee Name\" across rows\n        row.shiftType, ...row.data, row.total];\n        sheetData.push(newRow);\n\n        // If it's the first row for this employee, mark the merge range\n        if (index === 0) {\n          merges.push({\n            s: {\n              r: startRow,\n              c: 0\n            },\n            // Start row and column (Employee Name column)\n            e: {\n              r: startRow + rows.length - 1,\n              c: 0\n            } // End row and column (same column, spanning rows)\n          });\n        }\n\n        // Highlight the \"Total\" row with a specific background color\n        if (row.shiftType === \"Total\") {\n          // Add background color for \"Total\" row (assuming this is index 3)\n          const lastRow = sheetData.length - 1;\n          for (let col = 0; col < sheetData[lastRow].length; col++) {\n            // Set the cell value and its style\n            sheetData[lastRow][col] = {\n              v: sheetData[lastRow][col],\n              s: {\n                fill: {\n                  fgColor: {\n                    rgb: \"FFFF00\"\n                  }\n                }\n              } // Yellow background\n            };\n          }\n        }\n      });\n    });\n\n    // Create a worksheet and workbook from the data\n    const ws = XLSX.utils.aoa_to_sheet(sheetData);\n\n    // Add the merge instruction to the worksheet\n    ws['!merges'] = merges;\n\n    // Create the workbook\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"Timesheets\");\n\n    // Export the workbook to Excel\n    XLSX.writeFile(wb, \"timesheet_data.xlsx\");\n  };\n  const toggleRowExpansion = employeeId => {\n    setExpandedRows(prevState => ({\n      ...prevState,\n      [employeeId]: !prevState[employeeId] // Toggle the expansion state\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"month-navigation\",\n      style: {\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToPreviousMonth,\n        children: \"Previous Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: new Date(currentYear, currentMonth).toLocaleString('default', {\n          month: 'long',\n          year: 'numeric'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToNextMonth,\n        children: \"Next Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToExcel,\n        style: {\n          padding: \"10px\",\n          fontSize: \"15px\",\n          backgroundColor: \"#4CAF50\",\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\",\n          position: \"absolute\",\n          right: \"10px\",\n          // Align to the right edge\n          top: \"0px\" // Position below the month navigation\n        },\n        children: \"Export to Excel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleAllRows,\n        style: {\n          padding: \"10px\",\n          fontSize: \"15px\"\n        },\n        children: allExpanded ? \"Collapse All\" : \"Expand All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGroupFilter(\"1\"),\n        children: \"Group 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGroupFilter(\"2\"),\n        children: \"Group 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGroupFilter(\"All\"),\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleAllRows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Shift\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 7\n          }, this), monthDays.map((date, index) => {\n            // Check if it's today's date\n            const isToday = date === today;\n            return /*#__PURE__*/_jsxDEV(\"th\", {\n              className: isToday ? \"highlight-today\" : \"\",\n              children: parseInt(date.split('-')[1], 10)\n            }, date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 11\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort(\"totalTime\") // Call the sort handler on click\n            ,\n            style: {\n              cursor: \"pointer\"\n            },\n            children: [\"Monthly Total \", sortBy === \"totalTime\" ? sortOrder === \"asc\" ? \"↑\" : \"↓\" : \"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map((employee, employeeIndex) => {\n          const monthlyTotal = calculateMonthlyTotal(employee.id);\n\n          // Filter the monthDays to get only the days up until today\n          const filteredDays = monthDays.filter(date => new Date(date) <= new Date(today));\n\n          // Calculate the number of weekdays (excluding weekends) up until today\n          const expectedWeekdays = filteredDays.filter(date => {\n            const day = new Date(date).getDay(); // Get the day of the week (0 = Sunday, 6 = Saturday)\n            return day !== 0 && day !== 6; // Only weekdays (exclude weekends)\n          }).length;\n\n          // Calculate the total expected hours up until today (expected weekdays * 8 hours per day)\n          const totalExpectedHours = expectedWeekdays * 8;\n\n          // Calculate the total worked hours up until today\n          const totalWorkedHours = filteredDays.reduce((acc, date) => {\n            var _timesheetData$employ12;\n            const employeeData = ((_timesheetData$employ12 = timesheetData[employee.id]) === null || _timesheetData$employ12 === void 0 ? void 0 : _timesheetData$employ12[date]) || {};\n            return acc + (employeeData.normalTime || 0) + (employeeData.nightShift || 0) + (employeeData.holidayTime || 0);\n          }, 0);\n\n          // Get the color for the Total row based on the worked hours vs expected hours\n          const totalRowColor = getColorForWorkedHours(totalWorkedHours, totalExpectedHours);\n          const isExpanded = expandedRows[employee.id]; // Check if the row is expanded\n\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              className: `row ${employeeIndex % 2 === 0 ? \"odd-row\" : \"even-row\"}`,\n              style: {\n                backgroundColor: \"lightgreen\"\n              } // Regular shift row color\n              ,\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                rowSpan: isExpanded ? 4 : 1,\n                onClick: () => toggleRowExpansion(employee.id) // Click on the name to toggle expansion\n                ,\n                style: {\n                  cursor: \"pointer\",\n                  fontWeight: \"bold\"\n                },\n                children: employee.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 9\n              }, this), !isExpanded ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"Total\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 548,\n                  columnNumber: 13\n                }, this), monthDays.map(date => {\n                  var _timesheetData$employ13, _timesheetData$employ14, _timesheetData$employ15, _timesheetData$employ16;\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    onClick: () => handleSetTime(employee.id, date),\n                    className: date === today ? \"highlight-today\" : \"\",\n                    children: ((_timesheetData$employ13 = timesheetData[employee.id]) === null || _timesheetData$employ13 === void 0 ? void 0 : (_timesheetData$employ14 = _timesheetData$employ13[date]) === null || _timesheetData$employ14 === void 0 ? void 0 : _timesheetData$employ14.totalTime) === 0 ? \"0\" : (_timesheetData$employ15 = timesheetData[employee.id]) !== null && _timesheetData$employ15 !== void 0 && (_timesheetData$employ16 = _timesheetData$employ15[date]) !== null && _timesheetData$employ16 !== void 0 && _timesheetData$employ16.totalTime ? `${timesheetData[employee.id][date].totalTime.toFixed(1)}` : \"\"\n                  }, date, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 550,\n                    columnNumber: 15\n                  }, this);\n                }), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    backgroundColor: totalRowColor\n                  },\n                  children: monthlyTotal.totalTime.toFixed(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 562,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"Regular\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 567,\n                  columnNumber: 13\n                }, this), monthDays.map(date => {\n                  var _timesheetData$employ17, _timesheetData$employ18, _timesheetData$employ19, _timesheetData$employ20;\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    onClick: () => handleSetTime(employee.id, date),\n                    className: date === today ? \"highlight-today\" : \"\",\n                    children: ((_timesheetData$employ17 = timesheetData[employee.id]) === null || _timesheetData$employ17 === void 0 ? void 0 : (_timesheetData$employ18 = _timesheetData$employ17[date]) === null || _timesheetData$employ18 === void 0 ? void 0 : _timesheetData$employ18.normalTime) === 0 ? \"0\" : (_timesheetData$employ19 = timesheetData[employee.id]) !== null && _timesheetData$employ19 !== void 0 && (_timesheetData$employ20 = _timesheetData$employ19[date]) !== null && _timesheetData$employ20 !== void 0 && _timesheetData$employ20.normalTime ? `${timesheetData[employee.id][date].normalTime.toFixed(1)}` : \"\"\n                  }, date, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 569,\n                    columnNumber: 15\n                  }, this);\n                }), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: monthlyTotal.normalTime.toFixed(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 581,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 7\n            }, this), isExpanded && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                className: `row ${employeeIndex % 2 === 0 ? \"odd-row\" : \"even-row\"}`,\n                style: {\n                  backgroundColor: \"lightblue\"\n                } // Night shift row color\n                ,\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"Night\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 594,\n                  columnNumber: 13\n                }, this), monthDays.map(date => {\n                  var _timesheetData$employ21, _timesheetData$employ22, _timesheetData$employ23, _timesheetData$employ24;\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    onClick: () => handleSetTime(employee.id, date),\n                    className: date === today ? \"highlight-today\" : \"\",\n                    children: ((_timesheetData$employ21 = timesheetData[employee.id]) === null || _timesheetData$employ21 === void 0 ? void 0 : (_timesheetData$employ22 = _timesheetData$employ21[date]) === null || _timesheetData$employ22 === void 0 ? void 0 : _timesheetData$employ22.nightShift) === 0 ? \"0\" : (_timesheetData$employ23 = timesheetData[employee.id]) !== null && _timesheetData$employ23 !== void 0 && (_timesheetData$employ24 = _timesheetData$employ23[date]) !== null && _timesheetData$employ24 !== void 0 && _timesheetData$employ24.nightShift ? `${timesheetData[employee.id][date].nightShift.toFixed(1)}` : \"\"\n                  }, date, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 596,\n                    columnNumber: 15\n                  }, this);\n                }), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: monthlyTotal.nightShift.toFixed(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 608,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 590,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: `row ${employeeIndex % 2 === 0 ? \"odd-row\" : \"even-row\"}`,\n                style: {\n                  backgroundColor: \"lightcoral\"\n                } // Holiday row color\n                ,\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"Holiday\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 13\n                }, this), monthDays.map(date => {\n                  var _timesheetData$employ25, _timesheetData$employ26, _timesheetData$employ27, _timesheetData$employ28;\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    onClick: () => handleSetTime(employee.id, date),\n                    className: date === today ? \"highlight-today\" : \"\",\n                    children: ((_timesheetData$employ25 = timesheetData[employee.id]) === null || _timesheetData$employ25 === void 0 ? void 0 : (_timesheetData$employ26 = _timesheetData$employ25[date]) === null || _timesheetData$employ26 === void 0 ? void 0 : _timesheetData$employ26.holidayTime) === 0 ? \"0\" : (_timesheetData$employ27 = timesheetData[employee.id]) !== null && _timesheetData$employ27 !== void 0 && (_timesheetData$employ28 = _timesheetData$employ27[date]) !== null && _timesheetData$employ28 !== void 0 && _timesheetData$employ28.holidayTime ? `${timesheetData[employee.id][date].holidayTime.toFixed(1)}` : \"\"\n                  }, date, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 618,\n                    columnNumber: 15\n                  }, this);\n                }), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: monthlyTotal.holidayTime.toFixed(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 630,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                style: {\n                  backgroundColor: totalRowColor // Apply the color to the entire Total row\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"Total\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 639,\n                  columnNumber: 13\n                }, this), monthDays.map(date => {\n                  var _timesheetData$employ29, _timesheetData$employ30, _timesheetData$employ31, _timesheetData$employ32;\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    onClick: () => handleSetTime(employee.id, date),\n                    className: date === today ? \"highlight-today\" : \"\",\n                    children: ((_timesheetData$employ29 = timesheetData[employee.id]) === null || _timesheetData$employ29 === void 0 ? void 0 : (_timesheetData$employ30 = _timesheetData$employ29[date]) === null || _timesheetData$employ30 === void 0 ? void 0 : _timesheetData$employ30.totalTime) === 0 ? \"0\" : (_timesheetData$employ31 = timesheetData[employee.id]) !== null && _timesheetData$employ31 !== void 0 && (_timesheetData$employ32 = _timesheetData$employ31[date]) !== null && _timesheetData$employ32 !== void 0 && _timesheetData$employ32.totalTime ? `${timesheetData[employee.id][date].totalTime.toFixed(1)}` : \"\"\n                  }, date, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 641,\n                    columnNumber: 15\n                  }, this);\n                }), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: monthlyTotal.totalTime.toFixed(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 653,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 634,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true)]\n          }, employee.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 5\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal1\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content1\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"modal-heading1\",\n          children: \"Timesheet Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-container1\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label1\",\n            children: [\"Start Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: startTime,\n              onChange: handleStartTimeChange,\n              className: \"input-field1\",\n              placeholder: \"hh:mm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label1\",\n            children: [\"End Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: endTime,\n              onChange: handleEndTimeChange,\n              className: \"input-field1\",\n              placeholder: \"hh:mm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 684,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"checkbox-container1\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"checkbox-label1\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Next Day:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 695,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: nextDay,\n                onChange: handleNextDayToggle,\n                className: \"checkbox-input1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 696,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"checkbox-label1\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Is Holiday:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 705,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: isHoliday,\n                onChange: handleHolidayToggle,\n                className: \"checkbox-input1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 706,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-summary1\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Time: \", totalTime, \" hours\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Night Shift Hours: \", nightShiftHours, \" hours\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 717,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Normal Time: \", normalTime, \" hours\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Holiday Time: \", holidayTime, \" hours\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 719,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-actions1\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: saveTimesheetDataToFirebase,\n              className: \"save-btn1\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 723,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"close-btn1\",\n              onClick: () => setModalOpen(false),\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 439,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"8StKnOV4JB/pM/Cj3s0ipawElxk=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","onSnapshot","doc","setDoc","getDoc","db","XLSX","jsxDEV","_jsxDEV","Fragment","_Fragment","TimesheetList","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","nextDay","setNextDay","isHoliday","setIsHoliday","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","holidayTime","setHolidayTime","normalTime","setNormalTime","currentMonth","setCurrentMonth","Date","getMonth","currentYear","setCurrentYear","getFullYear","sortOrder","setSortOrder","sortBy","setSortBy","expandedRows","setExpandedRows","allExpanded","setAllExpanded","selectedGroup","setSelectedGroup","handleGroupFilter","group","filteredEmployees","filter","employee","toggleAllRows","updatedExpandedRows","forEach","id","generateMonthDays","year","month","daysInMonth","getDate","days","day","push","today","setToday","now","fetchEmployees","unsubscribe","snapshot","employeeData","docs","map","data","fetchTimesheetData","timesheetDataRef","updatedTimesheetData","employeeId","hours","date","record","Object","entries","parseFloat","nightShift","Boolean","handleSetTime","_timesheetData$employ","_timesheetData$employ2","_timesheetData$employ3","_timesheetData$employ4","_timesheetData$employ5","_timesheetData$employ6","handleStartTimeChange","event","newStartTime","target","value","calculateTimes","handleEndTimeChange","newEndTime","handleNextDayToggle","newNextDay","handleHolidayToggle","newIsHoliday","start","end","isNextDay","startHours","startMinutes","split","Number","endHours","endMinutes","startDate","setHours","endDate","setDate","totalTimeInHours","nightShiftStartHour","nightShiftEndHour","getHours","getMinutes","nightShiftStartTime","nightShiftEndTime","toFixed","saveTimesheetDataToFirebase","_await$getDoc$data","timesheetDocRef","error","console","calculateMonthlyTotal","monthlyTotal","monthDays","_timesheetData$employ7","goToPreviousMonth","prevMonth","goToNextMonth","getColorForWorkedHours","totalWorkedHours","expectedHours","diff","greenIntensity","Math","round","abs","adjustedDiff","min","redIntensity","yellowIntensity","handleSort","column","newSortOrder","sortedEmployees","sort","a","b","totalA","totalB","exportToExcel","sheetData","headerRow","merges","rows","shiftType","_timesheetData$employ8","total","_timesheetData$employ9","_timesheetData$employ10","_timesheetData$employ11","startRow","length","row","index","newRow","name","s","r","c","e","lastRow","col","v","fill","fgColor","rgb","ws","utils","aoa_to_sheet","wb","book_new","book_append_sheet","writeFile","toggleRowExpansion","prevState","children","className","style","position","onClick","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","padding","fontSize","backgroundColor","color","border","cursor","right","top","marginBottom","isToday","parseInt","employeeIndex","filteredDays","expectedWeekdays","getDay","totalExpectedHours","reduce","acc","_timesheetData$employ12","totalRowColor","isExpanded","rowSpan","fontWeight","_timesheetData$employ13","_timesheetData$employ14","_timesheetData$employ15","_timesheetData$employ16","_timesheetData$employ17","_timesheetData$employ18","_timesheetData$employ19","_timesheetData$employ20","_timesheetData$employ21","_timesheetData$employ22","_timesheetData$employ23","_timesheetData$employ24","_timesheetData$employ25","_timesheetData$employ26","_timesheetData$employ27","_timesheetData$employ28","_timesheetData$employ29","_timesheetData$employ30","_timesheetData$employ31","_timesheetData$employ32","type","onChange","placeholder","checked","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\nimport * as XLSX from \"xlsx\"; // Import the xlsx library\n\n\nconst TimesheetList = () => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n\n  const [sortOrder, setSortOrder] = useState(\"asc\"); // Initial sorting order: ascending\n  const [sortBy, setSortBy] = useState(\"totalTime\"); // Default sorting by total time\n\n  const [expandedRows, setExpandedRows] = useState({});\n\n  const [allExpanded, setAllExpanded] = useState(false);\n\n  const [selectedGroup, setSelectedGroup] = useState(\"All\");\n\n  \n  \n  const handleGroupFilter = (group) => {\n    setSelectedGroup(group);\n  };\n\n  const filteredEmployees = employees.filter(employee => \n    selectedGroup === \"All\" || employee.group === selectedGroup\n  );\n\n\n  const toggleAllRows = () => {\n    setAllExpanded(!allExpanded);\n\n    // Update individual expandedRows based on the global toggle\n    const updatedExpandedRows = {};\n    employees.forEach(employee => {\n      updatedExpandedRows[employee.id] = !allExpanded;\n    });\n    setExpandedRows(updatedExpandedRows);\n  };\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n\n  const [today, setToday] = useState(() => {\n  const now = new Date();\n  const month = now.getMonth() + 1; // JS months are 0-indexed\n  const day = now.getDate();\n  return `${month}-${day < 10 ? '0' + day : day}`; // Format MM-DD\n});\n\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), (snapshot) => {\n        const employeeData = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, (snapshot) => {\n        const updatedTimesheetData = {};\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0,\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(timesheetData[employeeId]?.[date]?.startTime || \"\");\n    setEndTime(timesheetData[employeeId]?.[date]?.endTime || \"\");\n    setIsHoliday(timesheetData[employeeId]?.[date]?.isHoliday || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = (event) => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = (event) => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n// Toggle holiday status\nconst handleHolidayToggle = () => {\n  const newIsHoliday = !isHoliday;\n  setIsHoliday(newIsHoliday);\n\n  if (newIsHoliday) {\n    // If it's a holiday, reset normal time, night shift time, and total time\n    setNormalTime(0);\n    setNightShiftHours(0);\n    setTotalTime(totalTime);\n    setHolidayTime(totalTime); // The holiday time becomes the total time worked\n  } else {\n    // If it's not a holiday, recalculate times\n    calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n  }\n};\n\n\n\n\n\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n\n// Convert startDate and endDate to Date objects if necessary\nconst totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n\n\nconst nightShiftStartHour = 22;  // 10:00 PM\nconst nightShiftEndHour = 6;  // 6:00 AM (next day)\n\n// Initialize nightShiftHours to 0\nlet nightShiftHours = 0;\n\n// Convert start and end times to decimal hours for easier calculations\nlet startTime = startDate.getHours() + startDate.getMinutes() / 60;\nlet endTime = endDate.getHours() + endDate.getMinutes() / 60;\n\n// Case 1: Entire shift is within the night shift period (10 PM to 6 AM)\nif ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) &&\n    (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n  nightShiftHours = (endDate - startDate) / (1000 * 60 * 60);  // Entire shift is within night shift\n}\n// Case 2: Shift starts before 10 PM and ends during or after the night shift (crosses into night shift)\nelse if (startTime < nightShiftStartHour && (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n  // Calculate hours from 10 PM to end time for night shift\n  let nightShiftStartTime = new Date(startDate);\n  nightShiftStartTime.setHours(nightShiftStartHour, 0, 0);  // Set to 10:00 PM\n  nightShiftHours = (endDate - nightShiftStartTime) / (1000 * 60 * 60);  // Hours from 10 PM onwards\n}\n// Case 3: Shift starts during the night shift and ends after 6 AM (crosses out of night shift)\nelse if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) && endTime >= nightShiftEndHour) {\n  let nightShiftEndTime = new Date(startDate);\n  nightShiftEndTime.setHours(nightShiftEndHour, 0, 0);  // Set to 6:00 AM\n  nightShiftHours = (nightShiftEndTime - startDate) / (1000 * 60 * 60);  // Hours until 6 AM\n}\n// Case 4: No night shift overlap (shift is entirely outside 10 PM to 6 AM)\nelse {\n  nightShiftHours = 0;  // No night shift overlap\n}\n\n    setTotalTime(totalTimeInHours.toFixed(1));\n    setNightShiftHours(nightShiftHours.toFixed(1));\n\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(1));\n\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(1));\n  };\n\n  // Save timesheet data to Firestore\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = (await getDoc(timesheetDocRef)).data()?.hours || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShiftHours),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday,\n      };\n      await setDoc(timesheetDocRef, { hours: timesheetData });\n      setModalOpen(false);\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Calculate monthly totals for an employee\n  const calculateMonthlyTotal = (employeeId) => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0,\n      totalTime: 0,\n    };\n\n    const monthDays = generateMonthDays(currentYear, currentMonth);\n    monthDays.forEach((date) => {\n      const data = timesheetData[employeeId]?.[date];\n      if (data) {\n        monthlyTotal.normalTime += data.normalTime || 0;\n        monthlyTotal.nightShift += data.nightShift || 0;\n        monthlyTotal.holidayTime += data.holidayTime || 0;\n        monthlyTotal.totalTime += data.totalTime || 0;\n      }\n    });\n\n    return monthlyTotal;\n  };\n\n  // Change to previous month\n  const goToPreviousMonth = () => {\n    setCurrentMonth((prevMonth) => (prevMonth === 0 ? 11 : prevMonth - 1));\n    if (currentMonth === 0) setCurrentYear(currentYear - 1); // Handle year change\n  };\n\n  // Change to next month\n  const goToNextMonth = () => {\n    setCurrentMonth((prevMonth) => (prevMonth === 11 ? 0 : prevMonth + 1));\n    if (currentMonth === 11) setCurrentYear(currentYear + 1); // Handle year change\n  };\n\n\n\n  const getColorForWorkedHours = (totalWorkedHours, expectedHours) => {\n    const diff = totalWorkedHours - expectedHours; // Difference from expected hours\n  \n    if (diff >= -10 && diff <= 10) {\n      // Green range: -10 <= diff <= 10\n      const greenIntensity = Math.round(155 + (100 * (10 - Math.abs(diff)) / 10)); // 155 to 255\n      return `rgb(0, ${greenIntensity}, 0)`; // Shades from dark green to bright green\n    } else if (diff < -10) {\n      // Red range: diff < -10 (underperformance)\n      const adjustedDiff = Math.min(Math.abs(diff) - 10, 50); // Scaling factor\n      const redIntensity = Math.round(100 + (155 * adjustedDiff / 50)); // 100 to 255 (more dramatic red)\n      return `rgb(${redIntensity}, 0, -1)`; // Shades from dark red to bright red\n    } else {\n      // Yellow range: diff > 10 (overperformance)\n      const adjustedDiff = Math.min(diff - 10, 40); // Scaling factor\n      const yellowIntensity = Math.round(155 + (100 * adjustedDiff / 40)); // 155 to 255\n      return `rgb(${yellowIntensity}, ${yellowIntensity}, 0)`; // Shades from dark yellow to bright yellow\n    }\n  };\n\n  // Get the days for the selected month\n  const monthDays = generateMonthDays(currentYear, currentMonth);\n\n\n  const handleSort = (column) => {\n  const newSortOrder = sortBy === column && sortOrder === \"asc\" ? \"desc\" : \"asc\"; // Toggle sort order\n  setSortBy(column); // Set the column to sort by\n  setSortOrder(newSortOrder); // Update the sort order\n\n  // Sort the employees based on the selected column and order\n  const sortedEmployees = [...employees].sort((a, b) => {\n    const totalA = calculateMonthlyTotal(a.id)[column];\n    const totalB = calculateMonthlyTotal(b.id)[column];\n\n    if (newSortOrder === \"asc\") {\n      return totalA - totalB;\n    } else {\n      return totalB - totalA;\n    }\n  });\n  setEmployees(sortedEmployees); // Set the sorted employees list\n};\nconst exportToExcel = () => {\n  // Prepare the data for export\n  const sheetData = [];\n  \n  // Header row without the \"Date:\" prefix\n  const headerRow = [\"Employee Name\", \"Shift Type\", ...monthDays.map(date => date), \"Total\"];\n  sheetData.push(headerRow);\n\n  // Create an array to hold the merges\n  const merges = [];\n\n  // Iterate through the employees and their timesheet data\n  employees.forEach((employee) => {\n    const monthlyTotal = calculateMonthlyTotal(employee.id);\n    \n    // Create a row for each shift type (Regular, Night, Holiday, Total)\n    const rows = [\n      {\n        shiftType: \"Regular\",\n        data: monthDays.map(date => {\n          const data = timesheetData[employee.id]?.[date];\n          return data ? data.normalTime.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.normalTime.toFixed(1),\n      },\n      {\n        shiftType: \"Night\",\n        data: monthDays.map(date => {\n          const data = timesheetData[employee.id]?.[date];\n          return data ? data.nightShift.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.nightShift.toFixed(1),\n      },\n      {\n        shiftType: \"Holiday\",\n        data: monthDays.map(date => {\n          const data = timesheetData[employee.id]?.[date];\n          return data ? data.holidayTime.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.holidayTime.toFixed(1),\n      },\n      {\n        shiftType: \"Total\",\n        data: monthDays.map(date => {\n          const data = timesheetData[employee.id]?.[date];\n          return data ? data.totalTime.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.totalTime.toFixed(1),\n      }\n    ];\n\n    // For each shift type, add a row and also merge the \"Employee Name\" cell for all related rows\n    let startRow = sheetData.length;\n    rows.forEach((row, index) => {\n      const newRow = [\n        index === 0 ? employee.name : \"\", // Merge the \"Employee Name\" across rows\n        row.shiftType,\n        ...row.data,\n        row.total,\n      ];\n      sheetData.push(newRow);\n      \n      // If it's the first row for this employee, mark the merge range\n      if (index === 0) {\n        merges.push({\n          s: { r: startRow, c: 0 }, // Start row and column (Employee Name column)\n          e: { r: startRow + rows.length - 1, c: 0 } // End row and column (same column, spanning rows)\n        });\n      }\n\n      // Highlight the \"Total\" row with a specific background color\n      if (row.shiftType === \"Total\") {\n        // Add background color for \"Total\" row (assuming this is index 3)\n        const lastRow = sheetData.length - 1;\n        for (let col = 0; col < sheetData[lastRow].length; col++) {\n          // Set the cell value and its style\n          sheetData[lastRow][col] = {\n            v: sheetData[lastRow][col], \n            s: { fill: { fgColor: { rgb: \"FFFF00\" } } } // Yellow background\n          };\n        }\n      }\n    });\n  });\n\n  // Create a worksheet and workbook from the data\n  const ws = XLSX.utils.aoa_to_sheet(sheetData);\n  \n  // Add the merge instruction to the worksheet\n  ws['!merges'] = merges;\n\n  // Create the workbook\n  const wb = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(wb, ws, \"Timesheets\");\n\n  // Export the workbook to Excel\n  XLSX.writeFile(wb, \"timesheet_data.xlsx\");\n};\n\n\nconst toggleRowExpansion = (employeeId) => {\n  setExpandedRows((prevState) => ({\n    ...prevState,\n    [employeeId]: !prevState[employeeId], // Toggle the expansion state\n  }));\n};\n\n  return (\n    <div>\n    <div className=\"month-navigation\" style={{ position: \"relative\" }}>\n      <button onClick={goToPreviousMonth}>Previous Month</button>\n      <span>{new Date(currentYear, currentMonth).toLocaleString('default', { month: 'long', year: 'numeric' })}</span>\n      <button onClick={goToNextMonth}>Next Month</button>\n\n      <button \n        onClick={exportToExcel}\n        style={{\n          padding: \"10px\",\n          fontSize: \"15px\", \n          backgroundColor: \"#4CAF50\",\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\",\n          position: \"absolute\",\n          right: \"10px\",  // Align to the right edge\n          top: \"0px\"     // Position below the month navigation\n        }}\n      >\n        Export to Excel\n      </button>\n    </div>\n        {/* Add the \"Expand All / Collapse All\" button above the table */}\n        <div style={{ marginBottom: \"10px\" }}>\n      <button onClick={toggleAllRows} style={{ padding: \"10px\", fontSize: \"15px\" }}>\n        {allExpanded ? \"Collapse All\" : \"Expand All\"}\n      </button>\n\n\n      <button onClick={() => handleGroupFilter(\"1\")}>Group 1</button>\n      <button onClick={() => handleGroupFilter(\"2\")}>Group 2</button>\n      <button onClick={() => handleGroupFilter(\"All\")}>All</button>\n      <button onClick={toggleAllRows}></button>\n\n\n    </div>\n      <table border=\"1\">\n        \n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Shift</th>\n      {monthDays.map((date, index) => {\n        // Check if it's today's date\n        const isToday = date === today;\n        return (\n          <th\n            key={date}\n            className={isToday ? \"highlight-today\" : \"\"}\n          >\n            {parseInt(date.split('-')[1], 10)}\n          </th>\n        );\n      })}\n      <th\n  onClick={() => handleSort(\"totalTime\")} // Call the sort handler on click\n  style={{ cursor: \"pointer\" }}\n>\n  Monthly Total {sortBy === \"totalTime\" ? (sortOrder === \"asc\" ? \"↑\" : \"↓\") : \"\"}\n</th>\n\n    </tr>\n  </thead>\n  <tbody>\n  {employees.map((employee, employeeIndex) => {\n  const monthlyTotal = calculateMonthlyTotal(employee.id);\n\n  // Filter the monthDays to get only the days up until today\n  const filteredDays = monthDays.filter(date => new Date(date) <= new Date(today));\n\n  // Calculate the number of weekdays (excluding weekends) up until today\n  const expectedWeekdays = filteredDays.filter(date => {\n    const day = new Date(date).getDay(); // Get the day of the week (0 = Sunday, 6 = Saturday)\n    return day !== 0 && day !== 6; // Only weekdays (exclude weekends)\n  }).length;\n\n  // Calculate the total expected hours up until today (expected weekdays * 8 hours per day)\n  const totalExpectedHours = expectedWeekdays * 8;\n\n  // Calculate the total worked hours up until today\n  const totalWorkedHours = filteredDays.reduce((acc, date) => {\n    const employeeData = timesheetData[employee.id]?.[date] || {};\n    return acc + (employeeData.normalTime || 0) + (employeeData.nightShift || 0) + (employeeData.holidayTime || 0);\n  }, 0);\n\n  // Get the color for the Total row based on the worked hours vs expected hours\n  const totalRowColor = getColorForWorkedHours(totalWorkedHours, totalExpectedHours);\n\n  const isExpanded = expandedRows[employee.id]; // Check if the row is expanded\n\n  return (\n    <React.Fragment key={employee.id}>\n      {/* Main row for employee with the name cell to toggle expansion */}\n      <tr\n        className={`row ${employeeIndex % 2 === 0 ? \"odd-row\" : \"even-row\"}`}\n        style={{ backgroundColor: \"lightgreen\" }} // Regular shift row color\n      >\n        <td\n          rowSpan={isExpanded ? 4 : 1}\n          onClick={() => toggleRowExpansion(employee.id)} // Click on the name to toggle expansion\n          style={{ cursor: \"pointer\", fontWeight: \"bold\" }}\n        >\n          {employee.name}\n        </td>\n\n        {/* Conditionally render Total row if collapsed */}\n        {!isExpanded ? (\n          <>\n            <td>Total</td>\n            {monthDays.map((date) => (\n              <td\n                key={date}\n                onClick={() => handleSetTime(employee.id, date)}\n                className={date === today ? \"highlight-today\" : \"\"}\n              >\n                {timesheetData[employee.id]?.[date]?.totalTime === 0\n                  ? \"0\"\n                  : timesheetData[employee.id]?.[date]?.totalTime\n                  ? `${timesheetData[employee.id][date].totalTime.toFixed(1)}`\n                  : \"\"}\n              </td>\n            ))}\n            <td style={{ backgroundColor: totalRowColor }}>{monthlyTotal.totalTime.toFixed(1)}</td>\n          </>\n        ) : (\n          <>\n            {/* Show Regular Row when Expanded */}\n            <td>Regular</td>\n            {monthDays.map((date) => (\n              <td\n                key={date}\n                onClick={() => handleSetTime(employee.id, date)}\n                className={date === today ? \"highlight-today\" : \"\"}\n              >\n                {timesheetData[employee.id]?.[date]?.normalTime === 0\n                  ? \"0\"\n                  : timesheetData[employee.id]?.[date]?.normalTime\n                  ? `${timesheetData[employee.id][date].normalTime.toFixed(1)}`\n                  : \"\"}\n              </td>\n            ))}\n            <td>{monthlyTotal.normalTime.toFixed(1)}</td>\n          </>\n        )}\n      </tr>\n\n      {/* Display expanded rows if expanded */}\n      {isExpanded && (\n        <>\n          {/* Night Shift Row */}\n          <tr\n            className={`row ${employeeIndex % 2 === 0 ? \"odd-row\" : \"even-row\"}`}\n            style={{ backgroundColor: \"lightblue\" }} // Night shift row color\n          >\n            <td>Night</td>\n            {monthDays.map((date) => (\n              <td\n                key={date}\n                onClick={() => handleSetTime(employee.id, date)}\n                className={date === today ? \"highlight-today\" : \"\"}\n              >\n                {timesheetData[employee.id]?.[date]?.nightShift === 0\n                  ? \"0\"\n                  : timesheetData[employee.id]?.[date]?.nightShift\n                  ? `${timesheetData[employee.id][date].nightShift.toFixed(1)}`\n                  : \"\"}\n              </td>\n            ))}\n            <td>{monthlyTotal.nightShift.toFixed(1)}</td>\n          </tr>\n\n          {/* Holiday Row */}\n          <tr\n            className={`row ${employeeIndex % 2 === 0 ? \"odd-row\" : \"even-row\"}`}\n            style={{ backgroundColor: \"lightcoral\" }} // Holiday row color\n          >\n            <td>Holiday</td>\n            {monthDays.map((date) => (\n              <td\n                key={date}\n                onClick={() => handleSetTime(employee.id, date)}\n                className={date === today ? \"highlight-today\" : \"\"}\n              >\n                {timesheetData[employee.id]?.[date]?.holidayTime === 0\n                  ? \"0\"\n                  : timesheetData[employee.id]?.[date]?.holidayTime\n                  ? `${timesheetData[employee.id][date].holidayTime.toFixed(1)}`\n                  : \"\"}\n              </td>\n            ))}\n            <td>{monthlyTotal.holidayTime.toFixed(1)}</td>\n          </tr>\n\n          {/* Total Row */}\n          <tr\n            style={{\n              backgroundColor: totalRowColor, // Apply the color to the entire Total row\n            }}\n          >\n            <td>Total</td>\n            {monthDays.map((date) => (\n              <td\n                key={date}\n                onClick={() => handleSetTime(employee.id, date)}\n                className={date === today ? \"highlight-today\" : \"\"}\n              >\n                {timesheetData[employee.id]?.[date]?.totalTime === 0\n                  ? \"0\"\n                  : timesheetData[employee.id]?.[date]?.totalTime\n                  ? `${timesheetData[employee.id][date].totalTime.toFixed(1)}`\n                  : \"\"}\n              </td>\n            ))}\n            <td>{monthlyTotal.totalTime.toFixed(1)}</td>\n          </tr>\n        </>\n      )}\n    </React.Fragment>\n  );\n})}\n    </tbody>\n\n\n\n</table>\n{modalOpen && (\n  <div className=\"modal1\">\n    <div className=\"modal-content1\">\n      <h2 className=\"modal-heading1\">Timesheet Details</h2>\n      \n      <div className=\"form-container1\">\n        <label className=\"form-label1\">\n          Start Time:\n          <input\n            type=\"text\"\n            value={startTime}\n            onChange={handleStartTimeChange}\n            className=\"input-field1\"\n            placeholder=\"hh:mm\"\n          />\n        </label>\n        \n        <label className=\"form-label1\">\n          End Time:\n          <input\n            type=\"text\"\n            value={endTime}\n            onChange={handleEndTimeChange}\n            className=\"input-field1\"\n            placeholder=\"hh:mm\"\n          />\n        </label>\n\n        <div className=\"checkbox-container1\">\n          <label className=\"checkbox-label1\">\n            <span>Next Day:</span>\n            <input\n              type=\"checkbox\"\n              checked={nextDay}\n              onChange={handleNextDayToggle}\n              className=\"checkbox-input1\"\n            />\n          </label>\n\n          <label className=\"checkbox-label1\">\n            <span>Is Holiday:</span>\n            <input\n              type=\"checkbox\"\n              checked={isHoliday}\n              onChange={handleHolidayToggle}\n              className=\"checkbox-input1\"\n            />\n          </label>\n        </div>\n        \n        <div className=\"time-summary1\">\n          <p>Total Time: {totalTime} hours</p>\n          <p>Night Shift Hours: {nightShiftHours} hours</p>\n          <p>Normal Time: {normalTime} hours</p>\n          <p>Holiday Time: {holidayTime} hours</p>\n        </div>\n        \n        <div className=\"modal-actions1\">\n          <button onClick={saveTimesheetDataToFirebase} className=\"save-btn1\">Save</button>\n          <button className=\"close-btn1\" onClick={() => setModalOpen(false)}>Close</button>\n        </div>\n      </div>\n    </div>\n  </div>\n)}\n\n\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}