{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { db } from './firebase'; // Assume Firebase is initialized here\nimport { collection, getDocs } from 'firebase/firestore'; // Assuming you're using Firestore for data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  monthDates = []\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [startTime, setStartTime] = useState('');\n  const [endTime, setEndTime] = useState('');\n\n  // Fetch employees from Firestore on component mount\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, 'employees'));\n        const employeeList = querySnapshot.docs.map(doc => doc.data());\n        setEmployees(employeeList);\n      } catch (error) {\n        console.error('Error fetching employees: ', error);\n      }\n    };\n    fetchEmployees();\n  }, []);\n\n  // Fetch timesheet data for the current month\n  useEffect(() => {\n    const fetchTimesheetData = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, 'timesheets'));\n        const timesheetDataMap = {};\n        querySnapshot.docs.forEach(doc => {\n          const data = doc.data();\n          timesheetDataMap[data.employeeId] = data;\n        });\n        setTimesheetData(timesheetDataMap);\n      } catch (error) {\n        console.error('Error fetching timesheet data: ', error);\n      }\n    };\n    fetchTimesheetData();\n  }, []);\n\n  // Calculate the total hours worked for an employee for the whole month\n  const calculateMonthlyTotal = employeeId => {\n    if (!timesheetData[employeeId]) return 0;\n    return monthDates.reduce((total, date) => {\n      const dayData = timesheetData[employeeId][date];\n      if (dayData) {\n        const hoursWorked = (new Date(dayData.endTime) - new Date(dayData.startTime)) / 3600000; // Convert ms to hours\n        return total + hoursWorked;\n      }\n      return total;\n    }, 0);\n  };\n\n  // Handle modal state change\n  const openModal = employee => {\n    setSelectedEmployee(employee);\n    setModalOpen(true);\n  };\n  const closeModal = () => {\n    setSelectedEmployee(null);\n    setModalOpen(false);\n  };\n\n  // Handle time input changes\n  const handleStartTimeChange = event => setStartTime(event.target.value);\n  const handleEndTimeChange = event => setEndTime(event.target.value);\n\n  // Save timesheet data to Firestore\n  const saveTimesheetDataToFirebase = async () => {\n    if (!selectedEmployee || !startTime || !endTime) return;\n    const newTimesheetData = {\n      employeeId: selectedEmployee.id,\n      startTime,\n      endTime\n    };\n    try {\n      // Assuming you have a 'timesheets' collection in Firestore\n      await db.collection('timesheets').add(newTimesheetData);\n      setTimesheetData({\n        ...timesheetData,\n        [selectedEmployee.id]: {\n          ...timesheetData[selectedEmployee.id],\n          [selectedEmployee.date]: newTimesheetData\n        }\n      });\n      closeModal();\n    } catch (error) {\n      console.error('Error saving timesheet data: ', error);\n    }\n  };\n\n  // Check if monthDates is valid and handle possible errors\n  if (!Array.isArray(monthDates)) {\n    console.error(\"monthDates must be an array\");\n    return null;\n  }\n  if (!employees || !Array.isArray(employees)) {\n    console.error(\"Employees data is not available\");\n    return null;\n  }\n  if (!timesheetData || typeof timesheetData !== 'object') {\n    console.error(\"Timesheet data is not available\");\n    return null;\n  }\n  if (!employees.length || !Object.keys(timesheetData).length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 12\n    }, this); // Show loading until data is available\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Timesheet for the Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Shift Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), monthDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Monthly Total\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => {\n          const monthlyTotal = calculateMonthlyTotal(employee.id); // Calculate monthly total\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.shiftType\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this), monthDates.map(date => {\n              var _timesheetData$employ;\n              const dayData = (_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : _timesheetData$employ[date];\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dayData ? `${dayData.startTime} - ${dayData.endTime}` : 'No data'\n              }, date, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 21\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [monthlyTotal.toFixed(2), \" hrs\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => openModal(employee),\n                children: \"Add Timesheet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 17\n            }, this)]\n          }, employee.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), modalOpen && selectedEmployee && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Timesheet for \", selectedEmployee.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Start Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: startTime,\n          onChange: handleStartTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"End Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: endTime,\n          onChange: handleEndTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveTimesheetDataToFirebase,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: closeModal,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"28SVLj3OYc7ZWPZG9TYzmeuwmIk=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","db","collection","getDocs","jsxDEV","_jsxDEV","TimesheetList","monthDates","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","startTime","setStartTime","endTime","setEndTime","fetchEmployees","querySnapshot","employeeList","docs","map","doc","data","error","console","fetchTimesheetData","timesheetDataMap","forEach","employeeId","calculateMonthlyTotal","reduce","total","date","dayData","hoursWorked","Date","openModal","employee","closeModal","handleStartTimeChange","event","target","value","handleEndTimeChange","saveTimesheetDataToFirebase","newTimesheetData","id","add","Array","isArray","length","Object","keys","children","fileName","_jsxFileName","lineNumber","columnNumber","border","monthlyTotal","name","shiftType","_timesheetData$employ","toFixed","onClick","type","onChange","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { db } from './firebase'; // Assume Firebase is initialized here\nimport { collection, getDocs } from 'firebase/firestore'; // Assuming you're using Firestore for data\n\nconst TimesheetList = ({ monthDates = [] }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [startTime, setStartTime] = useState('');\n  const [endTime, setEndTime] = useState('');\n\n  // Fetch employees from Firestore on component mount\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, 'employees'));\n        const employeeList = querySnapshot.docs.map((doc) => doc.data());\n        setEmployees(employeeList);\n      } catch (error) {\n        console.error('Error fetching employees: ', error);\n      }\n    };\n    fetchEmployees();\n  }, []);\n\n  // Fetch timesheet data for the current month\n  useEffect(() => {\n    const fetchTimesheetData = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, 'timesheets'));\n        const timesheetDataMap = {};\n        querySnapshot.docs.forEach((doc) => {\n          const data = doc.data();\n          timesheetDataMap[data.employeeId] = data;\n        });\n        setTimesheetData(timesheetDataMap);\n      } catch (error) {\n        console.error('Error fetching timesheet data: ', error);\n      }\n    };\n    fetchTimesheetData();\n  }, []);\n\n  // Calculate the total hours worked for an employee for the whole month\n  const calculateMonthlyTotal = (employeeId) => {\n    if (!timesheetData[employeeId]) return 0;\n    return monthDates.reduce((total, date) => {\n      const dayData = timesheetData[employeeId][date];\n      if (dayData) {\n        const hoursWorked = (new Date(dayData.endTime) - new Date(dayData.startTime)) / 3600000; // Convert ms to hours\n        return total + hoursWorked;\n      }\n      return total;\n    }, 0);\n  };\n\n  // Handle modal state change\n  const openModal = (employee) => {\n    setSelectedEmployee(employee);\n    setModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setSelectedEmployee(null);\n    setModalOpen(false);\n  };\n\n  // Handle time input changes\n  const handleStartTimeChange = (event) => setStartTime(event.target.value);\n  const handleEndTimeChange = (event) => setEndTime(event.target.value);\n\n  // Save timesheet data to Firestore\n  const saveTimesheetDataToFirebase = async () => {\n    if (!selectedEmployee || !startTime || !endTime) return;\n\n    const newTimesheetData = {\n      employeeId: selectedEmployee.id,\n      startTime,\n      endTime,\n    };\n\n    try {\n      // Assuming you have a 'timesheets' collection in Firestore\n      await db.collection('timesheets').add(newTimesheetData);\n      setTimesheetData({\n        ...timesheetData,\n        [selectedEmployee.id]: {\n          ...timesheetData[selectedEmployee.id],\n          [selectedEmployee.date]: newTimesheetData,\n        },\n      });\n      closeModal();\n    } catch (error) {\n      console.error('Error saving timesheet data: ', error);\n    }\n  };\n\n  // Check if monthDates is valid and handle possible errors\n  if (!Array.isArray(monthDates)) {\n    console.error(\"monthDates must be an array\");\n    return null;\n  }\n\n  if (!employees || !Array.isArray(employees)) {\n    console.error(\"Employees data is not available\");\n    return null;\n  }\n\n  if (!timesheetData || typeof timesheetData !== 'object') {\n    console.error(\"Timesheet data is not available\");\n    return null;\n  }\n\n  if (!employees.length || !Object.keys(timesheetData).length) {\n    return <div>Loading data...</div>;  // Show loading until data is available\n  }\n\n  return (\n    <div>\n      <h2>Timesheet for the Month</h2>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Shift Type</th>\n            {monthDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n            <th>Monthly Total</th>\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => {\n            const monthlyTotal = calculateMonthlyTotal(employee.id);  // Calculate monthly total\n            return (\n              <tr key={employee.id}>\n                <td>{employee.name}</td>\n                <td>{employee.shiftType}</td>\n                {monthDates.map((date) => {\n                  const dayData = timesheetData[employee.id]?.[date];\n                  return (\n                    <td key={date}>\n                      {dayData ? `${dayData.startTime} - ${dayData.endTime}` : 'No data'}\n                    </td>\n                  );\n                })}\n                <td>{monthlyTotal.toFixed(2)} hrs</td>\n                <td>\n                  <button onClick={() => openModal(employee)}>Add Timesheet</button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {modalOpen && selectedEmployee && (\n        <div>\n          <h3>Timesheet for {selectedEmployee.name}</h3>\n          <div>\n            <label>Start Time:</label>\n            <input type=\"time\" value={startTime} onChange={handleStartTimeChange} />\n          </div>\n          <div>\n            <label>End Time:</label>\n            <input type=\"time\" value={endTime} onChange={handleEndTimeChange} />\n          </div>\n          <button onClick={saveTimesheetDataToFirebase}>Save</button>\n          <button onClick={closeModal}>Cancel</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}