{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0); // Track night shift hours\n  const [nextDay, setNextDay] = useState(false); // Add \"Next Day\" flag\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\");\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data());\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = {\n            startTime: \"\",\n            endTime: \"\",\n            totalTime: 0,\n            nightShift: 0\n          };\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData();\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate total time and night shift hours\n  const calculateTotalTimeAndNightShift = (start, end, nextDay) => {\n    const startParts = start.split(\":\").map(Number); // [hours, minutes]\n    const endParts = end.split(\":\").map(Number);\n\n    // Convert start and end times into Date objects\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n    let endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // Adjust for next day if selected\n    if (nextDay) {\n      endDate.setDate(endDate.getDate() + 1); // Adjust the end date to the next day\n    }\n\n    // Calculate total time worked (in hours)\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60); // Convert to hours\n\n    // Night shift hours (10:00 PM to 6:00 AM)\n    const nightShiftStart = 22; // 10:00 PM\n    const nightShiftEnd = 6; // 6:00 AM\n\n    let nightShiftHours = 0;\n\n    // Night shift overlap calculation\n    const calculateNightShiftOverlap = (startDate, endDate) => {\n      let nightShift = 0;\n      const startHour = startDate.getHours();\n      const startMinutes = startDate.getMinutes();\n      const endHour = endDate.getHours();\n      const endMinutes = endDate.getMinutes();\n      if (startHour < nightShiftStart) {\n        if (endHour >= nightShiftStart) {\n          const overlapStart = nightShiftStart;\n          const overlapEnd = endHour + endMinutes / 60;\n          nightShift += overlapEnd - overlapStart;\n        }\n      } else if (startHour >= nightShiftStart && startHour < 24) {\n        const overlapStart = startHour + startMinutes / 60;\n        const overlapEnd = endHour + endMinutes / 60;\n        nightShift += Math.max(0, overlapEnd - overlapStart);\n      }\n      if (startHour >= 0 && startHour < nightShiftEnd) {\n        const overlapStart = Math.max(startHour, 0) + startMinutes / 60;\n        const overlapEnd = Math.min(endHour, nightShiftEnd) + endMinutes / 60;\n        nightShift += overlapEnd - overlapStart;\n      }\n      return nightShift;\n    };\n    nightShiftHours = calculateNightShiftOverlap(startDate, endDate);\n    return {\n      totalTime: totalTimeInHours.toFixed(2),\n      nightShift: nightShiftHours.toFixed(2)\n    };\n  };\n  const handleInputChange = async (employeeId, date, start, end, totalTime, nightShift) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = {\n        startTime: start,\n        endTime: end,\n        totalTime,\n        nightShift\n      };\n      return newData;\n    });\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, nightShift);\n  };\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, nightShift) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n      let updatedData = {};\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = {\n          startTime: start,\n          endTime: end,\n          totalTime,\n          nightShift\n        };\n      } else {\n        updatedData = {\n          [date]: {\n            startTime: start,\n            endTime: end,\n            totalTime,\n            nightShift\n          }\n        };\n      }\n      await setDoc(timesheetDocRef, {\n        hours: updatedData\n      });\n      fetchTimesheetData();\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n      setTimesheetData(updatedTimesheetData);\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setNightShiftHours(0); // Reset night shift\n    setNextDay(false); // Reset Next Day flag\n  };\n  const handleStartTimeChange = e => {\n    setStartTime(e.target.value);\n    if (endTime) {\n      const {\n        totalTime,\n        nightShift\n      } = calculateTotalTimeAndNightShift(e.target.value, endTime, nextDay);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    }\n  };\n  const handleEndTimeChange = e => {\n    const newEndTime = e.target.value;\n    setEndTime(newEndTime);\n    if (nextDay) {\n      // If \"Next Day\" is checked, adjust the end time to the next day\n      const adjustedEndTime = adjustEndTimeToNextDay(newEndTime);\n      setEndTime(adjustedEndTime);\n      const {\n        totalTime,\n        nightShift\n      } = calculateTotalTimeAndNightShift(startTime, adjustedEndTime, nextDay);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    } else {\n      const {\n        totalTime,\n        nightShift\n      } = calculateTotalTimeAndNightShift(startTime, newEndTime, nextDay);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    }\n  };\n  const adjustEndTimeToNextDay = endTime => {\n    const endParts = endTime.split(\":\").map(Number);\n    let endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n    endDate.setDate(endDate.getDate() + 1); // Adjust to next day\n\n    const hours = endDate.getHours().toString().padStart(2, \"0\");\n    const minutes = endDate.getMinutes().toString().padStart(2, \"0\");\n    return `${hours}:${minutes}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), weekDates.map(date => {\n            var _timesheetData$employ, _timesheetData$employ2;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleSetTime(employee.id, date),\n                children: ((_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.totalTime) || \"Set Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 19\n              }, this)\n            }, date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this);\n          })]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Set Time for \", selectedEmployee]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: startTime,\n        onChange: handleStartTimeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: endTime,\n        onChange: handleEndTimeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Next Day\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: nextDay,\n            onChange: () => setNextDay(!nextDay)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Time: \", totalTime, \" hours\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Night Shift Hours: \", nightShiftHours, \" hours\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime, nightShiftHours);\n          handleCloseModal();\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCloseModal,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"RAeZzDicpiTLy2cDsFjKOoXPhkM=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["useState","useEffect","collection","getDocs","getDoc","doc","setDoc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","timeAdjustments","setTimeAdjustments","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","nextDay","setNextDay","fetchData","employeeSnapshot","employeeData","docs","map","id","data","settingsDocRef","settingsDoc","exists","console","log","error","length","initialTimesheetData","reduce","acc","employee","weekAcc","date","nightShift","fetchTimesheetData","calculateTotalTimeAndNightShift","start","end","startParts","split","Number","endParts","startDate","Date","setHours","endDate","setDate","getDate","totalTimeInHours","nightShiftStart","nightShiftEnd","calculateNightShiftOverlap","startHour","getHours","startMinutes","getMinutes","endHour","endMinutes","overlapStart","overlapEnd","Math","max","min","toFixed","handleInputChange","employeeId","prevData","newData","saveTimesheetDataToFirebase","timesheetDocRef","updatedData","hours","querySnapshot","updatedTimesheetData","forEach","handleSetTime","handleCloseModal","handleStartTimeChange","e","target","value","handleEndTimeChange","newEndTime","adjustedEndTime","adjustEndTimeToNextDay","toString","padStart","minutes","children","fileName","_jsxFileName","lineNumber","columnNumber","name","_timesheetData$employ","_timesheetData$employ2","onClick","type","onChange","checked","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\"; \nimport { db } from \"./firebaseConfig\";\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0); // Track night shift hours\n  const [nextDay, setNextDay] = useState(false); // Add \"Next Day\" flag\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\");\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data());\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = { startTime: \"\", endTime: \"\", totalTime: 0, nightShift: 0 };\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData();\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate total time and night shift hours\n  const calculateTotalTimeAndNightShift = (start, end, nextDay) => {\n    const startParts = start.split(\":\").map(Number); // [hours, minutes]\n    const endParts = end.split(\":\").map(Number);\n\n    // Convert start and end times into Date objects\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n\n    let endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // Adjust for next day if selected\n    if (nextDay) {\n      endDate.setDate(endDate.getDate() + 1); // Adjust the end date to the next day\n    }\n\n    // Calculate total time worked (in hours)\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60); // Convert to hours\n\n    // Night shift hours (10:00 PM to 6:00 AM)\n    const nightShiftStart = 22; // 10:00 PM\n    const nightShiftEnd = 6; // 6:00 AM\n    \n    let nightShiftHours = 0;\n\n    // Night shift overlap calculation\n    const calculateNightShiftOverlap = (startDate, endDate) => {\n      let nightShift = 0;\n      \n      const startHour = startDate.getHours();\n      const startMinutes = startDate.getMinutes();\n      const endHour = endDate.getHours();\n      const endMinutes = endDate.getMinutes();\n      \n      if (startHour < nightShiftStart) {\n        if (endHour >= nightShiftStart) {\n          const overlapStart = nightShiftStart;\n          const overlapEnd = endHour + (endMinutes / 60);\n          nightShift += overlapEnd - overlapStart;\n        }\n      } else if (startHour >= nightShiftStart && startHour < 24) {\n        const overlapStart = startHour + (startMinutes / 60);\n        const overlapEnd = endHour + (endMinutes / 60);\n        nightShift += Math.max(0, overlapEnd - overlapStart);\n      }\n      \n      if (startHour >= 0 && startHour < nightShiftEnd) {\n        const overlapStart = Math.max(startHour, 0) + startMinutes / 60;\n        const overlapEnd = Math.min(endHour, nightShiftEnd) + endMinutes / 60;\n        nightShift += overlapEnd - overlapStart;\n      }\n      \n      return nightShift;\n    };\n\n    nightShiftHours = calculateNightShiftOverlap(startDate, endDate);\n\n    return { \n      totalTime: totalTimeInHours.toFixed(2), \n      nightShift: nightShiftHours.toFixed(2) \n    };\n  };\n\n  const handleInputChange = async (employeeId, date, start, end, totalTime, nightShift) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = { startTime: start, endTime: end, totalTime, nightShift };\n      return newData;\n    });\n\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, nightShift);\n  };\n\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, nightShift) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n\n      let updatedData = {};\n\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = { startTime: start, endTime: end, totalTime, nightShift };\n      } else {\n        updatedData = { [date]: { startTime: start, endTime: end, totalTime, nightShift } };\n      }\n\n      await setDoc(timesheetDocRef, { hours: updatedData });\n      fetchTimesheetData();\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n\n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n\n      setTimesheetData(updatedTimesheetData);\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setNightShiftHours(0); // Reset night shift\n    setNextDay(false); // Reset Next Day flag\n  };\n\n  const handleStartTimeChange = (e) => {\n    setStartTime(e.target.value);\n    if (endTime) {\n      const { totalTime, nightShift } = calculateTotalTimeAndNightShift(e.target.value, endTime, nextDay);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    }\n  };\n\n  const handleEndTimeChange = (e) => {\n    const newEndTime = e.target.value;\n    setEndTime(newEndTime);\n    \n    if (nextDay) {\n      // If \"Next Day\" is checked, adjust the end time to the next day\n      const adjustedEndTime = adjustEndTimeToNextDay(newEndTime);\n      setEndTime(adjustedEndTime);\n      const { totalTime, nightShift } = calculateTotalTimeAndNightShift(startTime, adjustedEndTime, nextDay);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    } else {\n      const { totalTime, nightShift } = calculateTotalTimeAndNightShift(startTime, newEndTime, nextDay);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    }\n  };\n\n  const adjustEndTimeToNextDay = (endTime) => {\n    const endParts = endTime.split(\":\").map(Number);\n    let endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n    endDate.setDate(endDate.getDate() + 1); // Adjust to next day\n\n    const hours = endDate.getHours().toString().padStart(2, \"0\");\n    const minutes = endDate.getMinutes().toString().padStart(2, \"0\");\n    return `${hours}:${minutes}`;\n  };\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td>\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <button onClick={() => handleSetTime(employee.id, date)}>\n                    {timesheetData[employee.id]?.[date]?.totalTime || \"Set Time\"}\n                  </button>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {modalOpen && (\n        <div>\n          <h2>Set Time for {selectedEmployee}</h2>\n          <input\n            type=\"time\"\n            value={startTime}\n            onChange={handleStartTimeChange}\n          />\n          <input\n            type=\"time\"\n            value={endTime}\n            onChange={handleEndTimeChange}\n          />\n          <div>\n            <label>\n              Next Day\n              <input\n                type=\"checkbox\"\n                checked={nextDay}\n                onChange={() => setNextDay(!nextDay)}\n              />\n            </label>\n          </div>\n          <p>Total Time: {totalTime} hours</p>\n          <p>Night Shift Hours: {nightShiftHours} hours</p>\n          <button\n            onClick={() => {\n              handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime, nightShiftHours);\n              handleCloseModal();\n            }}\n          >\n            Save\n          </button>\n          <button onClick={handleCloseModal}>Cancel</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}