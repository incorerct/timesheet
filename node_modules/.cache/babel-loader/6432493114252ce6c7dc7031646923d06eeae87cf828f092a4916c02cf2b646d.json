{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n// Import Firebase functions and Firestore\nimport { collection, addDoc, getDocs, updateDoc, doc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [newEmployeeName, setNewEmployeeName] = useState(\"\"); // State for new employee name input\n\n  // Fetch employees data from Firebase\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        // Get employees collection from Firebase\n        const querySnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n    fetchEmployees();\n  }, []);\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = \"\"; // Initially no work hours\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n    }\n  }, [employees, weekDates]);\n\n  // Handle input changes for work hours\n  const handleInputChange = (employeeId, date, hours) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = hours;\n      return newData;\n    });\n  };\n\n  // Handle adding a new employee manually and save to Firebase\n  const handleAddEmployee = async () => {\n    if (newEmployeeName.trim() === \"\") return; // Don't add empty names\n\n    try {\n      // Add new employee to Firebase collection\n      const docRef = await addDoc(collection(db, \"employees\"), {\n        name: newEmployeeName\n      });\n      // Add new employee locally to the state\n      const newEmployee = {\n        id: docRef.id,\n        // Use the Firebase document ID as the employee's ID\n        name: newEmployeeName\n      };\n      setEmployees(prevEmployees => [...prevEmployees, newEmployee]);\n      setNewEmployeeName(\"\"); // Clear the input after adding\n    } catch (error) {\n      console.error(\"Error adding employee to Firebase:\", error);\n    }\n  };\n\n  // Handle employee name change\n  const handleEmployeeNameChange = async (employeeId, newName) => {\n    try {\n      // Update employee name in Firestore\n      const employeeDoc = doc(db, \"employees\", employeeId);\n      await updateDoc(employeeDoc, {\n        name: newName\n      });\n\n      // Update local employee list\n      setEmployees(prevEmployees => prevEmployees.map(employee => employee.id === employeeId ? {\n        ...employee,\n        name: newName\n      } : employee));\n    } catch (error) {\n      console.error(\"Error updating employee name:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newEmployeeName,\n        onChange: e => setNewEmployeeName(e.target.value),\n        placeholder: \"Enter new employee name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddEmployee,\n        children: \"Add Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: employee.name,\n              onChange: e => handleEmployeeNameChange(employee.id, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), weekDates.map(date => {\n            var _timesheetData$employ;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: ((_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : _timesheetData$employ[date]) || \"\",\n                onChange: e => handleInputChange(employee.id, date, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 19\n              }, this)\n            }, date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this);\n          })]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"imh7+rXsw+UG5oC64y7vwRdvqNI=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","addDoc","getDocs","updateDoc","doc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","newEmployeeName","setNewEmployeeName","fetchEmployees","querySnapshot","employeeData","docs","map","id","data","error","console","length","initialTimesheetData","reduce","acc","employee","weekAcc","date","handleInputChange","employeeId","hours","prevData","newData","handleAddEmployee","trim","docRef","name","newEmployee","prevEmployees","handleEmployeeNameChange","newName","employeeDoc","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","border","_timesheetData$employ","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n// Import Firebase functions and Firestore\nimport { collection, addDoc, getDocs, updateDoc, doc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [newEmployeeName, setNewEmployeeName] = useState(\"\"); // State for new employee name input\n\n  // Fetch employees data from Firebase\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        // Get employees collection from Firebase\n        const querySnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n\n    fetchEmployees();\n  }, []);\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = \"\"; // Initially no work hours\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n    }\n  }, [employees, weekDates]);\n\n  // Handle input changes for work hours\n  const handleInputChange = (employeeId, date, hours) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = hours;\n      return newData;\n    });\n  };\n\n  // Handle adding a new employee manually and save to Firebase\n  const handleAddEmployee = async () => {\n    if (newEmployeeName.trim() === \"\") return; // Don't add empty names\n\n    try {\n      // Add new employee to Firebase collection\n      const docRef = await addDoc(collection(db, \"employees\"), {\n        name: newEmployeeName,\n      });\n      // Add new employee locally to the state\n      const newEmployee = {\n        id: docRef.id, // Use the Firebase document ID as the employee's ID\n        name: newEmployeeName,\n      };\n      setEmployees((prevEmployees) => [...prevEmployees, newEmployee]);\n      setNewEmployeeName(\"\"); // Clear the input after adding\n    } catch (error) {\n      console.error(\"Error adding employee to Firebase:\", error);\n    }\n  };\n\n  // Handle employee name change\n  const handleEmployeeNameChange = async (employeeId, newName) => {\n    try {\n      // Update employee name in Firestore\n      const employeeDoc = doc(db, \"employees\", employeeId);\n      await updateDoc(employeeDoc, { name: newName });\n\n      // Update local employee list\n      setEmployees((prevEmployees) =>\n        prevEmployees.map((employee) =>\n          employee.id === employeeId ? { ...employee, name: newName } : employee\n        )\n      );\n    } catch (error) {\n      console.error(\"Error updating employee name:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <input\n          type=\"text\"\n          value={newEmployeeName}\n          onChange={(e) => setNewEmployeeName(e.target.value)}\n          placeholder=\"Enter new employee name\"\n        />\n        <button onClick={handleAddEmployee}>Add Employee</button>\n      </div>\n\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>\n                <input\n                  type=\"text\"\n                  value={employee.name}\n                  onChange={(e) =>\n                    handleEmployeeNameChange(employee.id, e.target.value)\n                  }\n                />\n              </td>\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <input\n                    type=\"number\"\n                    value={timesheetData[employee.id]?.[date] || \"\"}\n                    onChange={(e) =>\n                      handleInputChange(\n                        employee.id,\n                        date,\n                        e.target.value\n                      )\n                    }\n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}