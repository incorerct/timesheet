{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n\n  // Fetch employees and timesheet data on component mount\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), snapshot => {\n        const employeeData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe; // Cleanup on unmount\n    };\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, snapshot => {\n        const updatedTimesheetData = {};\n        snapshot.forEach(doc => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                // Ensure it's a number\n                isHoliday: Boolean(record.isHoliday)\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe; // Cleanup on unmount\n    };\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n  const handleStartTimeChange = event => {\n    setStartTime(event.target.value);\n    calculateTimes(event.target.value, endTime, nextDay);\n  };\n  const handleEndTimeChange = event => {\n    setEndTime(event.target.value);\n    calculateTimes(startTime, event.target.value, nextDay);\n  };\n  const handleNextDayToggle = () => {\n    setNextDay(prev => !prev);\n    calculateTimes(startTime, endTime, !nextDay);\n  };\n  const handleHolidayToggle = () => {\n    setIsHoliday(prev => !prev);\n    if (!isHoliday) {\n      // Set the holiday time and reset total time\n      setHolidayTime(totalTime);\n      setTotalTime(0); // Reset total time if holiday is checked\n      setNightShiftHours(0); // Reset night shift hours if holiday is checked\n    } else {\n      setHolidayTime(0); // Reset holiday time\n      calculateTimes(startTime, endTime, nextDay); // Recalculate times if holiday is unchecked\n    }\n  };\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n  const calculateTimes = (start, end, isNextDay) => {\n    if (!start || !end || isHoliday) {\n      // If it's a holiday, set total time to 0\n      setTotalTime(0);\n      setNightShiftHours(0);\n      return;\n    }\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    const nightShiftStart = new Date(startDate);\n    nightShiftStart.setHours(22, 0, 0);\n    const nightShiftEnd = new Date(startDate);\n    nightShiftEnd.setDate(nightShiftEnd.getDate() + 1);\n    nightShiftEnd.setHours(6, 0, 0);\n    let nightShiftHours = 0;\n    if (startDate < nightShiftEnd && endDate >= nightShiftStart) {\n      const nightShiftStartTime = startDate < nightShiftStart ? nightShiftStart : startDate;\n      const nightShiftEndTime = endDate > nightShiftEnd ? nightShiftEnd : endDate;\n      nightShiftHours = (nightShiftEndTime - nightShiftStartTime) / (1000 * 60 * 60);\n    }\n    setTotalTime(totalTimeInHours.toFixed(2));\n    setNightShiftHours(nightShiftHours.toFixed(2));\n  };\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, nightShift, holidayTime) => {\n    try {\n      var _await$getDoc$data;\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = ((_await$getDoc$data = (await getDoc(timesheetDocRef)).data()) === null || _await$getDoc$data === void 0 ? void 0 : _await$getDoc$data.hours) || {};\n\n      // Ensuring all fields are correct types\n      timesheetData[date] = {\n        startTime: start,\n        endTime: end,\n        totalTime: parseFloat(totalTime),\n        // Ensure totalTime is a number\n        nightShift: parseFloat(nightShift),\n        // Ensure nightShift is a number\n        holidayTime: parseFloat(holidayTime),\n        // Ensure holidayTime is a number\n        isHoliday\n      };\n      await setDoc(timesheetDocRef, {\n        hours: timesheetData\n      });\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n  const handleInputChange = async (employeeId, date, start, end, totalTime, nightShift, holidayTime) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = {\n        startTime: start,\n        endTime: end,\n        totalTime,\n        nightShift,\n        holidayTime,\n        isHoliday\n      };\n      return newData;\n    });\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, nightShift, holidayTime);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this), weekDates.map(date => {\n            var _timesheetData$employ, _timesheetData$employ2;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleSetTime(employee.id, date),\n                children: \"Set Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 19\n              }, this), ((_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.totalTime) && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Total Time: \", timesheetData[employee.id][date].totalTime, \" hours\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Night Shift: \", timesheetData[employee.id][date].nightShift, \" hours\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Holiday Time: \", timesheetData[employee.id][date].holidayTime, \" hours\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 21\n              }, this)]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this);\n          })]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Set Time for \", selectedEmployee]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Start Time: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: startTime,\n          onChange: handleStartTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"End Time: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: endTime,\n          onChange: handleEndTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: nextDay,\n            onChange: handleNextDayToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this), \"Next Day\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: isHoliday,\n            onChange: handleHolidayToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this), \"Holiday\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Time: \", totalTime, \" hours\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Night Shift: \", nightShiftHours, \" hours\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Holiday Time: \", holidayTime, \" hours\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime, nightShiftHours, holidayTime),\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCloseModal,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"wNV2LoUbjaUXZHV3edriqlOvNLE=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["useState","useEffect","collection","onSnapshot","doc","setDoc","getDoc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","nextDay","setNextDay","isHoliday","setIsHoliday","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","holidayTime","setHolidayTime","fetchEmployees","unsubscribe","snapshot","employeeData","docs","map","id","data","fetchTimesheetData","timesheetDataRef","updatedTimesheetData","forEach","employeeId","hours","date","record","Object","entries","parseFloat","nightShift","Boolean","handleSetTime","handleStartTimeChange","event","target","value","calculateTimes","handleEndTimeChange","handleNextDayToggle","prev","handleHolidayToggle","handleCloseModal","start","end","isNextDay","startHours","startMinutes","split","Number","endHours","endMinutes","startDate","Date","setHours","endDate","setDate","getDate","totalTimeInHours","nightShiftStart","nightShiftEnd","nightShiftStartTime","nightShiftEndTime","toFixed","saveTimesheetDataToFirebase","_await$getDoc$data","timesheetDocRef","error","console","handleInputChange","prevData","newData","children","border","fileName","_jsxFileName","lineNumber","columnNumber","employee","name","_timesheetData$employ","_timesheetData$employ2","onClick","className","type","onChange","checked","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n\n  // Fetch employees and timesheet data on component mount\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), (snapshot) => {\n        const employeeData = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setEmployees(employeeData);\n      });\n\n      return unsubscribe; // Cleanup on unmount\n    };\n\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n\n      const unsubscribe = onSnapshot(timesheetDataRef, (snapshot) => {\n        const updatedTimesheetData = {};\n\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          const employeeId = doc.id;\n\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime), // Ensure it's a number\n                isHoliday: Boolean(record.isHoliday),\n              };\n            }\n          }\n        });\n\n        setTimesheetData(updatedTimesheetData);\n      });\n\n      return unsubscribe; // Cleanup on unmount\n    };\n\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  const handleStartTimeChange = (event) => {\n    setStartTime(event.target.value);\n    calculateTimes(event.target.value, endTime, nextDay);\n  };\n\n  const handleEndTimeChange = (event) => {\n    setEndTime(event.target.value);\n    calculateTimes(startTime, event.target.value, nextDay);\n  };\n\n  const handleNextDayToggle = () => {\n    setNextDay((prev) => !prev);\n    calculateTimes(startTime, endTime, !nextDay);\n  };\n\n  const handleHolidayToggle = () => {\n    setIsHoliday((prev) => !prev);\n    if (!isHoliday) {\n      // Set the holiday time and reset total time\n      setHolidayTime(totalTime);\n      setTotalTime(0); // Reset total time if holiday is checked\n      setNightShiftHours(0); // Reset night shift hours if holiday is checked\n    } else {\n      setHolidayTime(0); // Reset holiday time\n      calculateTimes(startTime, endTime, nextDay); // Recalculate times if holiday is unchecked\n    }\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n\n  const calculateTimes = (start, end, isNextDay) => {\n    if (!start || !end || isHoliday) {\n      // If it's a holiday, set total time to 0\n      setTotalTime(0);\n      setNightShiftHours(0);\n      return;\n    }\n\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n\n    const nightShiftStart = new Date(startDate);\n    nightShiftStart.setHours(22, 0, 0);\n\n    const nightShiftEnd = new Date(startDate);\n    nightShiftEnd.setDate(nightShiftEnd.getDate() + 1);\n    nightShiftEnd.setHours(6, 0, 0);\n\n    let nightShiftHours = 0;\n\n    if (startDate < nightShiftEnd && endDate >= nightShiftStart) {\n      const nightShiftStartTime = startDate < nightShiftStart ? nightShiftStart : startDate;\n      const nightShiftEndTime = endDate > nightShiftEnd ? nightShiftEnd : endDate;\n      nightShiftHours = (nightShiftEndTime - nightShiftStartTime) / (1000 * 60 * 60);\n    }\n\n    setTotalTime(totalTimeInHours.toFixed(2));\n    setNightShiftHours(nightShiftHours.toFixed(2));\n  };\n\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, nightShift, holidayTime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = (await getDoc(timesheetDocRef)).data()?.hours || {};\n\n      // Ensuring all fields are correct types\n      timesheetData[date] = {\n        startTime: start,\n        endTime: end,\n        totalTime: parseFloat(totalTime), // Ensure totalTime is a number\n        nightShift: parseFloat(nightShift), // Ensure nightShift is a number\n        holidayTime: parseFloat(holidayTime), // Ensure holidayTime is a number\n        isHoliday,\n      };\n\n      await setDoc(timesheetDocRef, { hours: timesheetData });\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  const handleInputChange = async (employeeId, date, start, end, totalTime, nightShift, holidayTime) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = { startTime: start, endTime: end, totalTime, nightShift, holidayTime, isHoliday };\n      return newData;\n    });\n\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, nightShift, holidayTime);\n  };\n\n  return (\n    <div>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td>\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <button onClick={() => handleSetTime(employee.id, date)}>Set Time</button>\n                  {timesheetData[employee.id]?.[date]?.totalTime && (\n                    <div>\n                      <p>Total Time: {timesheetData[employee.id][date].totalTime} hours</p>\n                      <p>Night Shift: {timesheetData[employee.id][date].nightShift} hours</p>\n                      <p>Holiday Time: {timesheetData[employee.id][date].holidayTime} hours</p>\n                    </div>\n                  )}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {modalOpen && (\n        <div className=\"modal\">\n          <h2>Set Time for {selectedEmployee}</h2>\n          <div>\n            <label>Start Time: </label>\n            <input type=\"time\" value={startTime} onChange={handleStartTimeChange} />\n          </div>\n          <div>\n            <label>End Time: </label>\n            <input type=\"time\" value={endTime} onChange={handleEndTimeChange} />\n          </div>\n          <div>\n            <label>\n              <input type=\"checkbox\" checked={nextDay} onChange={handleNextDayToggle} />\n              Next Day\n            </label>\n            <label>\n              <input type=\"checkbox\" checked={isHoliday} onChange={handleHolidayToggle} />\n              Holiday\n            </label>\n          </div>\n          <p>Total Time: {totalTime} hours</p>\n          <p>Night Shift: {nightShiftHours} hours</p>\n          <p>Holiday Time: {holidayTime} hours</p>\n          <button\n            onClick={() =>\n              handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime, nightShiftHours, holidayTime)\n            }\n          >\n            Save\n          </button>\n          <button onClick={handleCloseModal}>Close</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}