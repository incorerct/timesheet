{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  var _employees$find;\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0); // Track night shift hours\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\");\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data());\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = {\n            startTime: \"\",\n            endTime: \"\",\n            totalTime: 0,\n            nightShift: 0\n          };\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData();\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate total time and night shift hours\n  const calculateTotalTimeAndNightShift = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // If the end time is earlier than the start time, adjust for crossing midnight\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // Adjust the end date to the next day\n    }\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60); // Calculate total hours worked\n    setTotalTime(totalTimeInHours.toFixed(2));\n\n    // Night shift calculation (10:00 PM to 6:00 AM)\n    const nightStart = 22; // 10:00 PM\n    const nightEnd = 6; // 6:00 AM\n    let nightShift = 0;\n\n    // Calculate the overlap of start time and night shift\n    const startHour = startDate.getHours();\n    const endHour = endDate.getHours();\n\n    // Check for night shift overlap\n    if (startDate.getHours() >= nightStart || startDate.getHours() < nightEnd) {\n      let overlapStart = startDate;\n      let overlapEnd = endDate;\n\n      // If the start hour is before 10 PM, set the start of the overlap to 10 PM\n      if (startHour < nightStart) {\n        overlapStart = new Date(startDate.setHours(nightStart, 0, 0));\n      }\n\n      // If the end hour is after 6 AM, set the end of the overlap to 6 AM\n      if (endHour >= nightEnd) {\n        overlapEnd = new Date(endDate.setHours(nightEnd, 0, 0));\n      }\n\n      // Calculate the overlap duration between the night shift hours and the worked hours\n      nightShift = (overlapEnd - overlapStart) / (1000 * 60 * 60); // in hours\n    }\n    setNightShiftHours(nightShift.toFixed(2)); // Store night shift hours\n\n    return {\n      totalTime: totalTimeInHours.toFixed(2),\n      nightShift: nightShift.toFixed(2)\n    };\n  };\n  const handleInputChange = async (employeeId, date, start, end, totalTime, nightShift) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = {\n        startTime: start,\n        endTime: end,\n        totalTime,\n        nightShift\n      };\n      return newData;\n    });\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, nightShift);\n  };\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, nightShift) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n      let updatedData = {};\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = {\n          startTime: start,\n          endTime: end,\n          totalTime,\n          nightShift\n        };\n      } else {\n        updatedData = {\n          [date]: {\n            startTime: start,\n            endTime: end,\n            totalTime,\n            nightShift\n          }\n        };\n      }\n      await setDoc(timesheetDocRef, {\n        hours: updatedData\n      });\n      fetchTimesheetData();\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n      setTimesheetData(updatedTimesheetData);\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setNightShiftHours(0); // Reset night shift\n  };\n  const handleStartTimeChange = e => {\n    setStartTime(e.target.value);\n    if (endTime) {\n      const {\n        totalTime,\n        nightShift\n      } = calculateTotalTimeAndNightShift(e.target.value, endTime);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    }\n  };\n  const handleEndTimeChange = e => {\n    setEndTime(e.target.value);\n    if (startTime) {\n      const {\n        totalTime,\n        nightShift\n      } = calculateTotalTimeAndNightShift(startTime, e.target.value);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Time Adjustments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Normal Start Time: \", timeAdjustments.normalStartTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Normal End Time: \", timeAdjustments.normalEndTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this), weekDates.map(date => {\n            var _timesheetData$employ, _timesheetData$employ2;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleSetTime(employee.id, date),\n                children: \"Set Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 19\n              }, this), ((_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.totalTime) && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Total Time: \", timesheetData[employee.id][date].totalTime, \" hours\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Night Shift: \", timesheetData[employee.id][date].nightShift, \" hours\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 21\n              }, this)]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this);\n          })]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Set Time for \", (_employees$find = employees.find(emp => emp.id === selectedEmployee)) === null || _employees$find === void 0 ? void 0 : _employees$find.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Date: \", selectedDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Start Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: startTime,\n          onChange: handleStartTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"End Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: endTime,\n          onChange: handleEndTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Time: \", totalTime, \" hours\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Night Shift: \", nightShiftHours, \" hours\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime, nightShiftHours);\n          handleCloseModal();\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCloseModal,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"Z0GsS8t5/vFHCe0L1hBwqNDjLro=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["useState","useEffect","collection","getDocs","getDoc","doc","setDoc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","_employees$find","employees","setEmployees","timesheetData","setTimesheetData","timeAdjustments","setTimeAdjustments","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","fetchData","employeeSnapshot","employeeData","docs","map","id","data","settingsDocRef","settingsDoc","exists","console","log","error","length","initialTimesheetData","reduce","acc","employee","weekAcc","date","nightShift","fetchTimesheetData","calculateTotalTimeAndNightShift","start","end","startParts","split","Number","endParts","startDate","Date","setHours","endDate","setDate","getDate","totalTimeInHours","toFixed","nightStart","nightEnd","startHour","getHours","endHour","overlapStart","overlapEnd","handleInputChange","employeeId","prevData","newData","saveTimesheetDataToFirebase","timesheetDocRef","updatedData","hours","querySnapshot","updatedTimesheetData","forEach","handleSetTime","handleCloseModal","handleStartTimeChange","e","target","value","handleEndTimeChange","children","fileName","_jsxFileName","lineNumber","columnNumber","normalStartTime","normalEndTime","border","name","_timesheetData$employ","_timesheetData$employ2","onClick","find","emp","type","onChange","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\"; \nimport { db } from \"./firebaseConfig\";\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0); // Track night shift hours\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\");\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data());\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = { startTime: \"\", endTime: \"\", totalTime: 0, nightShift: 0 };\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData();\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate total time and night shift hours\n  const calculateTotalTimeAndNightShift = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n  \n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n  \n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n  \n    // If the end time is earlier than the start time, adjust for crossing midnight\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // Adjust the end date to the next day\n    }\n  \n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60); // Calculate total hours worked\n    setTotalTime(totalTimeInHours.toFixed(2));\n  \n    // Night shift calculation (10:00 PM to 6:00 AM)\n    const nightStart = 22; // 10:00 PM\n    const nightEnd = 6; // 6:00 AM\n    let nightShift = 0;\n  \n    // Calculate the overlap of start time and night shift\n    const startHour = startDate.getHours();\n    const endHour = endDate.getHours();\n  \n    // Check for night shift overlap\n    if (startDate.getHours() >= nightStart || startDate.getHours() < nightEnd) {\n      let overlapStart = startDate;\n      let overlapEnd = endDate;\n  \n      // If the start hour is before 10 PM, set the start of the overlap to 10 PM\n      if (startHour < nightStart) {\n        overlapStart = new Date(startDate.setHours(nightStart, 0, 0));\n      }\n  \n      // If the end hour is after 6 AM, set the end of the overlap to 6 AM\n      if (endHour >= nightEnd) {\n        overlapEnd = new Date(endDate.setHours(nightEnd, 0, 0));\n      }\n  \n      // Calculate the overlap duration between the night shift hours and the worked hours\n      nightShift = (overlapEnd - overlapStart) / (1000 * 60 * 60); // in hours\n    }\n  \n    setNightShiftHours(nightShift.toFixed(2)); // Store night shift hours\n  \n    return { totalTime: totalTimeInHours.toFixed(2), nightShift: nightShift.toFixed(2) };\n  };\n  \n\n  const handleInputChange = async (employeeId, date, start, end, totalTime, nightShift) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = { startTime: start, endTime: end, totalTime, nightShift };\n      return newData;\n    });\n\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, nightShift);\n  };\n\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, nightShift) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n\n      let updatedData = {};\n\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = { startTime: start, endTime: end, totalTime, nightShift };\n      } else {\n        updatedData = { [date]: { startTime: start, endTime: end, totalTime, nightShift } };\n      }\n\n      await setDoc(timesheetDocRef, { hours: updatedData });\n      fetchTimesheetData();\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n\n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n\n      setTimesheetData(updatedTimesheetData);\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setNightShiftHours(0); // Reset night shift\n  };\n\n  const handleStartTimeChange = (e) => {\n    setStartTime(e.target.value);\n    if (endTime) {\n      const { totalTime, nightShift } = calculateTotalTimeAndNightShift(e.target.value, endTime);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    }\n  };\n\n  const handleEndTimeChange = (e) => {\n    setEndTime(e.target.value);\n    if (startTime) {\n      const { totalTime, nightShift } = calculateTotalTimeAndNightShift(startTime, e.target.value);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <h3>Time Adjustments</h3>\n        <p>Normal Start Time: {timeAdjustments.normalStartTime}</p>\n        <p>Normal End Time: {timeAdjustments.normalEndTime}</p>\n      </div>\n\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td>\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <button onClick={() => handleSetTime(employee.id, date)}>Set Time</button>\n                  {timesheetData[employee.id]?.[date]?.totalTime && (\n                    <div>\n                      <p>Total Time: {timesheetData[employee.id][date].totalTime} hours</p>\n                      <p>Night Shift: {timesheetData[employee.id][date].nightShift} hours</p>\n                    </div>\n                  )}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {modalOpen && (\n        <div>\n          <h3>Set Time for {employees.find(emp => emp.id === selectedEmployee)?.name}</h3>\n          <p>Date: {selectedDate}</p>\n          <label>\n            Start Time:\n            <input type=\"time\" value={startTime} onChange={handleStartTimeChange} />\n          </label>\n          <label>\n            End Time:\n            <input type=\"time\" value={endTime} onChange={handleEndTimeChange} />\n          </label>\n          <div>\n            <p>Total Time: {totalTime} hours</p>\n            <p>Night Shift: {nightShiftHours} hours</p>\n          </div>\n          <button\n            onClick={() => {\n              handleInputChange(\n                selectedEmployee,\n                selectedDate,\n                startTime,\n                endTime,\n                totalTime,\n                nightShiftHours\n              );\n              handleCloseModal();\n            }}\n          >\n            Save\n          </button>\n          <button onClick={handleCloseModal}>Cancel</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}