{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = () => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n  const [today, setToday] = useState(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1; // JS months are 0-indexed\n    const day = now.getDate();\n    return `${month}-${day < 10 ? '0' + day : day}`; // Format MM-DD\n  });\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), snapshot => {\n        const employeeData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, snapshot => {\n        const updatedTimesheetData = {};\n        snapshot.forEach(doc => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    var _timesheetData$employ, _timesheetData$employ2, _timesheetData$employ3, _timesheetData$employ4, _timesheetData$employ5, _timesheetData$employ6;\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(((_timesheetData$employ = timesheetData[employeeId]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.startTime) || \"\");\n    setEndTime(((_timesheetData$employ3 = timesheetData[employeeId]) === null || _timesheetData$employ3 === void 0 ? void 0 : (_timesheetData$employ4 = _timesheetData$employ3[date]) === null || _timesheetData$employ4 === void 0 ? void 0 : _timesheetData$employ4.endTime) || \"\");\n    setIsHoliday(((_timesheetData$employ5 = timesheetData[employeeId]) === null || _timesheetData$employ5 === void 0 ? void 0 : (_timesheetData$employ6 = _timesheetData$employ5[date]) === null || _timesheetData$employ6 === void 0 ? void 0 : _timesheetData$employ6.isHoliday) || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = event => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = event => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n    if (newIsHoliday) {\n      // If it's a holiday, reset normal time, night shift time, and total time\n      setNormalTime(0);\n      setNightShiftHours(0);\n      setTotalTime(totalTime);\n      setHolidayTime(totalTime); // The holiday time becomes the total time worked\n    } else {\n      // If it's not a holiday, recalculate times\n      calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n    }\n  };\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    const nightShiftStartHour = 22; // 10:00 PM\n    const nightShiftEndHour = 6; // 6:00 AM (next day)\n    let nightShiftHours = 0;\n    let startTime = startDate.getHours() + startDate.getMinutes() / 60;\n    let endTime = endDate.getHours() + endDate.getMinutes() / 60;\n    if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) && (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n      nightShiftHours = (endDate - startDate) / (1000 * 60 * 60);\n    } else if (startTime < nightShiftStartHour && (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n      let nightShiftStartTime = new Date(startDate);\n      nightShiftStartTime.setHours(nightShiftStartHour, 0, 0);\n      nightShiftHours = (endDate - nightShiftStartTime) / (1000 * 60 * 60);\n    } else if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) && endTime >= nightShiftEndHour) {\n      let nightShiftEndTime = new Date(startDate);\n      nightShiftEndTime.setHours(nightShiftEndHour, 0, 0);\n      nightShiftHours = (nightShiftEndTime - startDate) / (1000 * 60 * 60);\n    } else {\n      nightShiftHours = 0;\n    }\n    setTotalTime(totalTimeInHours.toFixed(1));\n    setNightShiftHours(nightShiftHours.toFixed(1));\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(1));\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(1));\n  };\n\n  // Save timesheet data to Firestore\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      var _await$getDoc$data;\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = ((_await$getDoc$data = (await getDoc(timesheetDocRef)).data()) === null || _await$getDoc$data === void 0 ? void 0 : _await$getDoc$data.hours) || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShiftHours),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday\n      };\n      await setDoc(timesheetDocRef, {\n        hours: timesheetData\n      });\n      setModalOpen(false);\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Calculate monthly totals for an employee\n  const calculateMonthlyTotal = employeeId => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0\n    };\n    const employeeData = timesheetData[employeeId];\n    const daysInMonth = generateMonthDays(currentYear, currentMonth);\n    daysInMonth.forEach(date => {\n      const dayData = employeeData === null || employeeData === void 0 ? void 0 : employeeData[date];\n      if (dayData) {\n        monthlyTotal.normalTime += dayData.normalTime;\n        monthlyTotal.nightShift += dayData.nightShift;\n        monthlyTotal.holidayTime += dayData.holidayTime;\n      }\n    });\n    return monthlyTotal;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Timesheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: currentMonth,\n        onChange: e => setCurrentMonth(parseInt(e.target.value)),\n        children: [...Array(12)].map((_, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: index,\n          children: new Date(0, index).toLocaleString(\"en\", {\n            month: \"long\"\n          })\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: currentYear,\n        onChange: e => setCurrentYear(parseInt(e.target.value)),\n        children: [2023, 2024, 2025, 2026].map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: year,\n          children: year\n        }, year, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), employees.map(employee => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: employee.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: generateMonthDays(currentYear, currentMonth).map(date => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSetTime(employee.id, date),\n          children: date\n        }, date, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this)]\n    }, employee.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this)), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Start Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: startTime,\n          onChange: handleStartTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"End Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: endTime,\n          onChange: handleEndTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Day:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: nextDay,\n          onChange: handleNextDayToggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Holiday:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isHoliday,\n          onChange: handleHolidayToggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Time: \", totalTime, \" hours\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Night Shift: \", nightShiftHours, \" hours\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Holiday Time: \", holidayTime, \" hours\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Normal Time: \", normalTime, \" hours\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveTimesheetDataToFirebase,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setModalOpen(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"+UJDdB588G2R4waHIrxH2rPB3Tc=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","onSnapshot","doc","setDoc","getDoc","db","jsxDEV","_jsxDEV","TimesheetList","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","nextDay","setNextDay","isHoliday","setIsHoliday","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","holidayTime","setHolidayTime","normalTime","setNormalTime","currentMonth","setCurrentMonth","Date","getMonth","currentYear","setCurrentYear","getFullYear","generateMonthDays","year","month","daysInMonth","getDate","days","day","push","today","setToday","now","fetchEmployees","unsubscribe","snapshot","employeeData","docs","map","id","data","fetchTimesheetData","timesheetDataRef","updatedTimesheetData","forEach","employeeId","hours","date","record","Object","entries","parseFloat","nightShift","Boolean","handleSetTime","_timesheetData$employ","_timesheetData$employ2","_timesheetData$employ3","_timesheetData$employ4","_timesheetData$employ5","_timesheetData$employ6","handleStartTimeChange","event","newStartTime","target","value","calculateTimes","handleEndTimeChange","newEndTime","handleNextDayToggle","newNextDay","handleHolidayToggle","newIsHoliday","start","end","isNextDay","startHours","startMinutes","split","Number","endHours","endMinutes","startDate","setHours","endDate","setDate","totalTimeInHours","nightShiftStartHour","nightShiftEndHour","getHours","getMinutes","nightShiftStartTime","nightShiftEndTime","toFixed","saveTimesheetDataToFirebase","_await$getDoc$data","timesheetDocRef","error","console","calculateMonthlyTotal","monthlyTotal","dayData","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","parseInt","Array","_","index","toLocaleString","employee","name","onClick","className","type","checked","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\n\nconst TimesheetList = () => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n\n  const [today, setToday] = useState(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1; // JS months are 0-indexed\n    const day = now.getDate();\n    return `${month}-${day < 10 ? '0' + day : day}`; // Format MM-DD\n  });\n\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), (snapshot) => {\n        const employeeData = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, (snapshot) => {\n        const updatedTimesheetData = {};\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0,\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(timesheetData[employeeId]?.[date]?.startTime || \"\");\n    setEndTime(timesheetData[employeeId]?.[date]?.endTime || \"\");\n    setIsHoliday(timesheetData[employeeId]?.[date]?.isHoliday || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = (event) => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = (event) => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n\n    if (newIsHoliday) {\n      // If it's a holiday, reset normal time, night shift time, and total time\n      setNormalTime(0);\n      setNightShiftHours(0);\n      setTotalTime(totalTime);\n      setHolidayTime(totalTime); // The holiday time becomes the total time worked\n    } else {\n      // If it's not a holiday, recalculate times\n      calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n    }\n  };\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    const nightShiftStartHour = 22;  // 10:00 PM\n    const nightShiftEndHour = 6;  // 6:00 AM (next day)\n    let nightShiftHours = 0;\n\n    let startTime = startDate.getHours() + startDate.getMinutes() / 60;\n    let endTime = endDate.getHours() + endDate.getMinutes() / 60;\n\n    if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) &&\n        (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n      nightShiftHours = (endDate - startDate) / (1000 * 60 * 60);  \n    } else if (startTime < nightShiftStartHour && (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n      let nightShiftStartTime = new Date(startDate);\n      nightShiftStartTime.setHours(nightShiftStartHour, 0, 0);  \n      nightShiftHours = (endDate - nightShiftStartTime) / (1000 * 60 * 60);  \n    } else if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) && endTime >= nightShiftEndHour) {\n      let nightShiftEndTime = new Date(startDate);\n      nightShiftEndTime.setHours(nightShiftEndHour, 0, 0);  \n      nightShiftHours = (nightShiftEndTime - startDate) / (1000 * 60 * 60);  \n    } else {\n      nightShiftHours = 0;  \n    }\n\n    setTotalTime(totalTimeInHours.toFixed(1));\n    setNightShiftHours(nightShiftHours.toFixed(1));\n\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(1));\n\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(1));\n  };\n\n  // Save timesheet data to Firestore\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = (await getDoc(timesheetDocRef)).data()?.hours || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShiftHours),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday,\n      };\n      await setDoc(timesheetDocRef, { hours: timesheetData });\n      setModalOpen(false);\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Calculate monthly totals for an employee\n  const calculateMonthlyTotal = (employeeId) => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0,\n    };\n\n    const employeeData = timesheetData[employeeId];\n    const daysInMonth = generateMonthDays(currentYear, currentMonth);\n\n    daysInMonth.forEach((date) => {\n      const dayData = employeeData?.[date];\n      if (dayData) {\n        monthlyTotal.normalTime += dayData.normalTime;\n        monthlyTotal.nightShift += dayData.nightShift;\n        monthlyTotal.holidayTime += dayData.holidayTime;\n      }\n    });\n\n    return monthlyTotal;\n  };\n\n  return (\n    <div>\n      <h2>Timesheet</h2>\n      <div>\n        <select\n          value={currentMonth}\n          onChange={(e) => setCurrentMonth(parseInt(e.target.value))}\n        >\n          {[...Array(12)].map((_, index) => (\n            <option key={index} value={index}>\n              {new Date(0, index).toLocaleString(\"en\", { month: \"long\" })}\n            </option>\n          ))}\n        </select>\n\n        <select\n          value={currentYear}\n          onChange={(e) => setCurrentYear(parseInt(e.target.value))}\n        >\n          {[2023, 2024, 2025, 2026].map((year) => (\n            <option key={year} value={year}>\n              {year}\n            </option>\n          ))}\n        </select>\n      </div>\n      \n      {employees.map((employee) => (\n        <div key={employee.id}>\n          <h3>{employee.name}</h3>\n          <div>\n            {generateMonthDays(currentYear, currentMonth).map((date) => (\n              <button\n                key={date}\n                onClick={() => handleSetTime(employee.id, date)}\n              >\n                {date}\n              </button>\n            ))}\n          </div>\n        </div>\n      ))}\n\n      {modalOpen && (\n        <div className=\"modal\">\n          <div>\n            <label>Start Time:</label>\n            <input\n              type=\"time\"\n              value={startTime}\n              onChange={handleStartTimeChange}\n            />\n          </div>\n\n          <div>\n            <label>End Time:</label>\n            <input\n              type=\"time\"\n              value={endTime}\n              onChange={handleEndTimeChange}\n            />\n          </div>\n\n          <div>\n            <label>Next Day:</label>\n            <input\n              type=\"checkbox\"\n              checked={nextDay}\n              onChange={handleNextDayToggle}\n            />\n          </div>\n\n          <div>\n            <label>Holiday:</label>\n            <input\n              type=\"checkbox\"\n              checked={isHoliday}\n              onChange={handleHolidayToggle}\n            />\n          </div>\n\n          <div>\n            <p>Total Time: {totalTime} hours</p>\n            <p>Night Shift: {nightShiftHours} hours</p>\n            <p>Holiday Time: {holidayTime} hours</p>\n            <p>Normal Time: {normalTime} hours</p>\n          </div>\n\n          <button onClick={saveTimesheetDataToFirebase}>Save</button>\n          <button onClick={() => setModalOpen(false)}>Cancel</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}