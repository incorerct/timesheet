{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\"; // Add setDoc import here\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({}); // State for time adjustments\n  const [modalOpen, setModalOpen] = useState(false); // State for opening the modal\n  const [selectedEmployee, setSelectedEmployee] = useState(null); // Selected employee for time entry\n  const [selectedDate, setSelectedDate] = useState(null); // Selected date for time entry\n  const [startTime, setStartTime] = useState(\"\"); // Start time input\n  const [endTime, setEndTime] = useState(\"\"); // End time input\n  const [totalTime, setTotalTime] = useState(0); // Total time calculated\n\n  // Fetch employees data and time adjustments from Firebase\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch employees\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n\n        // Fetch time adjustments\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\"); // Correct Firestore path\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data()); // Set the adjustments to the state\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array means this effect runs only once on component mount\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = {\n            startTime: \"\",\n            endTime: \"\",\n            totalTime: 0\n          }; // Initially empty values\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData(); // Fetch timesheet data when employees or weekDates change\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate the total time, handling overnight shifts\n  const calculateTotalTime = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n\n    // Create Date objects for accurate time calculations\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // If end time is earlier than start time, assume itâ€™s the next day\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // Move end date to the next day\n    }\n\n    // Calculate the time difference in hours\n    const diff = (endDate - startDate) / (1000 * 60 * 60);\n    setTotalTime(diff.toFixed(2)); // Set the total time in hours\n  };\n\n  // Handle input changes for work hours\n  const handleInputChange = async (employeeId, date, start, end, totalTime) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = {\n        startTime: start,\n        endTime: end,\n        totalTime\n      };\n      return newData;\n    });\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime);\n  };\n\n  // Function to save timesheet data to Firebase\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n      let updatedData = {};\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = {\n          startTime: start,\n          endTime: end,\n          totalTime\n        };\n      } else {\n        updatedData = {\n          [date]: {\n            startTime: start,\n            endTime: end,\n            totalTime\n          }\n        };\n      }\n      await setDoc(timesheetDocRef, {\n        hours: updatedData\n      });\n      fetchTimesheetData(); // Refetch the data after saving\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Function to fetch the latest timesheet data\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n      setTimesheetData(updatedTimesheetData); // Update state with the fetched data\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  // Handle opening the time modal and selecting time\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  // Handle closing the time modal\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Time Adjustments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Normal Start Time: \", timeAdjustments.normalStartTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Normal End Time: \", timeAdjustments.normalEndTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Overtime Start Time: \", timeAdjustments.overtimeStartTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Overtime End Time: \", timeAdjustments.overtimeEndTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this), \" \", weekDates.map(date => {\n            var _timesheetData$employ;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleSetTime(employee.id, date),\n                children: \"Set Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: ((_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : _timesheetData$employ[date]) && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: `From ${timesheetData[employee.id][date].startTime} - ${timesheetData[employee.id][date].endTime}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: `${timesheetData[employee.id][date].totalTime} hours`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 19\n              }, this)]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this);\n          })]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Set Work Hours\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Start Time (24hr format):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: startTime,\n          onChange: e => {\n            setStartTime(e.target.value);\n            if (endTime) calculateTotalTime(e.target.value, endTime);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"End Time (24hr format):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: endTime,\n          onChange: e => {\n            setEndTime(e.target.value);\n            if (startTime) calculateTotalTime(startTime, e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Total Time: \", totalTime, \" hours\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime);\n            handleCloseModal();\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCloseModal,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"nyn1McRQ1TqgQrMwj9Gg0jF9aE0=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["useState","useEffect","collection","getDocs","getDoc","doc","setDoc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","timeAdjustments","setTimeAdjustments","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","totalTime","setTotalTime","fetchData","employeeSnapshot","employeeData","docs","map","id","data","settingsDocRef","settingsDoc","exists","console","log","error","length","initialTimesheetData","reduce","acc","employee","weekAcc","date","fetchTimesheetData","calculateTotalTime","start","end","startParts","split","Number","endParts","startDate","Date","setHours","endDate","setDate","getDate","diff","toFixed","handleInputChange","employeeId","prevData","newData","saveTimesheetDataToFirebase","timesheetDocRef","updatedData","hours","querySnapshot","updatedTimesheetData","forEach","handleSetTime","handleCloseModal","children","fileName","_jsxFileName","lineNumber","columnNumber","normalStartTime","normalEndTime","overtimeStartTime","overtimeEndTime","border","name","_timesheetData$employ","onClick","className","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\"; // Add setDoc import here\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({}); // State for time adjustments\n  const [modalOpen, setModalOpen] = useState(false); // State for opening the modal\n  const [selectedEmployee, setSelectedEmployee] = useState(null); // Selected employee for time entry\n  const [selectedDate, setSelectedDate] = useState(null); // Selected date for time entry\n  const [startTime, setStartTime] = useState(\"\"); // Start time input\n  const [endTime, setEndTime] = useState(\"\"); // End time input\n  const [totalTime, setTotalTime] = useState(0); // Total time calculated\n\n  // Fetch employees data and time adjustments from Firebase\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch employees\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n\n        // Fetch time adjustments\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\"); // Correct Firestore path\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data()); // Set the adjustments to the state\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array means this effect runs only once on component mount\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = { startTime: \"\", endTime: \"\", totalTime: 0 }; // Initially empty values\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData(); // Fetch timesheet data when employees or weekDates change\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate the total time, handling overnight shifts\n  const calculateTotalTime = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n\n    // Create Date objects for accurate time calculations\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // If end time is earlier than start time, assume itâ€™s the next day\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // Move end date to the next day\n    }\n\n    // Calculate the time difference in hours\n    const diff = (endDate - startDate) / (1000 * 60 * 60);\n    setTotalTime(diff.toFixed(2)); // Set the total time in hours\n  };\n\n  // Handle input changes for work hours\n  const handleInputChange = async (employeeId, date, start, end, totalTime) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = { startTime: start, endTime: end, totalTime };\n      return newData;\n    });\n\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime);\n  };\n\n  // Function to save timesheet data to Firebase\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId); \n      const timesheetData = await getDoc(timesheetDocRef);\n\n      let updatedData = {};\n\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = { startTime: start, endTime: end, totalTime };\n      } else {\n        updatedData = { [date]: { startTime: start, endTime: end, totalTime } };\n      }\n\n      await setDoc(timesheetDocRef, { hours: updatedData });\n      fetchTimesheetData(); // Refetch the data after saving\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Function to fetch the latest timesheet data\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n\n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n\n      setTimesheetData(updatedTimesheetData); // Update state with the fetched data\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  // Handle opening the time modal and selecting time\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  // Handle closing the time modal\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n  };\n\n  return (\n    <div>\n      {/* Display Time Adjustments */}\n      <div>\n        <h3>Time Adjustments</h3>\n        <p>Normal Start Time: {timeAdjustments.normalStartTime}</p>\n        <p>Normal End Time: {timeAdjustments.normalEndTime}</p>\n        <p>Overtime Start Time: {timeAdjustments.overtimeStartTime}</p>\n        <p>Overtime End Time: {timeAdjustments.overtimeEndTime}</p>\n      </div>\n\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td> {/* Removed the input field for name */}\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <button onClick={() => handleSetTime(employee.id, date)}>Set Time</button>\n                  <div>\n                    {timesheetData[employee.id]?.[date] && (\n                      <div>\n                        <span>{`From ${timesheetData[employee.id][date].startTime} - ${timesheetData[employee.id][date].endTime}`}</span>\n                        <br />\n                        <strong>{`${timesheetData[employee.id][date].totalTime} hours`}</strong>\n                      </div>\n                    )}\n                  </div>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {/* Modal for selecting time */}\n      {modalOpen && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <h3>Set Work Hours</h3>\n            <label>Start Time (24hr format):</label>\n            <input\n              type=\"time\"\n              value={startTime}\n              onChange={(e) => {\n                setStartTime(e.target.value);\n                if (endTime) calculateTotalTime(e.target.value, endTime);\n              }}\n            />\n            <br />\n            <label>End Time (24hr format):</label>\n            <input\n              type=\"time\"\n              value={endTime}\n              onChange={(e) => {\n                setEndTime(e.target.value);\n                if (startTime) calculateTotalTime(startTime, e.target.value);\n              }}\n            />\n            <br />\n            <strong>Total Time: {totalTime} hours</strong>\n            <br />\n            <button\n              onClick={() => {\n                handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime);\n                handleCloseModal();\n              }}\n            >\n              Save\n            </button>\n            <button onClick={handleCloseModal}>Close</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}