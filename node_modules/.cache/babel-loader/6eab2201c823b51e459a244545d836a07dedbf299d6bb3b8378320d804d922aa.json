{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { collection, getDocs, setDoc, doc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false); // State for opening the modal\n  const [selectedEmployee, setSelectedEmployee] = useState(null); // Selected employee for time entry\n  const [selectedDate, setSelectedDate] = useState(null); // Selected date for time entry\n  const [startTime, setStartTime] = useState(\"\"); // Start time input\n  const [endTime, setEndTime] = useState(\"\"); // End time input\n\n  // Fetch employees data from Firebase\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n    fetchEmployees();\n  }, []);\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = {\n            startTime: \"\",\n            endTime: \"\",\n            normalWorked: 0,\n            overtimeWorked: 0\n          }; // Initially empty values\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData(); // Fetch timesheet data when employees or weekDates change\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate normal time and overtime\n  const calculateTimeDetails = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n\n    // Create Date objects for accurate time calculations\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // If end time is earlier than start time, assume itâ€™s the next day\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // Move end date to the next day\n    }\n\n    // Calculate the total time difference in hours\n    const diff = (endDate - startDate) / (1000 * 60 * 60);\n\n    // Calculate normal working time (e.g., 9 AM to 5 PM)\n    const normalStart = 9; // 9 AM\n    const normalEnd = 17; // 5 PM\n\n    let normalWorked = 0;\n    let overtimeWorked = 0;\n\n    // If the shift starts before 9 AM\n    if (startDate.getHours() < normalStart) {\n      startDate.setHours(normalStart, 0); // Normalize to 9 AM\n    }\n\n    // If the shift ends after 5 PM, consider overtime\n    if (endDate.getHours() > normalEnd) {\n      overtimeWorked = (endDate - new Date(endDate.setHours(normalEnd))) / (1000 * 60 * 60);\n      normalWorked = diff - overtimeWorked;\n    } else {\n      normalWorked = diff;\n    }\n    return {\n      normalWorked: normalWorked.toFixed(2),\n      // Round to 2 decimal places\n      overtimeWorked: overtimeWorked.toFixed(2) // Round to 2 decimal places\n    };\n  };\n\n  // Handle input changes for work hours\n  const handleInputChange = async (employeeId, date, start, end) => {\n    const {\n      normalWorked,\n      overtimeWorked\n    } = calculateTimeDetails(start, end);\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = {\n        startTime: start,\n        endTime: end,\n        normalWorked,\n        overtimeWorked\n      };\n      return newData;\n    });\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, normalWorked, overtimeWorked);\n  };\n\n  // Function to save timesheet data to Firebase\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, normalWorked, overtimeWorked) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n      let updatedData = {};\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = {\n          startTime: start,\n          endTime: end,\n          normalWorked,\n          overtimeWorked\n        };\n      } else {\n        updatedData = {\n          [date]: {\n            startTime: start,\n            endTime: end,\n            normalWorked,\n            overtimeWorked\n          }\n        };\n      }\n      await setDoc(timesheetDocRef, {\n        hours: updatedData\n      });\n      fetchTimesheetData(); // Refetch the data after saving\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Function to fetch the latest timesheet data\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n      setTimesheetData(updatedTimesheetData); // Update state with the fetched data\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  // Function to calculate the total worked hours for an employee over the entire month\n  const calculateMonthlyTotal = employeeId => {\n    let totalNormal = 0;\n    let totalOvertime = 0;\n    weekDates.forEach(date => {\n      if (timesheetData[employeeId] && timesheetData[employeeId][date]) {\n        totalNormal += parseFloat(timesheetData[employeeId][date].normalWorked);\n        totalOvertime += parseFloat(timesheetData[employeeId][date].overtimeWorked);\n      }\n    });\n    const total = totalNormal + totalOvertime;\n    return total.toFixed(2); // Rounded to 2 decimal places\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total Worked Hours (Month)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), \" \", weekDates.map(date => {\n            var _timesheetData$employ;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  setSelectedEmployee(employee.id);\n                  setSelectedDate(date);\n                  setModalOpen(true); // Open modal\n                },\n                children: \"Set Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: ((_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : _timesheetData$employ[date]) && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: `From ${timesheetData[employee.id][date].startTime} - ${timesheetData[employee.id][date].endTime}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: `Normal: ${timesheetData[employee.id][date].normalWorked} hours, Overtime: ${timesheetData[employee.id][date].overtimeWorked} hours`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 191,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 19\n              }, this)]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [calculateMonthlyTotal(employee.id), \" hours\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this)]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Set Time for \", selectedEmployee]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Start Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            value: startTime,\n            onChange: e => setStartTime(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"End Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            value: endTime,\n            onChange: e => setEndTime(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleInputChange(selectedEmployee, selectedDate, startTime, endTime),\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setModalOpen(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"tDChKeRPMJ6hF3eAvT9Wr1qB8Lc=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","getDocs","setDoc","doc","getDoc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","fetchEmployees","querySnapshot","employeeData","docs","map","id","data","error","console","length","initialTimesheetData","reduce","acc","employee","weekAcc","date","normalWorked","overtimeWorked","fetchTimesheetData","calculateTimeDetails","start","end","startParts","split","Number","endParts","startDate","Date","setHours","endDate","setDate","getDate","diff","normalStart","normalEnd","getHours","toFixed","handleInputChange","employeeId","prevData","newData","saveTimesheetDataToFirebase","timesheetDocRef","updatedData","exists","hours","updatedTimesheetData","forEach","calculateMonthlyTotal","totalNormal","totalOvertime","parseFloat","total","children","border","fileName","_jsxFileName","lineNumber","columnNumber","name","_timesheetData$employ","onClick","className","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { collection, getDocs, setDoc, doc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false); // State for opening the modal\n  const [selectedEmployee, setSelectedEmployee] = useState(null); // Selected employee for time entry\n  const [selectedDate, setSelectedDate] = useState(null); // Selected date for time entry\n  const [startTime, setStartTime] = useState(\"\"); // Start time input\n  const [endTime, setEndTime] = useState(\"\"); // End time input\n\n  // Fetch employees data from Firebase\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n\n    fetchEmployees();\n  }, []);\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = { startTime: \"\", endTime: \"\", normalWorked: 0, overtimeWorked: 0 }; // Initially empty values\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData(); // Fetch timesheet data when employees or weekDates change\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate normal time and overtime\n  const calculateTimeDetails = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n\n    // Create Date objects for accurate time calculations\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // If end time is earlier than start time, assume itâ€™s the next day\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // Move end date to the next day\n    }\n\n    // Calculate the total time difference in hours\n    const diff = (endDate - startDate) / (1000 * 60 * 60);\n\n    // Calculate normal working time (e.g., 9 AM to 5 PM)\n    const normalStart = 9; // 9 AM\n    const normalEnd = 17; // 5 PM\n\n    let normalWorked = 0;\n    let overtimeWorked = 0;\n\n    // If the shift starts before 9 AM\n    if (startDate.getHours() < normalStart) {\n      startDate.setHours(normalStart, 0); // Normalize to 9 AM\n    }\n\n    // If the shift ends after 5 PM, consider overtime\n    if (endDate.getHours() > normalEnd) {\n      overtimeWorked = (endDate - new Date(endDate.setHours(normalEnd))) / (1000 * 60 * 60);\n      normalWorked = diff - overtimeWorked;\n    } else {\n      normalWorked = diff;\n    }\n\n    return {\n      normalWorked: normalWorked.toFixed(2), // Round to 2 decimal places\n      overtimeWorked: overtimeWorked.toFixed(2) // Round to 2 decimal places\n    };\n  };\n\n  // Handle input changes for work hours\n  const handleInputChange = async (employeeId, date, start, end) => {\n    const { normalWorked, overtimeWorked } = calculateTimeDetails(start, end);\n\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = { startTime: start, endTime: end, normalWorked, overtimeWorked };\n      return newData;\n    });\n\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, normalWorked, overtimeWorked);\n  };\n\n  // Function to save timesheet data to Firebase\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, normalWorked, overtimeWorked) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId); \n      const timesheetData = await getDoc(timesheetDocRef);\n\n      let updatedData = {};\n\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = { startTime: start, endTime: end, normalWorked, overtimeWorked };\n      } else {\n        updatedData = { [date]: { startTime: start, endTime: end, normalWorked, overtimeWorked } };\n      }\n\n      await setDoc(timesheetDocRef, { hours: updatedData });\n      fetchTimesheetData(); // Refetch the data after saving\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Function to fetch the latest timesheet data\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n\n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n\n      setTimesheetData(updatedTimesheetData); // Update state with the fetched data\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  // Function to calculate the total worked hours for an employee over the entire month\n  const calculateMonthlyTotal = (employeeId) => {\n    let totalNormal = 0;\n    let totalOvertime = 0;\n\n    weekDates.forEach((date) => {\n      if (timesheetData[employeeId] && timesheetData[employeeId][date]) {\n        totalNormal += parseFloat(timesheetData[employeeId][date].normalWorked);\n        totalOvertime += parseFloat(timesheetData[employeeId][date].overtimeWorked);\n      }\n    });\n\n    const total = totalNormal + totalOvertime;\n    return total.toFixed(2); // Rounded to 2 decimal places\n  };\n\n  return (\n    <div>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n            <th>Total Worked Hours (Month)</th>\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td> {/* Display employee name */}\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <button onClick={() => { \n                    setSelectedEmployee(employee.id); \n                    setSelectedDate(date); \n                    setModalOpen(true); // Open modal\n                  }}>\n                    Set Time\n                  </button>\n                  <div>\n                    {timesheetData[employee.id]?.[date] && (\n                      <div>\n                        <span>{`From ${timesheetData[employee.id][date].startTime} - ${timesheetData[employee.id][date].endTime}`}</span>\n                        <br />\n                        <strong>{`Normal: ${timesheetData[employee.id][date].normalWorked} hours, Overtime: ${timesheetData[employee.id][date].overtimeWorked} hours`}</strong>\n                      </div>\n                    )}\n                  </div>\n                </td>\n              ))}\n              <td>{calculateMonthlyTotal(employee.id)} hours</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {modalOpen && (\n        <div className=\"modal\">\n          <div>\n            <h2>Set Time for {selectedEmployee}</h2>\n            <div>\n              <label>Start Time:</label>\n              <input type=\"time\" value={startTime} onChange={(e) => setStartTime(e.target.value)} />\n            </div>\n            <div>\n              <label>End Time:</label>\n              <input type=\"time\" value={endTime} onChange={(e) => setEndTime(e.target.value)} />\n            </div>\n            <div>\n              <button onClick={() => handleInputChange(selectedEmployee, selectedDate, startTime, endTime)}>Submit</button>\n            </div>\n            <div>\n              <button onClick={() => setModalOpen(false)}>Cancel</button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}