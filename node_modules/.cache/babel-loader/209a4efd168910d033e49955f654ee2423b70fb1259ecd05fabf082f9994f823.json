{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\"; // Add setDoc import here\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  var _employees$find;\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({}); // State for time adjustments\n  const [modalOpen, setModalOpen] = useState(false); // State for opening the modal\n  const [selectedEmployee, setSelectedEmployee] = useState(null); // Selected employee for time entry\n  const [selectedDate, setSelectedDate] = useState(null); // Selected date for time entry\n  const [startTime, setStartTime] = useState(\"\"); // Start time input\n  const [endTime, setEndTime] = useState(\"\"); // End time input\n  const [totalTime, setTotalTime] = useState(0); // Total time calculated\n  const [normalTime, setNormalTime] = useState(0); // Normal time\n  const [overtime, setOvertime] = useState(0); // Overtime\n\n  // Fetch employees data and time adjustments from Firebase\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch employees\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n\n        // Fetch time adjustments\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\"); // Correct Firestore path\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data()); // Set the adjustments to the state\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array means this effect runs only once on component mount\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = {\n            startTime: \"\",\n            endTime: \"\",\n            totalTime: 0\n          }; // Initially empty values\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData(); // Fetch timesheet data when employees or weekDates change\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate the total time, normal time, and overtime\n  const calculateTotalTime = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n\n    // Create Date objects for accurate time calculations\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // If end time is earlier than start time, assume itâ€™s the next day\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // Move end date to the next day\n    }\n\n    // Calculate the total time worked in hours\n    const diff = (endDate - startDate) / (1000 * 60 * 60);\n    setTotalTime(diff.toFixed(2)); // Set the total time in hours\n  };\n\n  // Handle input changes for work hours\n  const handleInputChange = async (employeeId, date, start, end, totalTime, normalTime, overtime) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = {\n        startTime: start,\n        endTime: end,\n        totalTime,\n        normalTime,\n        overtime\n      };\n      return newData;\n    });\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, normalTime, overtime);\n  };\n\n  // Function to save timesheet data to Firebase\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, normalTime, overtime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n      let updatedData = {};\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = {\n          startTime: start,\n          endTime: end,\n          totalTime,\n          normalTime,\n          overtime\n        };\n      } else {\n        updatedData = {\n          [date]: {\n            startTime: start,\n            endTime: end,\n            totalTime,\n            normalTime,\n            overtime\n          }\n        };\n      }\n      await setDoc(timesheetDocRef, {\n        hours: updatedData\n      });\n      fetchTimesheetData(); // Refetch the data after saving\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Function to fetch the latest timesheet data\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n      setTimesheetData(updatedTimesheetData); // Update state with the fetched data\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  // Handle opening the time modal and selecting time\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  // Handle closing the time modal\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setNormalTime(0);\n    setOvertime(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Time Adjustments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Normal Start Time: \", timeAdjustments.normalStartTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Normal End Time: \", timeAdjustments.normalEndTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Overtime Start Time: \", timeAdjustments.overtimeStartTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Overtime End Time: \", timeAdjustments.overtimeEndTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this), \" \", weekDates.map(date => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: timesheetData[employee.id] && timesheetData[employee.id][date] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [timesheetData[employee.id][date].startTime, \" - \", timesheetData[employee.id][date].endTime]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Total: \", timesheetData[employee.id][date].totalTime, \" hours\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Normal: \", timesheetData[employee.id][date].normalTime, \" hours\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Overtime: \", timesheetData[employee.id][date].overtime, \" hours\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSetTime(employee.id, date),\n              children: \"Set Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 21\n            }, this)\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this))]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Set Time for \", (_employees$find = employees.find(emp => emp.id === selectedEmployee)) === null || _employees$find === void 0 ? void 0 : _employees$find.name, \" on \", selectedDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: startTime,\n        onChange: e => setStartTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: endTime,\n        onChange: e => setEndTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          calculateTotalTime(startTime, endTime);\n          handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime, normalTime, overtime);\n        },\n        children: \"Save Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCloseModal,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"FeF6yWx6Q+owCURoYGLuTt0J+eI=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["useState","useEffect","collection","getDocs","getDoc","doc","setDoc","db","jsxDEV","_jsxDEV","Fragment","_Fragment","TimesheetList","weekDates","_s","_employees$find","employees","setEmployees","timesheetData","setTimesheetData","timeAdjustments","setTimeAdjustments","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","totalTime","setTotalTime","normalTime","setNormalTime","overtime","setOvertime","fetchData","employeeSnapshot","employeeData","docs","map","id","data","settingsDocRef","settingsDoc","exists","console","log","error","length","initialTimesheetData","reduce","acc","employee","weekAcc","date","fetchTimesheetData","calculateTotalTime","start","end","startParts","split","Number","endParts","startDate","Date","setHours","endDate","setDate","getDate","diff","toFixed","handleInputChange","employeeId","prevData","newData","saveTimesheetDataToFirebase","timesheetDocRef","updatedData","hours","querySnapshot","updatedTimesheetData","forEach","handleSetTime","handleCloseModal","children","fileName","_jsxFileName","lineNumber","columnNumber","normalStartTime","normalEndTime","overtimeStartTime","overtimeEndTime","border","name","onClick","find","emp","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\"; // Add setDoc import here\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({}); // State for time adjustments\n  const [modalOpen, setModalOpen] = useState(false); // State for opening the modal\n  const [selectedEmployee, setSelectedEmployee] = useState(null); // Selected employee for time entry\n  const [selectedDate, setSelectedDate] = useState(null); // Selected date for time entry\n  const [startTime, setStartTime] = useState(\"\"); // Start time input\n  const [endTime, setEndTime] = useState(\"\"); // End time input\n  const [totalTime, setTotalTime] = useState(0); // Total time calculated\n  const [normalTime, setNormalTime] = useState(0); // Normal time\n  const [overtime, setOvertime] = useState(0); // Overtime\n\n  // Fetch employees data and time adjustments from Firebase\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch employees\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n\n        // Fetch time adjustments\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\"); // Correct Firestore path\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data()); // Set the adjustments to the state\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array means this effect runs only once on component mount\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = { startTime: \"\", endTime: \"\", totalTime: 0 }; // Initially empty values\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData(); // Fetch timesheet data when employees or weekDates change\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate the total time, normal time, and overtime\n  const calculateTotalTime = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n  \n    // Create Date objects for accurate time calculations\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n  \n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n  \n    // If end time is earlier than start time, assume itâ€™s the next day\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // Move end date to the next day\n    }\n  \n    // Calculate the total time worked in hours\n    const diff = (endDate - startDate) / (1000 * 60 * 60);\n    setTotalTime(diff.toFixed(2)); // Set the total time in hours\n  };\n  \n\n  // Handle input changes for work hours\n  const handleInputChange = async (employeeId, date, start, end, totalTime, normalTime, overtime) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = { startTime: start, endTime: end, totalTime, normalTime, overtime };\n      return newData;\n    });\n\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, normalTime, overtime);\n  };\n\n  // Function to save timesheet data to Firebase\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, normalTime, overtime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId); \n      const timesheetData = await getDoc(timesheetDocRef);\n\n      let updatedData = {};\n\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = { startTime: start, endTime: end, totalTime, normalTime, overtime };\n      } else {\n        updatedData = { [date]: { startTime: start, endTime: end, totalTime, normalTime, overtime } };\n      }\n\n      await setDoc(timesheetDocRef, { hours: updatedData });\n      fetchTimesheetData(); // Refetch the data after saving\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Function to fetch the latest timesheet data\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n\n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n\n      setTimesheetData(updatedTimesheetData); // Update state with the fetched data\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  // Handle opening the time modal and selecting time\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  // Handle closing the time modal\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setNormalTime(0);\n    setOvertime(0);\n  };\n\n  return (\n    <div>\n      {/* Display Time Adjustments */}\n      <div>\n        <h3>Time Adjustments</h3>\n        <p>Normal Start Time: {timeAdjustments.normalStartTime}</p>\n        <p>Normal End Time: {timeAdjustments.normalEndTime}</p>\n        <p>Overtime Start Time: {timeAdjustments.overtimeStartTime}</p>\n        <p>Overtime End Time: {timeAdjustments.overtimeEndTime}</p>\n      </div>\n\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td> {/* Removed the input field for name */}\n              {weekDates.map((date) => (\n                <td key={date}>\n                  {timesheetData[employee.id] && timesheetData[employee.id][date] ? (\n                    <>\n                      <div>{timesheetData[employee.id][date].startTime} - {timesheetData[employee.id][date].endTime}</div>\n                      <div>Total: {timesheetData[employee.id][date].totalTime} hours</div>\n                      <div>Normal: {timesheetData[employee.id][date].normalTime} hours</div>\n                      <div>Overtime: {timesheetData[employee.id][date].overtime} hours</div>\n                    </>\n                  ) : (\n                    <button onClick={() => handleSetTime(employee.id, date)}>Set Time</button>\n                  )}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {modalOpen && (\n        <div>\n          <h3>Set Time for {employees.find(emp => emp.id === selectedEmployee)?.name} on {selectedDate}</h3>\n          <input\n            type=\"time\"\n            value={startTime}\n            onChange={(e) => setStartTime(e.target.value)}\n          />\n          <input\n            type=\"time\"\n            value={endTime}\n            onChange={(e) => setEndTime(e.target.value)}\n          />\n          <button\n            onClick={() => {\n              calculateTotalTime(startTime, endTime);\n              handleInputChange(\n                selectedEmployee,\n                selectedDate,\n                startTime,\n                endTime,\n                totalTime,\n                normalTime,\n                overtime\n              );\n            }}\n          >\n            Save Time\n          </button>\n          <button onClick={handleCloseModal}>Cancel</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}