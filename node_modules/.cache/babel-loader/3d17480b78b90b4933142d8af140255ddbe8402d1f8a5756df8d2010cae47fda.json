{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [totalTime, setTotalTime] = useState(0);\n  const [overtime, setOvertime] = useState(0); // State for overtime hours\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\");\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data());\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = {\n            startTime: \"\",\n            endTime: \"\",\n            totalTime: 0,\n            overtime: 0\n          };\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData();\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate total time and overtime based on different time ranges\n  const calculateTotalTime = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // If the end time is earlier than the start time (crosses midnight)\n    }\n    const diff = (endDate - startDate) / (1000 * 60 * 60);\n    setTotalTime(diff.toFixed(2)); // Set the total time in hours\n\n    // Calculate overtime based on the given normal and overtime times\n    const normalStart = timeAdjustments.normalStartTime.split(\":\").map(Number);\n    const normalEnd = timeAdjustments.normalEndTime.split(\":\").map(Number);\n    const overtimeStart = timeAdjustments.overtimeStartTime.split(\":\").map(Number);\n    const overtimeEnd = timeAdjustments.overtimeEndTime.split(\":\").map(Number);\n    const normalStartDate = new Date();\n    normalStartDate.setHours(normalStart[0], normalStart[1], 0);\n    const normalEndDate = new Date();\n    normalEndDate.setHours(normalEnd[0], normalEnd[1], 0);\n    const overtimeStartDate = new Date();\n    overtimeStartDate.setHours(overtimeStart[0], overtimeStart[1], 0);\n    const overtimeEndDate = new Date();\n    overtimeEndDate.setHours(overtimeEnd[0], overtimeEnd[1], 0);\n    let overtimeHours = 0;\n\n    // If the work period exceeds normal working hours, calculate overtime\n    if (endDate > normalEndDate && endDate <= overtimeEndDate) {\n      overtimeHours = (endDate - normalEndDate) / (1000 * 60 * 60);\n      overtimeHours = overtimeHours.toFixed(2); // Overtime in hours\n    } else if (endDate > overtimeEndDate || startDate >= overtimeStartDate && endDate <= overtimeEndDate) {\n      // If the work period is fully within the overtime window or extends beyond it\n      overtimeHours = (endDate - overtimeStartDate) / (1000 * 60 * 60);\n      overtimeHours = overtimeHours.toFixed(2);\n    }\n    setOvertime(overtimeHours); // Set overtime\n  };\n  const handleInputChange = async (employeeId, date, start, end, totalTime, overtime) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = {\n        startTime: start,\n        endTime: end,\n        totalTime,\n        overtime\n      };\n      return newData;\n    });\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, overtime);\n  };\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, overtime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n      let updatedData = {};\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = {\n          startTime: start,\n          endTime: end,\n          totalTime,\n          overtime\n        };\n      } else {\n        updatedData = {\n          [date]: {\n            startTime: start,\n            endTime: end,\n            totalTime,\n            overtime\n          }\n        };\n      }\n      await setDoc(timesheetDocRef, {\n        hours: updatedData\n      });\n      fetchTimesheetData();\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n      setTimesheetData(updatedTimesheetData);\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setOvertime(0); // Reset overtime\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Time Adjustments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Normal Start Time: \", timeAdjustments.normalStartTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Normal End Time: \", timeAdjustments.normalEndTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Overtime Start Time: \", timeAdjustments.overtimeStartTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Overtime End Time: \", timeAdjustments.overtimeEndTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this), weekDates.map(date => {\n            var _timesheetData$employ;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleSetTime(employee.id, date),\n                children: \"Set Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: ((_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : _timesheetData$employ[date]) && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: `From ${timesheetData[employee.id][date].startTime} - ${timesheetData[employee.id][date].endTime}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 198,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: `${timesheetData[employee.id][date].totalTime} hours`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 25\n                  }, this), timesheetData[employee.id][date].overtime > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: `Overtime: ${timesheetData[employee.id][date].overtime} hours`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 202,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 19\n              }, this)]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this);\n          })]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Set Time for \", selectedEmployee, \" on \", selectedDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Start Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: startTime,\n          onChange: e => setStartTime(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"End Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: endTime,\n          onChange: e => setEndTime(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            calculateTotalTime(startTime, endTime);\n            handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime, overtime);\n            handleCloseModal();\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCloseModal,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Time: \", totalTime, \" hours\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Overtime: \", overtime, \" hours\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"PeXx+qE6oOkl1qbLa3673HV1rVc=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["useState","useEffect","collection","getDocs","getDoc","doc","setDoc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","timeAdjustments","setTimeAdjustments","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","totalTime","setTotalTime","overtime","setOvertime","fetchData","employeeSnapshot","employeeData","docs","map","id","data","settingsDocRef","settingsDoc","exists","console","log","error","length","initialTimesheetData","reduce","acc","employee","weekAcc","date","fetchTimesheetData","calculateTotalTime","start","end","startParts","split","Number","endParts","startDate","Date","setHours","endDate","setDate","getDate","diff","toFixed","normalStart","normalStartTime","normalEnd","normalEndTime","overtimeStart","overtimeStartTime","overtimeEnd","overtimeEndTime","normalStartDate","normalEndDate","overtimeStartDate","overtimeEndDate","overtimeHours","handleInputChange","employeeId","prevData","newData","saveTimesheetDataToFirebase","timesheetDocRef","updatedData","hours","querySnapshot","updatedTimesheetData","forEach","handleSetTime","handleCloseModal","children","fileName","_jsxFileName","lineNumber","columnNumber","border","name","_timesheetData$employ","onClick","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\"; \nimport { db } from \"./firebaseConfig\";\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [totalTime, setTotalTime] = useState(0);\n  const [overtime, setOvertime] = useState(0); // State for overtime hours\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\");\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data());\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = { startTime: \"\", endTime: \"\", totalTime: 0, overtime: 0 };\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData();\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate total time and overtime based on different time ranges\n  const calculateTotalTime = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // If the end time is earlier than the start time (crosses midnight)\n    }\n\n    const diff = (endDate - startDate) / (1000 * 60 * 60);\n    setTotalTime(diff.toFixed(2)); // Set the total time in hours\n\n    // Calculate overtime based on the given normal and overtime times\n    const normalStart = timeAdjustments.normalStartTime.split(\":\").map(Number);\n    const normalEnd = timeAdjustments.normalEndTime.split(\":\").map(Number);\n    const overtimeStart = timeAdjustments.overtimeStartTime.split(\":\").map(Number);\n    const overtimeEnd = timeAdjustments.overtimeEndTime.split(\":\").map(Number);\n\n    const normalStartDate = new Date();\n    normalStartDate.setHours(normalStart[0], normalStart[1], 0);\n\n    const normalEndDate = new Date();\n    normalEndDate.setHours(normalEnd[0], normalEnd[1], 0);\n\n    const overtimeStartDate = new Date();\n    overtimeStartDate.setHours(overtimeStart[0], overtimeStart[1], 0);\n\n    const overtimeEndDate = new Date();\n    overtimeEndDate.setHours(overtimeEnd[0], overtimeEnd[1], 0);\n\n    let overtimeHours = 0;\n\n    // If the work period exceeds normal working hours, calculate overtime\n    if (endDate > normalEndDate && endDate <= overtimeEndDate) {\n      overtimeHours = (endDate - normalEndDate) / (1000 * 60 * 60);\n      overtimeHours = overtimeHours.toFixed(2); // Overtime in hours\n    } else if (endDate > overtimeEndDate || (startDate >= overtimeStartDate && endDate <= overtimeEndDate)) {\n      // If the work period is fully within the overtime window or extends beyond it\n      overtimeHours = (endDate - overtimeStartDate) / (1000 * 60 * 60);\n      overtimeHours = overtimeHours.toFixed(2);\n    }\n\n    setOvertime(overtimeHours); // Set overtime\n  };\n\n  const handleInputChange = async (employeeId, date, start, end, totalTime, overtime) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = { startTime: start, endTime: end, totalTime, overtime };\n      return newData;\n    });\n\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, overtime);\n  };\n\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, overtime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n\n      let updatedData = {};\n\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = { startTime: start, endTime: end, totalTime, overtime };\n      } else {\n        updatedData = { [date]: { startTime: start, endTime: end, totalTime, overtime } };\n      }\n\n      await setDoc(timesheetDocRef, { hours: updatedData });\n      fetchTimesheetData();\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n\n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n\n      setTimesheetData(updatedTimesheetData);\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setOvertime(0); // Reset overtime\n  };\n\n  return (\n    <div>\n      <div>\n        <h3>Time Adjustments</h3>\n        <p>Normal Start Time: {timeAdjustments.normalStartTime}</p>\n        <p>Normal End Time: {timeAdjustments.normalEndTime}</p>\n        <p>Overtime Start Time: {timeAdjustments.overtimeStartTime}</p>\n        <p>Overtime End Time: {timeAdjustments.overtimeEndTime}</p>\n      </div>\n\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td>\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <button onClick={() => handleSetTime(employee.id, date)}>Set Time</button>\n                  <div>\n                    {timesheetData[employee.id]?.[date] && (\n                      <div>\n                        <span>{`From ${timesheetData[employee.id][date].startTime} - ${timesheetData[employee.id][date].endTime}`}</span>\n                        <br />\n                        <strong>{`${timesheetData[employee.id][date].totalTime} hours`}</strong>\n                        {timesheetData[employee.id][date].overtime > 0 && (\n                          <div>\n                            <strong>{`Overtime: ${timesheetData[employee.id][date].overtime} hours`}</strong>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {modalOpen && (\n        <div>\n          <div>\n            <h3>Set Time for {selectedEmployee} on {selectedDate}</h3>\n            <label>Start Time:</label>\n            <input\n              type=\"time\"\n              value={startTime}\n              onChange={(e) => setStartTime(e.target.value)}\n            />\n            <br />\n            <label>End Time:</label>\n            <input\n              type=\"time\"\n              value={endTime}\n              onChange={(e) => setEndTime(e.target.value)}\n            />\n            <br />\n            <button\n              onClick={() => {\n                calculateTotalTime(startTime, endTime);\n                handleInputChange(\n                  selectedEmployee,\n                  selectedDate,\n                  startTime,\n                  endTime,\n                  totalTime,\n                  overtime\n                );\n                handleCloseModal();\n              }}\n            >\n              Save\n            </button>\n            <button onClick={handleCloseModal}>Close</button>\n            \n            {/* Display the calculated total and overtime time */}\n            <div>\n              <p>Total Time: {totalTime} hours</p>\n              <p>Overtime: {overtime} hours</p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,EAAEC,OAAO,EAAEC,MAAM,EAAEC,GAAG,EAAEC,MAAM,QAAQ,oBAAoB;AAC7E,SAASC,EAAE,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACe,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACiB,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACqB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACyB,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC2B,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC6B,SAAS,EAAEC,YAAY,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAAC+B,QAAQ,EAAEC,WAAW,CAAC,GAAGhC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE7CC,SAAS,CAAC,MAAM;IACd,MAAMgC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,gBAAgB,GAAG,MAAM/B,OAAO,CAACD,UAAU,CAACK,EAAE,EAAE,WAAW,CAAC,CAAC;QACnE,MAAM4B,YAAY,GAAGD,gBAAgB,CAACE,IAAI,CAACC,GAAG,CAAChC,GAAG,KAAK;UACrDiC,EAAE,EAAEjC,GAAG,CAACiC,EAAE;UACV,GAAGjC,GAAG,CAACkC,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QACHzB,YAAY,CAACqB,YAAY,CAAC;QAE1B,MAAMK,cAAc,GAAGnC,GAAG,CAACE,EAAE,EAAE,iBAAiB,EAAE,UAAU,CAAC;QAC7D,MAAMkC,WAAW,GAAG,MAAMrC,MAAM,CAACoC,cAAc,CAAC;QAChD,IAAIC,WAAW,CAACC,MAAM,CAAC,CAAC,EAAE;UACxBxB,kBAAkB,CAACuB,WAAW,CAACF,IAAI,CAAC,CAAC,CAAC;QACxC,CAAC,MAAM;UACLI,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;QAC1C;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDZ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAENhC,SAAS,CAAC,MAAM;IACd,IAAIY,SAAS,CAACiC,MAAM,GAAG,CAAC,IAAInC,SAAS,CAACmC,MAAM,GAAG,CAAC,EAAE;MAChD,MAAMC,oBAAoB,GAAGlC,SAAS,CAACmC,MAAM,CAAC,CAACC,GAAG,EAAEC,QAAQ,KAAK;QAC/DD,GAAG,CAACC,QAAQ,CAACZ,EAAE,CAAC,GAAG3B,SAAS,CAACqC,MAAM,CAAC,CAACG,OAAO,EAAEC,IAAI,KAAK;UACrDD,OAAO,CAACC,IAAI,CAAC,GAAG;YAAE3B,SAAS,EAAE,EAAE;YAAEE,OAAO,EAAE,EAAE;YAAEE,SAAS,EAAE,CAAC;YAAEE,QAAQ,EAAE;UAAE,CAAC;UACzE,OAAOoB,OAAO;QAChB,CAAC,EAAE,CAAC,CAAC,CAAC;QACN,OAAOF,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;MACNjC,gBAAgB,CAAC+B,oBAAoB,CAAC;MACtCM,kBAAkB,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACxC,SAAS,EAAEF,SAAS,CAAC,CAAC;;EAE1B;EACA,MAAM2C,kBAAkB,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAK;IACzC,MAAMC,UAAU,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAACrB,GAAG,CAACsB,MAAM,CAAC;IAC/C,MAAMC,QAAQ,GAAGJ,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC,CAACrB,GAAG,CAACsB,MAAM,CAAC;IAE3C,MAAME,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAC5BD,SAAS,CAACE,QAAQ,CAACN,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAEnD,MAAMO,OAAO,GAAG,IAAIF,IAAI,CAAC,CAAC;IAC1BE,OAAO,CAACD,QAAQ,CAACH,QAAQ,CAAC,CAAC,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAE7C,IAAII,OAAO,GAAGH,SAAS,EAAE;MACvBG,OAAO,CAACC,OAAO,CAACD,OAAO,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1C;IAEA,MAAMC,IAAI,GAAG,CAACH,OAAO,GAAGH,SAAS,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;IACrD/B,YAAY,CAACqC,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE/B;IACA,MAAMC,WAAW,GAAGpD,eAAe,CAACqD,eAAe,CAACZ,KAAK,CAAC,GAAG,CAAC,CAACrB,GAAG,CAACsB,MAAM,CAAC;IAC1E,MAAMY,SAAS,GAAGtD,eAAe,CAACuD,aAAa,CAACd,KAAK,CAAC,GAAG,CAAC,CAACrB,GAAG,CAACsB,MAAM,CAAC;IACtE,MAAMc,aAAa,GAAGxD,eAAe,CAACyD,iBAAiB,CAAChB,KAAK,CAAC,GAAG,CAAC,CAACrB,GAAG,CAACsB,MAAM,CAAC;IAC9E,MAAMgB,WAAW,GAAG1D,eAAe,CAAC2D,eAAe,CAAClB,KAAK,CAAC,GAAG,CAAC,CAACrB,GAAG,CAACsB,MAAM,CAAC;IAE1E,MAAMkB,eAAe,GAAG,IAAIf,IAAI,CAAC,CAAC;IAClCe,eAAe,CAACd,QAAQ,CAACM,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAE3D,MAAMS,aAAa,GAAG,IAAIhB,IAAI,CAAC,CAAC;IAChCgB,aAAa,CAACf,QAAQ,CAACQ,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAErD,MAAMQ,iBAAiB,GAAG,IAAIjB,IAAI,CAAC,CAAC;IACpCiB,iBAAiB,CAAChB,QAAQ,CAACU,aAAa,CAAC,CAAC,CAAC,EAAEA,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAEjE,MAAMO,eAAe,GAAG,IAAIlB,IAAI,CAAC,CAAC;IAClCkB,eAAe,CAACjB,QAAQ,CAACY,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAE3D,IAAIM,aAAa,GAAG,CAAC;;IAErB;IACA,IAAIjB,OAAO,GAAGc,aAAa,IAAId,OAAO,IAAIgB,eAAe,EAAE;MACzDC,aAAa,GAAG,CAACjB,OAAO,GAAGc,aAAa,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;MAC5DG,aAAa,GAAGA,aAAa,CAACb,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC,MAAM,IAAIJ,OAAO,GAAGgB,eAAe,IAAKnB,SAAS,IAAIkB,iBAAiB,IAAIf,OAAO,IAAIgB,eAAgB,EAAE;MACtG;MACAC,aAAa,GAAG,CAACjB,OAAO,GAAGe,iBAAiB,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;MAChEE,aAAa,GAAGA,aAAa,CAACb,OAAO,CAAC,CAAC,CAAC;IAC1C;IAEApC,WAAW,CAACiD,aAAa,CAAC,CAAC,CAAC;EAC9B,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAAA,CAAOC,UAAU,EAAE/B,IAAI,EAAEG,KAAK,EAAEC,GAAG,EAAE3B,SAAS,EAAEE,QAAQ,KAAK;IACrFf,gBAAgB,CAAEoE,QAAQ,IAAK;MAC7B,MAAMC,OAAO,GAAG;QAAE,GAAGD;MAAS,CAAC;MAC/BC,OAAO,CAACF,UAAU,CAAC,CAAC/B,IAAI,CAAC,GAAG;QAAE3B,SAAS,EAAE8B,KAAK;QAAE5B,OAAO,EAAE6B,GAAG;QAAE3B,SAAS;QAAEE;MAAS,CAAC;MACnF,OAAOsD,OAAO;IAChB,CAAC,CAAC;IAEF,MAAMC,2BAA2B,CAACH,UAAU,EAAE/B,IAAI,EAAEG,KAAK,EAAEC,GAAG,EAAE3B,SAAS,EAAEE,QAAQ,CAAC;EACtF,CAAC;EAED,MAAMuD,2BAA2B,GAAG,MAAAA,CAAOH,UAAU,EAAE/B,IAAI,EAAEG,KAAK,EAAEC,GAAG,EAAE3B,SAAS,EAAEE,QAAQ,KAAK;IAC/F,IAAI;MACF,MAAMwD,eAAe,GAAGlF,GAAG,CAACE,EAAE,EAAE,YAAY,EAAE4E,UAAU,CAAC;MACzD,MAAMpE,aAAa,GAAG,MAAMX,MAAM,CAACmF,eAAe,CAAC;MAEnD,IAAIC,WAAW,GAAG,CAAC,CAAC;MAEpB,IAAIzE,aAAa,CAAC2B,MAAM,CAAC,CAAC,EAAE;QAC1B8C,WAAW,GAAGzE,aAAa,CAACwB,IAAI,CAAC,CAAC,CAACkD,KAAK;QACxCD,WAAW,CAACpC,IAAI,CAAC,GAAG;UAAE3B,SAAS,EAAE8B,KAAK;UAAE5B,OAAO,EAAE6B,GAAG;UAAE3B,SAAS;UAAEE;QAAS,CAAC;MAC7E,CAAC,MAAM;QACLyD,WAAW,GAAG;UAAE,CAACpC,IAAI,GAAG;YAAE3B,SAAS,EAAE8B,KAAK;YAAE5B,OAAO,EAAE6B,GAAG;YAAE3B,SAAS;YAAEE;UAAS;QAAE,CAAC;MACnF;MAEA,MAAMzB,MAAM,CAACiF,eAAe,EAAE;QAAEE,KAAK,EAAED;MAAY,CAAC,CAAC;MACrDnC,kBAAkB,CAAC,CAAC;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAED,MAAMQ,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMqC,aAAa,GAAG,MAAMvF,OAAO,CAACD,UAAU,CAACK,EAAE,EAAE,YAAY,CAAC,CAAC;MACjE,MAAMoF,oBAAoB,GAAG,CAAC,CAAC;MAE/BD,aAAa,CAACE,OAAO,CAAEvF,GAAG,IAAK;QAC7B,MAAMkC,IAAI,GAAGlC,GAAG,CAACkC,IAAI,CAAC,CAAC;QACvBoD,oBAAoB,CAACtF,GAAG,CAACiC,EAAE,CAAC,GAAGC,IAAI,CAACkD,KAAK;MAC3C,CAAC,CAAC;MAEFzE,gBAAgB,CAAC2E,oBAAoB,CAAC;IACxC,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC;EAED,MAAMgD,aAAa,GAAGA,CAACV,UAAU,EAAE/B,IAAI,KAAK;IAC1C9B,mBAAmB,CAAC6D,UAAU,CAAC;IAC/B3D,eAAe,CAAC4B,IAAI,CAAC;IACrBhC,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAM0E,gBAAgB,GAAGA,CAAA,KAAM;IAC7B1E,YAAY,CAAC,KAAK,CAAC;IACnBM,YAAY,CAAC,EAAE,CAAC;IAChBE,UAAU,CAAC,EAAE,CAAC;IACdE,YAAY,CAAC,CAAC,CAAC;IACfE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC;EAED,oBACEvB,OAAA;IAAAsF,QAAA,gBACEtF,OAAA;MAAAsF,QAAA,gBACEtF,OAAA;QAAAsF,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzB1F,OAAA;QAAAsF,QAAA,GAAG,qBAAmB,EAAC9E,eAAe,CAACqD,eAAe;MAAA;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3D1F,OAAA;QAAAsF,QAAA,GAAG,mBAAiB,EAAC9E,eAAe,CAACuD,aAAa;MAAA;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvD1F,OAAA;QAAAsF,QAAA,GAAG,uBAAqB,EAAC9E,eAAe,CAACyD,iBAAiB;MAAA;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/D1F,OAAA;QAAAsF,QAAA,GAAG,qBAAmB,EAAC9E,eAAe,CAAC2D,eAAe;MAAA;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CAAC,eAEN1F,OAAA;MAAO2F,MAAM,EAAC,GAAG;MAAAL,QAAA,gBACftF,OAAA;QAAAsF,QAAA,eACEtF,OAAA;UAAAsF,QAAA,gBACEtF,OAAA;YAAAsF,QAAA,EAAI;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EAChBxF,SAAS,CAAC0B,GAAG,CAAEe,IAAI,iBAClB3C,OAAA;YAAAsF,QAAA,EAAgB3C;UAAI,GAAXA,IAAI;YAAA4C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAC1B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACR1F,OAAA;QAAAsF,QAAA,EACGlF,SAAS,CAACwB,GAAG,CAAEa,QAAQ,iBACtBzC,OAAA;UAAAsF,QAAA,gBACEtF,OAAA;YAAAsF,QAAA,EAAK7C,QAAQ,CAACmD;UAAI;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EACvBxF,SAAS,CAAC0B,GAAG,CAAEe,IAAI;YAAA,IAAAkD,qBAAA;YAAA,oBAClB7F,OAAA;cAAAsF,QAAA,gBACEtF,OAAA;gBAAQ8F,OAAO,EAAEA,CAAA,KAAMV,aAAa,CAAC3C,QAAQ,CAACZ,EAAE,EAAEc,IAAI,CAAE;gBAAA2C,QAAA,EAAC;cAAQ;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAC1E1F,OAAA;gBAAAsF,QAAA,EACG,EAAAO,qBAAA,GAAAvF,aAAa,CAACmC,QAAQ,CAACZ,EAAE,CAAC,cAAAgE,qBAAA,uBAA1BA,qBAAA,CAA6BlD,IAAI,CAAC,kBACjC3C,OAAA;kBAAAsF,QAAA,gBACEtF,OAAA;oBAAAsF,QAAA,EAAO,QAAQhF,aAAa,CAACmC,QAAQ,CAACZ,EAAE,CAAC,CAACc,IAAI,CAAC,CAAC3B,SAAS,MAAMV,aAAa,CAACmC,QAAQ,CAACZ,EAAE,CAAC,CAACc,IAAI,CAAC,CAACzB,OAAO;kBAAE;oBAAAqE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAO,CAAC,eACjH1F,OAAA;oBAAAuF,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,eACN1F,OAAA;oBAAAsF,QAAA,EAAS,GAAGhF,aAAa,CAACmC,QAAQ,CAACZ,EAAE,CAAC,CAACc,IAAI,CAAC,CAACvB,SAAS;kBAAQ;oBAAAmE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAS,CAAC,EACvEpF,aAAa,CAACmC,QAAQ,CAACZ,EAAE,CAAC,CAACc,IAAI,CAAC,CAACrB,QAAQ,GAAG,CAAC,iBAC5CtB,OAAA;oBAAAsF,QAAA,eACEtF,OAAA;sBAAAsF,QAAA,EAAS,aAAahF,aAAa,CAACmC,QAAQ,CAACZ,EAAE,CAAC,CAACc,IAAI,CAAC,CAACrB,QAAQ;oBAAQ;sBAAAiE,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAS;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC9E,CACN;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACE;cACN;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE,CAAC;YAAA,GAfC/C,IAAI;cAAA4C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAgBT,CAAC;UAAA,CACN,CAAC;QAAA,GApBKjD,QAAQ,CAACZ,EAAE;UAAA0D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAqBhB,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAEPhF,SAAS,iBACRV,OAAA;MAAAsF,QAAA,eACEtF,OAAA;QAAAsF,QAAA,gBACEtF,OAAA;UAAAsF,QAAA,GAAI,eAAa,EAAC1E,gBAAgB,EAAC,MAAI,EAACE,YAAY;QAAA;UAAAyE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC1D1F,OAAA;UAAAsF,QAAA,EAAO;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC1B1F,OAAA;UACE+F,IAAI,EAAC,MAAM;UACXC,KAAK,EAAEhF,SAAU;UACjBiF,QAAQ,EAAGC,CAAC,IAAKjF,YAAY,CAACiF,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C,CAAC,eACF1F,OAAA;UAAAuF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN1F,OAAA;UAAAsF,QAAA,EAAO;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACxB1F,OAAA;UACE+F,IAAI,EAAC,MAAM;UACXC,KAAK,EAAE9E,OAAQ;UACf+E,QAAQ,EAAGC,CAAC,IAAK/E,UAAU,CAAC+E,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C,CAAC,eACF1F,OAAA;UAAAuF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN1F,OAAA;UACE8F,OAAO,EAAEA,CAAA,KAAM;YACbjD,kBAAkB,CAAC7B,SAAS,EAAEE,OAAO,CAAC;YACtCuD,iBAAiB,CACf7D,gBAAgB,EAChBE,YAAY,EACZE,SAAS,EACTE,OAAO,EACPE,SAAS,EACTE,QACF,CAAC;YACD+D,gBAAgB,CAAC,CAAC;UACpB,CAAE;UAAAC,QAAA,EACH;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT1F,OAAA;UAAQ8F,OAAO,EAAET,gBAAiB;UAAAC,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAGjD1F,OAAA;UAAAsF,QAAA,gBACEtF,OAAA;YAAAsF,QAAA,GAAG,cAAY,EAAClE,SAAS,EAAC,QAAM;UAAA;YAAAmE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACpC1F,OAAA;YAAAsF,QAAA,GAAG,YAAU,EAAChE,QAAQ,EAAC,QAAM;UAAA;YAAAiE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvF,EAAA,CAhQIF,aAAa;AAAAmG,EAAA,GAAbnG,aAAa;AAkQnB,eAAeA,aAAa;AAAC,IAAAmG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}