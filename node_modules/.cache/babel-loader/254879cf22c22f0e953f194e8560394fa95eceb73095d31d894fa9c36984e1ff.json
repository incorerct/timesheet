{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = () => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Search query\n  const [sortOrder, setSortOrder] = useState(\"name\"); // Sorting by name or total worked hours\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n  const [today, setToday] = useState(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1; // JS months are 0-indexed\n    const day = now.getDate();\n    return `${month}-${day < 10 ? '0' + day : day}`; // Format MM-DD\n  });\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), snapshot => {\n        const employeeData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, snapshot => {\n        const updatedTimesheetData = {};\n        snapshot.forEach(doc => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    var _timesheetData$employ, _timesheetData$employ2, _timesheetData$employ3, _timesheetData$employ4, _timesheetData$employ5, _timesheetData$employ6;\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(((_timesheetData$employ = timesheetData[employeeId]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.startTime) || \"\");\n    setEndTime(((_timesheetData$employ3 = timesheetData[employeeId]) === null || _timesheetData$employ3 === void 0 ? void 0 : (_timesheetData$employ4 = _timesheetData$employ3[date]) === null || _timesheetData$employ4 === void 0 ? void 0 : _timesheetData$employ4.endTime) || \"\");\n    setIsHoliday(((_timesheetData$employ5 = timesheetData[employeeId]) === null || _timesheetData$employ5 === void 0 ? void 0 : (_timesheetData$employ6 = _timesheetData$employ5[date]) === null || _timesheetData$employ6 === void 0 ? void 0 : _timesheetData$employ6.isHoliday) || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = event => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = event => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n    if (newIsHoliday) {\n      // If it's a holiday, reset normal time, night shift time, and total time\n      setNormalTime(0);\n      setNightShiftHours(0);\n      setTotalTime(totalTime);\n      setHolidayTime(totalTime); // The holiday time becomes the total time worked\n    } else {\n      // If it's not a holiday, recalculate times\n      calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n    }\n  };\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    const nightShiftStartHour = 22; // 10:00 PM\n    const nightShiftEndHour = 6; // 6:00 AM (next day)\n\n    let nightShiftHours = 0;\n    let startTime = startDate.getHours() + startDate.getMinutes() / 60;\n    let endTime = endDate.getHours() + endDate.getMinutes() / 60;\n    if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) && (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n      nightShiftHours = (endDate - startDate) / (1000 * 60 * 60); // Entire shift is within night shift\n    } else if (startTime < nightShiftStartHour && (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n      let nightShiftStartTime = new Date(startDate);\n      nightShiftStartTime.setHours(nightShiftStartHour, 0, 0); // Set to 10:00 PM\n      nightShiftHours = (endDate - nightShiftStartTime) / (1000 * 60 * 60); // Hours from 10 PM onwards\n    } else if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) && endTime >= nightShiftEndHour) {\n      let nightShiftEndTime = new Date(startDate);\n      nightShiftEndTime.setHours(nightShiftEndHour, 0, 0); // Set to 6:00 AM\n      nightShiftHours = (nightShiftEndTime - startDate) / (1000 * 60 * 60); // Hours until 6 AM\n    } else {\n      nightShiftHours = 0; // No night shift overlap\n    }\n    setTotalTime(totalTimeInHours.toFixed(1));\n    setNightShiftHours(nightShiftHours.toFixed(1));\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(1));\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(1));\n  };\n\n  // Save timesheet data to Firestore\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      var _await$getDoc$data;\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = ((_await$getDoc$data = (await getDoc(timesheetDocRef)).data()) === null || _await$getDoc$data === void 0 ? void 0 : _await$getDoc$data.hours) || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime,\n        nightShift: nightShiftHours,\n        holidayTime,\n        isHoliday,\n        normalTime\n      };\n      await setDoc(timesheetDocRef, {\n        hours: timesheetData\n      }, {\n        merge: true\n      });\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Filter employees based on search query\n  const filteredEmployees = employees.filter(employee => employee.name.toLowerCase().includes(searchQuery.toLowerCase()));\n\n  // Sort employees by name or total worked hours\n  const sortEmployees = employees => {\n    if (sortOrder === \"name\") {\n      return [...employees].sort((a, b) => a.name.localeCompare(b.name));\n    } else if (sortOrder === \"totalTime\") {\n      return [...employees].sort((a, b) => {\n        const aTotalTime = Object.values(timesheetData[a.id] || {}).reduce((sum, record) => sum + record.totalTime, 0);\n        const bTotalTime = Object.values(timesheetData[b.id] || {}).reduce((sum, record) => sum + record.totalTime, 0);\n        return bTotalTime - aTotalTime;\n      });\n    }\n    return employees;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timesheet-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"search-bar\",\n      placeholder: \"Search employee by name\",\n      value: searchQuery,\n      onChange: e => setSearchQuery(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSortOrder(e.target.value),\n      value: sortOrder,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"name\",\n        children: \"Sort by Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"totalTime\",\n        children: \"Sort by Total Hours Worked\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"employee-list\",\n      children: sortEmployees(filteredEmployees).map(employee => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employee-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [Object.values(timesheetData[employee.id] || {}).reduce((sum, record) => sum + record.totalTime, 0).toFixed(1), \" \", \"hours\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSetTime(employee.id, today),\n            children: \"Add Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this)\n      }, employee.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"W4Ro8ClMyKSAfQc9cOQqkb9jtvA=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","onSnapshot","doc","setDoc","getDoc","db","jsxDEV","_jsxDEV","TimesheetList","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","nextDay","setNextDay","isHoliday","setIsHoliday","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","holidayTime","setHolidayTime","normalTime","setNormalTime","currentMonth","setCurrentMonth","Date","getMonth","currentYear","setCurrentYear","getFullYear","searchQuery","setSearchQuery","sortOrder","setSortOrder","generateMonthDays","year","month","daysInMonth","getDate","days","day","push","today","setToday","now","fetchEmployees","unsubscribe","snapshot","employeeData","docs","map","id","data","fetchTimesheetData","timesheetDataRef","updatedTimesheetData","forEach","employeeId","hours","date","record","Object","entries","parseFloat","nightShift","Boolean","handleSetTime","_timesheetData$employ","_timesheetData$employ2","_timesheetData$employ3","_timesheetData$employ4","_timesheetData$employ5","_timesheetData$employ6","handleStartTimeChange","event","newStartTime","target","value","calculateTimes","handleEndTimeChange","newEndTime","handleNextDayToggle","newNextDay","handleHolidayToggle","newIsHoliday","start","end","isNextDay","startHours","startMinutes","split","Number","endHours","endMinutes","startDate","setHours","endDate","setDate","totalTimeInHours","nightShiftStartHour","nightShiftEndHour","getHours","getMinutes","nightShiftStartTime","nightShiftEndTime","toFixed","saveTimesheetDataToFirebase","_await$getDoc$data","timesheetDocRef","merge","error","console","filteredEmployees","filter","employee","name","toLowerCase","includes","sortEmployees","sort","a","b","localeCompare","aTotalTime","values","reduce","sum","bTotalTime","className","children","type","placeholder","onChange","e","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\n\nconst TimesheetList = () => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Search query\n  const [sortOrder, setSortOrder] = useState(\"name\"); // Sorting by name or total worked hours\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n\n  const [today, setToday] = useState(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1; // JS months are 0-indexed\n    const day = now.getDate();\n    return `${month}-${day < 10 ? '0' + day : day}`; // Format MM-DD\n  });\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), (snapshot) => {\n        const employeeData = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, (snapshot) => {\n        const updatedTimesheetData = {};\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0,\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(timesheetData[employeeId]?.[date]?.startTime || \"\");\n    setEndTime(timesheetData[employeeId]?.[date]?.endTime || \"\");\n    setIsHoliday(timesheetData[employeeId]?.[date]?.isHoliday || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = (event) => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = (event) => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n\n    if (newIsHoliday) {\n      // If it's a holiday, reset normal time, night shift time, and total time\n      setNormalTime(0);\n      setNightShiftHours(0);\n      setTotalTime(totalTime);\n      setHolidayTime(totalTime); // The holiday time becomes the total time worked\n    } else {\n      // If it's not a holiday, recalculate times\n      calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n    }\n  };\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n\n    const nightShiftStartHour = 22;  // 10:00 PM\n    const nightShiftEndHour = 6;  // 6:00 AM (next day)\n\n    let nightShiftHours = 0;\n    let startTime = startDate.getHours() + startDate.getMinutes() / 60;\n    let endTime = endDate.getHours() + endDate.getMinutes() / 60;\n\n    if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) &&\n        (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n      nightShiftHours = (endDate - startDate) / (1000 * 60 * 60);  // Entire shift is within night shift\n    }\n    else if (startTime < nightShiftStartHour && (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n      let nightShiftStartTime = new Date(startDate);\n      nightShiftStartTime.setHours(nightShiftStartHour, 0, 0);  // Set to 10:00 PM\n      nightShiftHours = (endDate - nightShiftStartTime) / (1000 * 60 * 60);  // Hours from 10 PM onwards\n    }\n    else if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) && endTime >= nightShiftEndHour) {\n      let nightShiftEndTime = new Date(startDate);\n      nightShiftEndTime.setHours(nightShiftEndHour, 0, 0);  // Set to 6:00 AM\n      nightShiftHours = (nightShiftEndTime - startDate) / (1000 * 60 * 60);  // Hours until 6 AM\n    }\n    else {\n      nightShiftHours = 0;  // No night shift overlap\n    }\n\n    setTotalTime(totalTimeInHours.toFixed(1));\n    setNightShiftHours(nightShiftHours.toFixed(1));\n\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(1));\n\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(1));\n  };\n\n  // Save timesheet data to Firestore\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = (await getDoc(timesheetDocRef)).data()?.hours || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime,\n        nightShift: nightShiftHours,\n        holidayTime,\n        isHoliday,\n        normalTime,\n      };\n\n      await setDoc(timesheetDocRef, { hours: timesheetData }, { merge: true });\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Filter employees based on search query\n  const filteredEmployees = employees.filter((employee) =>\n    employee.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  // Sort employees by name or total worked hours\n  const sortEmployees = (employees) => {\n    if (sortOrder === \"name\") {\n      return [...employees].sort((a, b) => a.name.localeCompare(b.name));\n    } else if (sortOrder === \"totalTime\") {\n      return [...employees].sort((a, b) => {\n        const aTotalTime = Object.values(timesheetData[a.id] || {}).reduce(\n          (sum, record) => sum + record.totalTime,\n          0\n        );\n        const bTotalTime = Object.values(timesheetData[b.id] || {}).reduce(\n          (sum, record) => sum + record.totalTime,\n          0\n        );\n        return bTotalTime - aTotalTime;\n      });\n    }\n    return employees;\n  };\n\n  return (\n    <div className=\"timesheet-list-container\">\n      <input\n        type=\"text\"\n        className=\"search-bar\"\n        placeholder=\"Search employee by name\"\n        value={searchQuery}\n        onChange={(e) => setSearchQuery(e.target.value)}\n      />\n      <select onChange={(e) => setSortOrder(e.target.value)} value={sortOrder}>\n        <option value=\"name\">Sort by Name</option>\n        <option value=\"totalTime\">Sort by Total Hours Worked</option>\n      </select>\n\n      <ul className=\"employee-list\">\n        {sortEmployees(filteredEmployees).map((employee) => (\n          <li key={employee.id}>\n            <div className=\"employee-info\">\n              <span>{employee.name}</span>\n              <span>\n                {Object.values(timesheetData[employee.id] || {}).reduce(\n                  (sum, record) => sum + record.totalTime,\n                  0\n                ).toFixed(1)}{\" \"}\n                hours\n              </span>\n              <button\n                onClick={() => handleSetTime(employee.id, today)}\n              >\n                Add Time\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}