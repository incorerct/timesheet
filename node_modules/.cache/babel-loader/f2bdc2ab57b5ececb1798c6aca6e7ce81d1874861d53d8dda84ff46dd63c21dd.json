{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n\n  // New state for monthly totals\n  const [monthlyTotals, setMonthlyTotals] = useState({});\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), snapshot => {\n        const employeeData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe; // Cleanup on unmount\n    };\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, snapshot => {\n        const updatedTimesheetData = {};\n        snapshot.forEach(doc => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n\n        // Calculate monthly totals\n        calculateMonthlyTotals(updatedTimesheetData);\n      });\n      return unsubscribe; // Cleanup on unmount\n    };\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n  const calculateMonthlyTotals = updatedTimesheetData => {\n    const newMonthlyTotals = {};\n\n    // Loop through each employee and their timesheet data\n    for (const employeeId in updatedTimesheetData) {\n      let totalTime = 0;\n      let nightShift = 0;\n      let holidayTime = 0;\n      let normalTime = 0;\n\n      // Loop through each date for the employee\n      for (const date in updatedTimesheetData[employeeId]) {\n        const data = updatedTimesheetData[employeeId][date];\n        totalTime += data.totalTime || 0;\n        nightShift += data.nightShift || 0;\n        holidayTime += data.holidayTime || 0;\n        normalTime += data.normalTime || 0;\n      }\n      newMonthlyTotals[employeeId] = {\n        totalTime,\n        nightShift,\n        holidayTime,\n        normalTime\n      };\n    }\n    setMonthlyTotals(newMonthlyTotals);\n  };\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n  const handleStartTimeChange = event => {\n    setStartTime(event.target.value);\n    calculateTimes(event.target.value, endTime, nextDay, isHoliday);\n  };\n  const handleEndTimeChange = event => {\n    setEndTime(event.target.value);\n    calculateTimes(startTime, event.target.value, nextDay, isHoliday);\n  };\n  const handleNextDayToggle = () => {\n    setNextDay(prev => !prev);\n    calculateTimes(startTime, endTime, !nextDay, isHoliday);\n  };\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n    if (newIsHoliday) {\n      // When holiday is checked\n      setHolidayTime(totalTime);\n      setNormalTime(0); // Reset normal time for holiday\n      setNightShiftHours(0); // Reset night shift for holiday\n      setTotalTime(0); // Reset total time\n    } else {\n      // Recalculate time when holiday is unchecked\n      calculateTimes(startTime, endTime, nextDay, false); // Normal calculation\n    }\n  };\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    const nightShiftStart = new Date(startDate);\n    nightShiftStart.setHours(22, 0, 0);\n    const nightShiftEnd = new Date(startDate);\n    nightShiftEnd.setDate(nightShiftEnd.getDate() + 1);\n    nightShiftEnd.setHours(6, 0, 0);\n    let nightShiftHours = 0;\n    if (startDate < nightShiftEnd && endDate >= nightShiftStart) {\n      const nightShiftStartTime = startDate < nightShiftStart ? nightShiftStart : startDate;\n      const nightShiftEndTime = endDate > nightShiftEnd ? nightShiftEnd : endDate;\n      nightShiftHours = (nightShiftEndTime - nightShiftStartTime) / (1000 * 60 * 60);\n    }\n    setTotalTime(totalTimeInHours.toFixed(2));\n    setNightShiftHours(nightShiftHours.toFixed(2));\n\n    // Calculate Normal Time: if it's a holiday, normal time is 0\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(2));\n\n    // If it's a holiday, set the holiday time to total time\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(2));\n  };\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, nightShift, holidayTime) => {\n    try {\n      var _await$getDoc$data;\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = ((_await$getDoc$data = (await getDoc(timesheetDocRef)).data()) === null || _await$getDoc$data === void 0 ? void 0 : _await$getDoc$data.hours) || {};\n      timesheetData[date] = {\n        startTime: start,\n        endTime: end,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShift),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday\n      };\n      await setDoc(timesheetDocRef, {\n        hours: timesheetData\n      });\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n  const handleInputChange = async (employeeId, date, start, end, totalTime, nightShift, holidayTime) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = {\n        startTime: start,\n        endTime: end,\n        totalTime,\n        nightShift,\n        holidayTime,\n        isHoliday,\n        normalTime\n      };\n      return newData;\n    });\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, nightShift, holidayTime);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Monthly Totals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), weekDates.map(date => {\n            var _timesheetData$employ;\n            const record = (_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : _timesheetData$employ[date];\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: record ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [record.totalTime, \" hrs\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Night: \", record.nightShift, \" hrs\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 246,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Holiday: \", record.holidayTime, \" hrs\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleSetTime(employee.id, date),\n                children: \"Set Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 23\n              }, this)\n            }, date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 19\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: monthlyTotals[employee.id] && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Total: \", monthlyTotals[employee.id].totalTime, \" hrs\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Night: \", monthlyTotals[employee.id].nightShift, \" hrs\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Holiday: \", monthlyTotals[employee.id].holidayTime, \" hrs\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Normal: \", monthlyTotals[employee.id].normalTime, \" hrs\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this)]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"V9Mw28oO4NAI+JLegvltI+qGBFY=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["useState","useEffect","collection","onSnapshot","doc","setDoc","getDoc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","nextDay","setNextDay","isHoliday","setIsHoliday","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","holidayTime","setHolidayTime","normalTime","setNormalTime","monthlyTotals","setMonthlyTotals","fetchEmployees","unsubscribe","snapshot","employeeData","docs","map","id","data","fetchTimesheetData","timesheetDataRef","updatedTimesheetData","forEach","employeeId","hours","date","record","Object","entries","parseFloat","nightShift","Boolean","calculateMonthlyTotals","newMonthlyTotals","handleSetTime","handleStartTimeChange","event","target","value","calculateTimes","handleEndTimeChange","handleNextDayToggle","prev","handleHolidayToggle","newIsHoliday","handleCloseModal","start","end","isNextDay","startHours","startMinutes","split","Number","endHours","endMinutes","startDate","Date","setHours","endDate","setDate","getDate","totalTimeInHours","nightShiftStart","nightShiftEnd","nightShiftStartTime","nightShiftEndTime","toFixed","saveTimesheetDataToFirebase","_await$getDoc$data","timesheetDocRef","error","console","handleInputChange","prevData","newData","children","border","fileName","_jsxFileName","lineNumber","columnNumber","employee","name","_timesheetData$employ","onClick","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n\n  // New state for monthly totals\n  const [monthlyTotals, setMonthlyTotals] = useState({});\n\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), (snapshot) => {\n        const employeeData = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setEmployees(employeeData);\n      });\n\n      return unsubscribe; // Cleanup on unmount\n    };\n\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n\n      const unsubscribe = onSnapshot(timesheetDataRef, (snapshot) => {\n        const updatedTimesheetData = {};\n\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          const employeeId = doc.id;\n\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0,\n              };\n            }\n          }\n        });\n\n        setTimesheetData(updatedTimesheetData);\n\n        // Calculate monthly totals\n        calculateMonthlyTotals(updatedTimesheetData);\n      });\n\n      return unsubscribe; // Cleanup on unmount\n    };\n\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  const calculateMonthlyTotals = (updatedTimesheetData) => {\n    const newMonthlyTotals = {};\n\n    // Loop through each employee and their timesheet data\n    for (const employeeId in updatedTimesheetData) {\n      let totalTime = 0;\n      let nightShift = 0;\n      let holidayTime = 0;\n      let normalTime = 0;\n\n      // Loop through each date for the employee\n      for (const date in updatedTimesheetData[employeeId]) {\n        const data = updatedTimesheetData[employeeId][date];\n\n        totalTime += data.totalTime || 0;\n        nightShift += data.nightShift || 0;\n        holidayTime += data.holidayTime || 0;\n        normalTime += data.normalTime || 0;\n      }\n\n      newMonthlyTotals[employeeId] = {\n        totalTime,\n        nightShift,\n        holidayTime,\n        normalTime,\n      };\n    }\n\n    setMonthlyTotals(newMonthlyTotals);\n  };\n\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  const handleStartTimeChange = (event) => {\n    setStartTime(event.target.value);\n    calculateTimes(event.target.value, endTime, nextDay, isHoliday);\n  };\n\n  const handleEndTimeChange = (event) => {\n    setEndTime(event.target.value);\n    calculateTimes(startTime, event.target.value, nextDay, isHoliday);\n  };\n\n  const handleNextDayToggle = () => {\n    setNextDay((prev) => !prev);\n    calculateTimes(startTime, endTime, !nextDay, isHoliday);\n  };\n\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n\n    if (newIsHoliday) {\n      // When holiday is checked\n      setHolidayTime(totalTime);\n      setNormalTime(0); // Reset normal time for holiday\n      setNightShiftHours(0); // Reset night shift for holiday\n      setTotalTime(0); // Reset total time\n    } else {\n      // Recalculate time when holiday is unchecked\n      calculateTimes(startTime, endTime, nextDay, false); // Normal calculation\n    }\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n\n    const nightShiftStart = new Date(startDate);\n    nightShiftStart.setHours(22, 0, 0);\n\n    const nightShiftEnd = new Date(startDate);\n    nightShiftEnd.setDate(nightShiftEnd.getDate() + 1);\n    nightShiftEnd.setHours(6, 0, 0);\n\n    let nightShiftHours = 0;\n\n    if (startDate < nightShiftEnd && endDate >= nightShiftStart) {\n      const nightShiftStartTime = startDate < nightShiftStart ? nightShiftStart : startDate;\n      const nightShiftEndTime = endDate > nightShiftEnd ? nightShiftEnd : endDate;\n      nightShiftHours = (nightShiftEndTime - nightShiftStartTime) / (1000 * 60 * 60);\n    }\n\n    setTotalTime(totalTimeInHours.toFixed(2));\n    setNightShiftHours(nightShiftHours.toFixed(2));\n\n    // Calculate Normal Time: if it's a holiday, normal time is 0\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(2));\n\n    // If it's a holiday, set the holiday time to total time\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(2));\n  };\n\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, nightShift, holidayTime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = (await getDoc(timesheetDocRef)).data()?.hours || {};\n\n      timesheetData[date] = {\n        startTime: start,\n        endTime: end,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShift),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday,\n      };\n\n      await setDoc(timesheetDocRef, { hours: timesheetData });\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  const handleInputChange = async (employeeId, date, start, end, totalTime, nightShift, holidayTime) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = { startTime: start, endTime: end, totalTime, nightShift, holidayTime, isHoliday, normalTime };\n      return newData;\n    });\n\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, nightShift, holidayTime);\n  };\n\n  return (\n    <div>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n            <th>Monthly Totals</th>\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td>\n              {weekDates.map((date) => {\n                const record = timesheetData[employee.id]?.[date];\n                return (\n                  <td key={date}>\n                    {record ? (\n                      <div>\n                        <span>{record.totalTime} hrs</span>\n                        <br />\n                        <span>Night: {record.nightShift} hrs</span>\n                        <br />\n                        <span>Holiday: {record.holidayTime} hrs</span>\n                      </div>\n                    ) : (\n                      <button onClick={() => handleSetTime(employee.id, date)}>Set Time</button>\n                    )}\n                  </td>\n                );\n              })}\n              <td>\n                {monthlyTotals[employee.id] && (\n                  <div>\n                    <span>Total: {monthlyTotals[employee.id].totalTime} hrs</span>\n                    <br />\n                    <span>Night: {monthlyTotals[employee.id].nightShift} hrs</span>\n                    <br />\n                    <span>Holiday: {monthlyTotals[employee.id].holidayTime} hrs</span>\n                    <br />\n                    <span>Normal: {monthlyTotals[employee.id].normalTime} hrs</span>\n                  </div>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}