{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { db } from \"./firebaseConfig\"; // Import your Firebase config file\nimport { doc, setDoc, getDoc, onSnapshot } from \"firebase/firestore\";\n\n// Function to initialize and fetch the employee data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchTimesheetData = (employeeId, setTimesheetData) => {\n  const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n\n  // Real-time listener for Firestore updates\n  onSnapshot(timesheetDocRef, docSnapshot => {\n    if (docSnapshot.exists()) {\n      setTimesheetData(docSnapshot.data().hours);\n    } else {\n      setTimesheetData({}); // Initialize with empty data if no document exists\n    }\n  });\n};\n\n// Function to save timesheet data to Firebase\nconst saveTimesheetDataToFirebase = async (employeeId, date, hours, employeeName) => {\n  try {\n    const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n    const timesheetData = await getDoc(timesheetDocRef);\n    let updatedData = {};\n    if (timesheetData.exists()) {\n      // Merge new data with existing data\n      updatedData = timesheetData.data().hours;\n      updatedData[date] = hours;\n    } else {\n      // Create new document if none exists\n      updatedData = {\n        [date]: hours\n      };\n    }\n\n    // Save the updated data (including name) to Firestore\n    await setDoc(timesheetDocRef, {\n      hours: updatedData,\n      name: employeeName // Store the employee's name in the same document\n    });\n  } catch (error) {\n    console.error(\"Error saving timesheet data to Firebase:\", error);\n  }\n};\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n\n  // Fetch employee data (assuming it’s fetched from a different API or database)\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        const response = await fetch(\"/api/employees\");\n        const data = await response.json();\n        setEmployees(data);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n    fetchEmployees();\n  }, []);\n\n  // Set up real-time fetching for each employee's timesheet data\n  useEffect(() => {\n    if (employees.length > 0) {\n      employees.forEach(employee => {\n        fetchTimesheetData(employee.id, data => {\n          setTimesheetData(prevData => ({\n            ...prevData,\n            [employee.id]: data\n          }));\n        });\n      });\n    }\n  }, [employees]);\n\n  // Handle input changes for work hours\n  const handleInputChange = (employeeId, date, hours) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      if (!newData[employeeId]) {\n        newData[employeeId] = {};\n      }\n      newData[employeeId][date] = hours;\n      return newData;\n    });\n\n    // Find the employee name\n    const employee = employees.find(emp => emp.id === employeeId);\n    if (employee) {\n      // Save updated timesheet data to Firebase (including name)\n      saveTimesheetDataToFirebase(employeeId, date, hours, employee.name);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), \" \", weekDates.map(date => {\n            var _timesheetData$employ;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: ((_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : _timesheetData$employ[date]) || \"\",\n                onChange: e => handleInputChange(employee.id, date, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 19\n              }, this)\n            }, date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this);\n          })]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"q6b3jx+uK+aPbLRgtBzUVfcscnQ=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["useEffect","useState","db","doc","setDoc","getDoc","onSnapshot","jsxDEV","_jsxDEV","fetchTimesheetData","employeeId","setTimesheetData","timesheetDocRef","docSnapshot","exists","data","hours","saveTimesheetDataToFirebase","date","employeeName","timesheetData","updatedData","name","error","console","TimesheetList","weekDates","_s","employees","setEmployees","fetchEmployees","response","fetch","json","length","forEach","employee","id","prevData","handleInputChange","newData","find","emp","children","border","fileName","_jsxFileName","lineNumber","columnNumber","map","_timesheetData$employ","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { db } from \"./firebaseConfig\"; // Import your Firebase config file\nimport { doc, setDoc, getDoc, onSnapshot } from \"firebase/firestore\";\n\n// Function to initialize and fetch the employee data\nconst fetchTimesheetData = (employeeId, setTimesheetData) => {\n  const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n\n  // Real-time listener for Firestore updates\n  onSnapshot(timesheetDocRef, (docSnapshot) => {\n    if (docSnapshot.exists()) {\n      setTimesheetData(docSnapshot.data().hours);\n    } else {\n      setTimesheetData({}); // Initialize with empty data if no document exists\n    }\n  });\n};\n\n// Function to save timesheet data to Firebase\nconst saveTimesheetDataToFirebase = async (employeeId, date, hours, employeeName) => {\n  try {\n    const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n    const timesheetData = await getDoc(timesheetDocRef);\n\n    let updatedData = {};\n\n    if (timesheetData.exists()) {\n      // Merge new data with existing data\n      updatedData = timesheetData.data().hours;\n      updatedData[date] = hours;\n    } else {\n      // Create new document if none exists\n      updatedData = { [date]: hours };\n    }\n\n    // Save the updated data (including name) to Firestore\n    await setDoc(timesheetDocRef, {\n      hours: updatedData,\n      name: employeeName, // Store the employee's name in the same document\n    });\n\n  } catch (error) {\n    console.error(\"Error saving timesheet data to Firebase:\", error);\n  }\n};\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n\n  // Fetch employee data (assuming it’s fetched from a different API or database)\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        const response = await fetch(\"/api/employees\");\n        const data = await response.json();\n        setEmployees(data);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n\n    fetchEmployees();\n  }, []);\n\n  // Set up real-time fetching for each employee's timesheet data\n  useEffect(() => {\n    if (employees.length > 0) {\n      employees.forEach((employee) => {\n        fetchTimesheetData(employee.id, (data) => {\n          setTimesheetData((prevData) => ({\n            ...prevData,\n            [employee.id]: data,\n          }));\n        });\n      });\n    }\n  }, [employees]);\n\n  // Handle input changes for work hours\n  const handleInputChange = (employeeId, date, hours) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      if (!newData[employeeId]) {\n        newData[employeeId] = {};\n      }\n      newData[employeeId][date] = hours;\n      return newData;\n    });\n\n    // Find the employee name\n    const employee = employees.find(emp => emp.id === employeeId);\n    if (employee) {\n      // Save updated timesheet data to Firebase (including name)\n      saveTimesheetDataToFirebase(employeeId, date, hours, employee.name);\n    }\n  };\n\n  return (\n    <div>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td> {/* Display employee name */}\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <input\n                    type=\"number\"\n                    value={timesheetData[employee.id]?.[date] || \"\"}\n                    onChange={(e) =>\n                      handleInputChange(employee.id, date, e.target.value)\n                    }\n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}