{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = () => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), snapshot => {\n        const employeeData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, snapshot => {\n        const updatedTimesheetData = {};\n        snapshot.forEach(doc => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    var _timesheetData$employ, _timesheetData$employ2, _timesheetData$employ3, _timesheetData$employ4, _timesheetData$employ5, _timesheetData$employ6;\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(((_timesheetData$employ = timesheetData[employeeId]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.startTime) || \"\");\n    setEndTime(((_timesheetData$employ3 = timesheetData[employeeId]) === null || _timesheetData$employ3 === void 0 ? void 0 : (_timesheetData$employ4 = _timesheetData$employ3[date]) === null || _timesheetData$employ4 === void 0 ? void 0 : _timesheetData$employ4.endTime) || \"\");\n    setIsHoliday(((_timesheetData$employ5 = timesheetData[employeeId]) === null || _timesheetData$employ5 === void 0 ? void 0 : (_timesheetData$employ6 = _timesheetData$employ5[date]) === null || _timesheetData$employ6 === void 0 ? void 0 : _timesheetData$employ6.isHoliday) || false);\n    setModalOpen(true);\n  };\n\n  // Calculate monthly totals for an employee\n  const calculateMonthlyTotal = employeeId => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0,\n      totalTime: 0\n    };\n    const monthDays = generateMonthDays(currentYear, currentMonth);\n    monthDays.forEach(date => {\n      var _timesheetData$employ7;\n      const data = (_timesheetData$employ7 = timesheetData[employeeId]) === null || _timesheetData$employ7 === void 0 ? void 0 : _timesheetData$employ7[date];\n      if (data) {\n        monthlyTotal.normalTime += data.normalTime || 0;\n        monthlyTotal.nightShift += data.nightShift || 0;\n        monthlyTotal.holidayTime += data.holidayTime || 0;\n        monthlyTotal.totalTime += data.totalTime || 0;\n      }\n    });\n    return monthlyTotal;\n  };\n\n  // Change to previous month\n  const goToPreviousMonth = () => {\n    setCurrentMonth(prevMonth => prevMonth === 0 ? 11 : prevMonth - 1);\n    if (currentMonth === 0) setCurrentYear(currentYear - 1); // Handle year change\n  };\n\n  // Change to next month\n  const goToNextMonth = () => {\n    setCurrentMonth(prevMonth => prevMonth === 11 ? 0 : prevMonth + 1);\n    if (currentMonth === 11) setCurrentYear(currentYear + 1); // Handle year change\n  };\n\n  // Get the days for the selected month\n  const monthDays = generateMonthDays(currentYear, currentMonth);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goToPreviousMonth,\n      children: \"Previous Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: new Date(currentYear, currentMonth).toLocaleString('default', {\n        month: 'long',\n        year: 'numeric'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goToNextMonth,\n      children: \"Next Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Shift\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), monthDays.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: parseInt(date.split('-')[1], 10)\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Monthly Total\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map((employee, employeeIndex) => {\n          const monthlyTotal = calculateMonthlyTotal(employee.id);\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              className: employeeIndex % 2 === 0 ? 'odd-row' : 'even-row',\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                rowSpan: 4,\n                children: employee.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"regular\",\n                children: \"Regular\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 19\n              }, this), monthDays.map(date => {\n                var _timesheetData$employ8, _timesheetData$employ9;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  onClick: () => handleSetTime(employee.id, date),\n                  children: ((_timesheetData$employ8 = timesheetData[employee.id]) === null || _timesheetData$employ8 === void 0 ? void 0 : (_timesheetData$employ9 = _timesheetData$employ8[date]) === null || _timesheetData$employ9 === void 0 ? void 0 : _timesheetData$employ9.normalTime) || 0\n                }, date, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 21\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: monthlyTotal.normalTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: employeeIndex % 2 === 0 ? 'odd-row' : 'even-row',\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"night\",\n                children: \"Night\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 19\n              }, this), monthDays.map(date => {\n                var _timesheetData$employ10, _timesheetData$employ11;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  onClick: () => handleSetTime(employee.id, date),\n                  children: ((_timesheetData$employ10 = timesheetData[employee.id]) === null || _timesheetData$employ10 === void 0 ? void 0 : (_timesheetData$employ11 = _timesheetData$employ10[date]) === null || _timesheetData$employ11 === void 0 ? void 0 : _timesheetData$employ11.nightShift) || 0\n                }, date, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 21\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: monthlyTotal.nightShift\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: employeeIndex % 2 === 0 ? 'odd-row' : 'even-row',\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"holiday\",\n                children: \"Holiday\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 19\n              }, this), monthDays.map(date => {\n                var _timesheetData$employ12, _timesheetData$employ13;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  onClick: () => handleSetTime(employee.id, date),\n                  children: ((_timesheetData$employ12 = timesheetData[employee.id]) === null || _timesheetData$employ12 === void 0 ? void 0 : (_timesheetData$employ13 = _timesheetData$employ12[date]) === null || _timesheetData$employ13 === void 0 ? void 0 : _timesheetData$employ13.holidayTime) || 0\n                }, date, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 21\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: monthlyTotal.holidayTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: employeeIndex % 2 === 0 ? 'odd-row' : 'even-row',\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"total\",\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 19\n              }, this), monthDays.map(date => {\n                var _timesheetData$employ14, _timesheetData$employ15;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  onClick: () => handleSetTime(employee.id, date),\n                  children: ((_timesheetData$employ14 = timesheetData[employee.id]) === null || _timesheetData$employ14 === void 0 ? void 0 : (_timesheetData$employ15 = _timesheetData$employ14[date]) === null || _timesheetData$employ15 === void 0 ? void 0 : _timesheetData$employ15.totalTime) || 0\n                }, date, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 21\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: monthlyTotal.totalTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this)]\n          }, employee.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Set Time for \", selectedEmployee]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Start Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: startTime,\n          onChange: e => setStartTime(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"End Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: endTime,\n          onChange: e => setEndTime(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Is this a holiday?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isHoliday,\n          onChange: e => setIsHoliday(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"GtL7G+CIYHZoqFNJ+BgOdeBo91k=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","onSnapshot","doc","setDoc","getDoc","db","jsxDEV","_jsxDEV","TimesheetList","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","nextDay","setNextDay","isHoliday","setIsHoliday","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","holidayTime","setHolidayTime","normalTime","setNormalTime","currentMonth","setCurrentMonth","Date","getMonth","currentYear","setCurrentYear","getFullYear","generateMonthDays","year","month","daysInMonth","getDate","days","day","push","fetchEmployees","unsubscribe","snapshot","employeeData","docs","map","id","data","fetchTimesheetData","timesheetDataRef","updatedTimesheetData","forEach","employeeId","hours","date","record","Object","entries","parseFloat","nightShift","Boolean","handleSetTime","_timesheetData$employ","_timesheetData$employ2","_timesheetData$employ3","_timesheetData$employ4","_timesheetData$employ5","_timesheetData$employ6","calculateMonthlyTotal","monthlyTotal","monthDays","_timesheetData$employ7","goToPreviousMonth","prevMonth","goToNextMonth","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","border","parseInt","split","employee","employeeIndex","Fragment","className","rowSpan","name","_timesheetData$employ8","_timesheetData$employ9","_timesheetData$employ10","_timesheetData$employ11","_timesheetData$employ12","_timesheetData$employ13","_timesheetData$employ14","_timesheetData$employ15","type","value","onChange","e","target","checked","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\n\nconst TimesheetList = () => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), (snapshot) => {\n        const employeeData = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, (snapshot) => {\n        const updatedTimesheetData = {};\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0,\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(timesheetData[employeeId]?.[date]?.startTime || \"\");\n    setEndTime(timesheetData[employeeId]?.[date]?.endTime || \"\");\n    setIsHoliday(timesheetData[employeeId]?.[date]?.isHoliday || false);\n    setModalOpen(true);\n  };\n\n  // Calculate monthly totals for an employee\n  const calculateMonthlyTotal = (employeeId) => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0,\n      totalTime: 0,\n    };\n\n    const monthDays = generateMonthDays(currentYear, currentMonth);\n    monthDays.forEach((date) => {\n      const data = timesheetData[employeeId]?.[date];\n      if (data) {\n        monthlyTotal.normalTime += data.normalTime || 0;\n        monthlyTotal.nightShift += data.nightShift || 0;\n        monthlyTotal.holidayTime += data.holidayTime || 0;\n        monthlyTotal.totalTime += data.totalTime || 0;\n      }\n    });\n\n    return monthlyTotal;\n  };\n\n  // Change to previous month\n  const goToPreviousMonth = () => {\n    setCurrentMonth((prevMonth) => (prevMonth === 0 ? 11 : prevMonth - 1));\n    if (currentMonth === 0) setCurrentYear(currentYear - 1); // Handle year change\n  };\n\n  // Change to next month\n  const goToNextMonth = () => {\n    setCurrentMonth((prevMonth) => (prevMonth === 11 ? 0 : prevMonth + 1));\n    if (currentMonth === 11) setCurrentYear(currentYear + 1); // Handle year change\n  };\n\n  // Get the days for the selected month\n  const monthDays = generateMonthDays(currentYear, currentMonth);\n\n  return (\n    <div>\n      <button onClick={goToPreviousMonth}>Previous Month</button>\n      <span>{new Date(currentYear, currentMonth).toLocaleString('default', { month: 'long', year: 'numeric' })}</span>\n      <button onClick={goToNextMonth}>Next Month</button>\n\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Shift</th>\n            {monthDays.map((date) => (\n              <th key={date}>{parseInt(date.split('-')[1], 10)}</th>\n            ))}\n            <th>Monthly Total</th>\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee, employeeIndex) => {\n            const monthlyTotal = calculateMonthlyTotal(employee.id);\n            return (\n              <React.Fragment key={employee.id}>\n                <tr className={employeeIndex % 2 === 0 ? 'odd-row' : 'even-row'}>\n                  <td rowSpan={4}>{employee.name}</td>\n                  <td className=\"regular\">Regular</td>\n                  {monthDays.map((date) => (\n                    <td key={date} onClick={() => handleSetTime(employee.id, date)}>\n                      {timesheetData[employee.id]?.[date]?.normalTime || 0}\n                    </td>\n                  ))}\n                  <td>{monthlyTotal.normalTime}</td>\n                </tr>\n                <tr className={employeeIndex % 2 === 0 ? 'odd-row' : 'even-row'}>\n                  <td className=\"night\">Night</td>\n                  {monthDays.map((date) => (\n                    <td key={date} onClick={() => handleSetTime(employee.id, date)}>\n                      {timesheetData[employee.id]?.[date]?.nightShift || 0}\n                    </td>\n                  ))}\n                  <td>{monthlyTotal.nightShift}</td>\n                </tr>\n                <tr className={employeeIndex % 2 === 0 ? 'odd-row' : 'even-row'}>\n                  <td className=\"holiday\">Holiday</td>\n                  {monthDays.map((date) => (\n                    <td key={date} onClick={() => handleSetTime(employee.id, date)}>\n                      {timesheetData[employee.id]?.[date]?.holidayTime || 0}\n                    </td>\n                  ))}\n                  <td>{monthlyTotal.holidayTime}</td>\n                </tr>\n                <tr className={employeeIndex % 2 === 0 ? 'odd-row' : 'even-row'}>\n                  <td className=\"total\">Total</td>\n                  {monthDays.map((date) => (\n                    <td key={date} onClick={() => handleSetTime(employee.id, date)}>\n                      {timesheetData[employee.id]?.[date]?.totalTime || 0}\n                    </td>\n                  ))}\n                  <td>{monthlyTotal.totalTime}</td>\n                </tr>\n              </React.Fragment>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {modalOpen && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <h3>Set Time for {selectedEmployee}</h3>\n            <label>Start Time:</label>\n            <input type=\"time\" value={startTime} onChange={(e) => setStartTime(e.target.value)} />\n            <br />\n            <label>End Time:</label>\n            <input type=\"time\" value={endTime} onChange={(e) => setEndTime(e.target.value)} />\n            <br />\n            <label>Is this a holiday?</label>\n            <input type=\"checkbox\" checked={isHoliday} onChange={(e) => setIsHoliday(e.target.checked)} />\n            <br />\n            <button onClick={() => setModalOpen(false)}>Close</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}