{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n// Import Firebase functions and Firestore\nimport { collection, getDocs, updateDoc, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [selectedTime, setSelectedTime] = useState({\n    employeeId: null,\n    date: null,\n    startTime: \"\",\n    endTime: \"\"\n  });\n  const [showTimePicker, setShowTimePicker] = useState(false);\n\n  // Fetch employees data from Firebase\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        // Get employees collection from Firebase\n        const querySnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n    fetchEmployees();\n  }, []);\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = {}; // Initially no start and end times\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData(); // Fetch timesheet data when employees or weekDates change\n    }\n  }, [employees, weekDates]);\n\n  // Handle input changes for work hours (start and end times)\n  const handleTimeInputChange = (employeeId, date, startTime, endTime) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = {\n        startTime,\n        endTime\n      };\n      return newData;\n    });\n\n    // Save updated timesheet data to Firebase\n    saveTimesheetDataToFirebase(employeeId, date, startTime, endTime);\n  };\n\n  // Function to open the time selection modal\n  const openTimePicker = (employeeId, date) => {\n    setSelectedTime({\n      employeeId,\n      date,\n      startTime: \"\",\n      endTime: \"\"\n    });\n    setShowTimePicker(true);\n  };\n\n  // Function to close the time selection modal\n  const closeTimePicker = () => {\n    setShowTimePicker(false);\n  };\n\n  // Handle start and end time selection\n  const handleTimeChange = (e, field) => {\n    setSelectedTime(prevState => ({\n      ...prevState,\n      [field]: e.target.value\n    }));\n  };\n\n  // Save the selected times to Firebase\n  const saveTimesheetDataToFirebase = async (employeeId, date, startTime, endTime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId); // Use employee ID as doc reference\n      const timesheetData = await getDoc(timesheetDocRef); // Check if document already exists\n\n      let updatedData = {}; // Initialize an object to hold updated timesheet data\n\n      if (timesheetData.exists()) {\n        // If the document exists, get the current data and merge the new data\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = {\n          startTime,\n          endTime\n        }; // Update with start and end times\n      } else {\n        // If the document does not exist, create new data\n        updatedData = {\n          [date]: {\n            startTime,\n            endTime\n          }\n        };\n      }\n\n      // Save or update the document in Firestore with the merged data\n      await setDoc(timesheetDocRef, {\n        hours: updatedData\n      });\n\n      // After saving the data, fetch the updated timesheet data\n      fetchTimesheetData(); // Refetch the data after saving\n    } catch (error) {\n      console.error(\"Error saving timesheet data to Firebase:\", error);\n    }\n  };\n\n  // Function to fetch the latest timesheet data\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n      setTimesheetData(updatedTimesheetData); // Update state with the fetched data\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showTimePicker && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-picker-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Select Time for \", selectedTime.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Start Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: selectedTime.startTime,\n          onChange: e => handleTimeChange(e, \"startTime\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"End Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: selectedTime.endTime,\n          onChange: e => handleTimeChange(e, \"endTime\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleTimeInputChange(selectedTime.employeeId, selectedTime.date, selectedTime.startTime, selectedTime.endTime);\n          closeTimePicker();\n        },\n        children: \"Save Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: closeTimePicker,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this), weekDates.map(date => {\n            var _timesheetData$employ, _timesheetData$employ2, _timesheetData$employ3, _timesheetData$employ4;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => openTimePicker(employee.id, date),\n                children: \"Set Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [(_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.startTime, \" -\", \" \", (_timesheetData$employ3 = timesheetData[employee.id]) === null || _timesheetData$employ3 === void 0 ? void 0 : (_timesheetData$employ4 = _timesheetData$employ3[date]) === null || _timesheetData$employ4 === void 0 ? void 0 : _timesheetData$employ4.endTime]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 19\n              }, this)]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this);\n          })]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"Tl3mVCVTvdWYUQ0Y3cOSACSA76Y=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","getDocs","updateDoc","doc","setDoc","getDoc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","selectedTime","setSelectedTime","employeeId","date","startTime","endTime","showTimePicker","setShowTimePicker","fetchEmployees","querySnapshot","employeeData","docs","map","id","data","error","console","length","initialTimesheetData","reduce","acc","employee","weekAcc","fetchTimesheetData","handleTimeInputChange","prevData","newData","saveTimesheetDataToFirebase","openTimePicker","closeTimePicker","handleTimeChange","e","field","prevState","target","value","timesheetDocRef","updatedData","exists","hours","updatedTimesheetData","forEach","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","border","name","_timesheetData$employ","_timesheetData$employ2","_timesheetData$employ3","_timesheetData$employ4","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n// Import Firebase functions and Firestore\nimport { collection, getDocs, updateDoc, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [selectedTime, setSelectedTime] = useState({\n    employeeId: null,\n    date: null,\n    startTime: \"\",\n    endTime: \"\",\n  });\n  const [showTimePicker, setShowTimePicker] = useState(false);\n\n  // Fetch employees data from Firebase\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        // Get employees collection from Firebase\n        const querySnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n\n    fetchEmployees();\n  }, []);\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = {}; // Initially no start and end times\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData(); // Fetch timesheet data when employees or weekDates change\n    }\n  }, [employees, weekDates]);\n\n  // Handle input changes for work hours (start and end times)\n  const handleTimeInputChange = (employeeId, date, startTime, endTime) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = { startTime, endTime };\n      return newData;\n    });\n\n    // Save updated timesheet data to Firebase\n    saveTimesheetDataToFirebase(employeeId, date, startTime, endTime);\n  };\n\n  // Function to open the time selection modal\n  const openTimePicker = (employeeId, date) => {\n    setSelectedTime({ employeeId, date, startTime: \"\", endTime: \"\" });\n    setShowTimePicker(true);\n  };\n\n  // Function to close the time selection modal\n  const closeTimePicker = () => {\n    setShowTimePicker(false);\n  };\n\n  // Handle start and end time selection\n  const handleTimeChange = (e, field) => {\n    setSelectedTime((prevState) => ({\n      ...prevState,\n      [field]: e.target.value,\n    }));\n  };\n\n  // Save the selected times to Firebase\n  const saveTimesheetDataToFirebase = async (employeeId, date, startTime, endTime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId); // Use employee ID as doc reference\n      const timesheetData = await getDoc(timesheetDocRef); // Check if document already exists\n\n      let updatedData = {}; // Initialize an object to hold updated timesheet data\n\n      if (timesheetData.exists()) {\n        // If the document exists, get the current data and merge the new data\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = { startTime, endTime }; // Update with start and end times\n      } else {\n        // If the document does not exist, create new data\n        updatedData = {\n          [date]: { startTime, endTime },\n        };\n      }\n\n      // Save or update the document in Firestore with the merged data\n      await setDoc(timesheetDocRef, { hours: updatedData });\n\n      // After saving the data, fetch the updated timesheet data\n      fetchTimesheetData(); // Refetch the data after saving\n    } catch (error) {\n      console.error(\"Error saving timesheet data to Firebase:\", error);\n    }\n  };\n\n  // Function to fetch the latest timesheet data\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n\n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n\n      setTimesheetData(updatedTimesheetData); // Update state with the fetched data\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  return (\n    <div>\n      {showTimePicker && (\n        <div className=\"time-picker-modal\">\n          <h3>Select Time for {selectedTime.date}</h3>\n          <div>\n            <label>Start Time:</label>\n            <input\n              type=\"time\"\n              value={selectedTime.startTime}\n              onChange={(e) => handleTimeChange(e, \"startTime\")}\n            />\n          </div>\n          <div>\n            <label>End Time:</label>\n            <input\n              type=\"time\"\n              value={selectedTime.endTime}\n              onChange={(e) => handleTimeChange(e, \"endTime\")}\n            />\n          </div>\n          <button\n            onClick={() => {\n              handleTimeInputChange(\n                selectedTime.employeeId,\n                selectedTime.date,\n                selectedTime.startTime,\n                selectedTime.endTime\n              );\n              closeTimePicker();\n            }}\n          >\n            Save Time\n          </button>\n          <button onClick={closeTimePicker}>Cancel</button>\n        </div>\n      )}\n\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td>\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <button onClick={() => openTimePicker(employee.id, date)}>\n                    Set Time\n                  </button>\n                  <div>\n                    {timesheetData[employee.id]?.[date]?.startTime} -{\" \"}\n                    {timesheetData[employee.id]?.[date]?.endTime}\n                  </div>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}