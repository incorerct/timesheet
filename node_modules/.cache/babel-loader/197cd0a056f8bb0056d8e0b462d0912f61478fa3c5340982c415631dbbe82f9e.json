{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [totalTime, setTotalTime] = useState(0);\n  const [overtime, setOvertime] = useState(0); // State for overtime hours\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\");\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data());\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = {\n            startTime: \"\",\n            endTime: \"\",\n            totalTime: 0,\n            overtime: 0\n          };\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData();\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate total time and overtime\n  const calculateTotalTime = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // If the end time is earlier than the start time, adjust for crossing midnight\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // Adjust the end date to the next day\n    }\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60); // Calculate total hours worked\n    setTotalTime(totalTimeInHours.toFixed(2));\n\n    // Night shift (10:00 PM to 6:00 AM)\n    const nightStart = 22; // 10:00 PM\n    const nightEnd = 6; // 6:00 AM\n    let nightShiftHours = 0;\n    let normalHours = 0;\n    let overtime = 0;\n\n    // Check if the work time includes night shift hours\n    if (startDate.getHours() >= nightStart || startDate.getHours() < nightEnd) {\n      nightShiftHours = totalTimeInHours; // Consider entire time as night shift\n    } else {\n      const normalStartTime = 9; // Normal work start time (9:00 AM)\n      const normalEndTime = 18; // Normal work end time (6:00 PM)\n\n      // Calculate normal hours (between 9:00 AM and 6:00 PM)\n      if (startDate.getHours() < normalStartTime) {\n        const adjustedStartDate = new Date();\n        adjustedStartDate.setHours(normalStartTime, 0, 0); // Start time is 9:00 AM\n        normalHours += (endDate - adjustedStartDate) / (1000 * 60 * 60); // Time between 9:00 AM and end time\n      } else if (startDate.getHours() >= normalStartTime && startDate.getHours() < normalEndTime) {\n        const adjustedEndDate = new Date();\n        adjustedEndDate.setHours(normalEndTime, 0, 0); // End time is 6:00 PM\n        normalHours += (endDate - startDate) / (1000 * 60 * 60); // Time between start time and 6:00 PM\n      }\n\n      // Calculate overtime before 9:00 AM\n      if (startDate.getHours() < normalStartTime) {\n        const overtimeEndDate = new Date();\n        overtimeEndDate.setHours(normalStartTime, 0, 0); // 9:00 AM\n        overtime += (overtimeEndDate - startDate) / (1000 * 60 * 60); // Overtime before 9:00 AM\n      }\n\n      // Calculate overtime after 6:00 PM\n      if (endDate.getHours() >= normalEndTime) {\n        const overtimeStartDate = new Date();\n        overtimeStartDate.setHours(normalEndTime, 0, 0); // 6:00 PM\n        overtime += (endDate - overtimeStartDate) / (1000 * 60 * 60); // Overtime after 6:00 PM\n      }\n    }\n    setOvertime(overtime.toFixed(2)); // Store overtime hours\n\n    // Return total time and overtime hours\n    return {\n      totalTime: totalTimeInHours.toFixed(2),\n      overtime: overtime.toFixed(2),\n      nightShiftHours: nightShiftHours.toFixed(2)\n    };\n  };\n  const handleInputChange = async (employeeId, date, start, end, totalTime, overtime) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = {\n        startTime: start,\n        endTime: end,\n        totalTime,\n        overtime\n      };\n      return newData;\n    });\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, overtime);\n  };\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, overtime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n      let updatedData = {};\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = {\n          startTime: start,\n          endTime: end,\n          totalTime,\n          overtime\n        };\n      } else {\n        updatedData = {\n          [date]: {\n            startTime: start,\n            endTime: end,\n            totalTime,\n            overtime\n          }\n        };\n      }\n      await setDoc(timesheetDocRef, {\n        hours: updatedData\n      });\n      fetchTimesheetData();\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n      setTimesheetData(updatedTimesheetData);\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setOvertime(0); // Reset overtime\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Time Adjustments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Normal Start Time: \", timeAdjustments.normalStartTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Normal End Time: \", timeAdjustments.normalEndTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this), weekDates.map(date => {\n            var _timesheetData$employ, _timesheetData$employ2;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleSetTime(employee.id, date),\n                children: \"Set Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 19\n              }, this), ((_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.totalTime) && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Total Time: \", timesheetData[employee.id][date].totalTime, \" hours\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Overtime: \", timesheetData[employee.id][date].overtime, \" hours\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 21\n              }, this)]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this);\n          })]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Set Time for \", selectedEmployee, \" on \", selectedDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: startTime,\n        onChange: e => setStartTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: endTime,\n        onChange: e => setEndTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          const {\n            totalTime,\n            overtime\n          } = calculateTotalTime(startTime, endTime);\n          handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime, overtime);\n          handleCloseModal();\n        },\n        children: \"Save Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCloseModal,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"PeXx+qE6oOkl1qbLa3673HV1rVc=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["useState","useEffect","collection","getDocs","getDoc","doc","setDoc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","timeAdjustments","setTimeAdjustments","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","totalTime","setTotalTime","overtime","setOvertime","fetchData","employeeSnapshot","employeeData","docs","map","id","data","settingsDocRef","settingsDoc","exists","console","log","error","length","initialTimesheetData","reduce","acc","employee","weekAcc","date","fetchTimesheetData","calculateTotalTime","start","end","startParts","split","Number","endParts","startDate","Date","setHours","endDate","setDate","getDate","totalTimeInHours","toFixed","nightStart","nightEnd","nightShiftHours","normalHours","getHours","normalStartTime","normalEndTime","adjustedStartDate","adjustedEndDate","overtimeEndDate","overtimeStartDate","handleInputChange","employeeId","prevData","newData","saveTimesheetDataToFirebase","timesheetDocRef","updatedData","hours","querySnapshot","updatedTimesheetData","forEach","handleSetTime","handleCloseModal","children","fileName","_jsxFileName","lineNumber","columnNumber","border","name","_timesheetData$employ","_timesheetData$employ2","onClick","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\"; \nimport { db } from \"./firebaseConfig\";\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [totalTime, setTotalTime] = useState(0);\n  const [overtime, setOvertime] = useState(0); // State for overtime hours\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\");\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data());\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = { startTime: \"\", endTime: \"\", totalTime: 0, overtime: 0 };\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData();\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate total time and overtime\n  const calculateTotalTime = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // If the end time is earlier than the start time, adjust for crossing midnight\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // Adjust the end date to the next day\n    }\n\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60); // Calculate total hours worked\n    setTotalTime(totalTimeInHours.toFixed(2));\n\n    // Night shift (10:00 PM to 6:00 AM)\n    const nightStart = 22; // 10:00 PM\n    const nightEnd = 6; // 6:00 AM\n    let nightShiftHours = 0;\n    let normalHours = 0;\n    let overtime = 0;\n\n    // Check if the work time includes night shift hours\n    if (startDate.getHours() >= nightStart || startDate.getHours() < nightEnd) {\n      nightShiftHours = totalTimeInHours; // Consider entire time as night shift\n    } else {\n      const normalStartTime = 9; // Normal work start time (9:00 AM)\n      const normalEndTime = 18; // Normal work end time (6:00 PM)\n\n      // Calculate normal hours (between 9:00 AM and 6:00 PM)\n      if (startDate.getHours() < normalStartTime) {\n        const adjustedStartDate = new Date();\n        adjustedStartDate.setHours(normalStartTime, 0, 0); // Start time is 9:00 AM\n        normalHours += (endDate - adjustedStartDate) / (1000 * 60 * 60); // Time between 9:00 AM and end time\n      } else if (startDate.getHours() >= normalStartTime && startDate.getHours() < normalEndTime) {\n        const adjustedEndDate = new Date();\n        adjustedEndDate.setHours(normalEndTime, 0, 0); // End time is 6:00 PM\n        normalHours += (endDate - startDate) / (1000 * 60 * 60); // Time between start time and 6:00 PM\n      }\n\n      // Calculate overtime before 9:00 AM\n      if (startDate.getHours() < normalStartTime) {\n        const overtimeEndDate = new Date();\n        overtimeEndDate.setHours(normalStartTime, 0, 0); // 9:00 AM\n        overtime += (overtimeEndDate - startDate) / (1000 * 60 * 60); // Overtime before 9:00 AM\n      }\n\n      // Calculate overtime after 6:00 PM\n      if (endDate.getHours() >= normalEndTime) {\n        const overtimeStartDate = new Date();\n        overtimeStartDate.setHours(normalEndTime, 0, 0); // 6:00 PM\n        overtime += (endDate - overtimeStartDate) / (1000 * 60 * 60); // Overtime after 6:00 PM\n      }\n    }\n\n    setOvertime(overtime.toFixed(2)); // Store overtime hours\n\n    // Return total time and overtime hours\n    return { totalTime: totalTimeInHours.toFixed(2), overtime: overtime.toFixed(2), nightShiftHours: nightShiftHours.toFixed(2) };\n  };\n\n  const handleInputChange = async (employeeId, date, start, end, totalTime, overtime) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = { startTime: start, endTime: end, totalTime, overtime };\n      return newData;\n    });\n\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, overtime);\n  };\n\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, overtime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n\n      let updatedData = {};\n\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = { startTime: start, endTime: end, totalTime, overtime };\n      } else {\n        updatedData = { [date]: { startTime: start, endTime: end, totalTime, overtime } };\n      }\n\n      await setDoc(timesheetDocRef, { hours: updatedData });\n      fetchTimesheetData();\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n\n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n\n      setTimesheetData(updatedTimesheetData);\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setOvertime(0); // Reset overtime\n  };\n\n  return (\n    <div>\n      <div>\n        <h3>Time Adjustments</h3>\n        <p>Normal Start Time: {timeAdjustments.normalStartTime}</p>\n        <p>Normal End Time: {timeAdjustments.normalEndTime}</p>\n      </div>\n\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td>\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <button onClick={() => handleSetTime(employee.id, date)}>Set Time</button>\n                  {timesheetData[employee.id]?.[date]?.totalTime && (\n                    <div>\n                      <p>Total Time: {timesheetData[employee.id][date].totalTime} hours</p>\n                      <p>Overtime: {timesheetData[employee.id][date].overtime} hours</p>\n                    </div>\n                  )}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {modalOpen && (\n        <div>\n          <h2>Set Time for {selectedEmployee} on {selectedDate}</h2>\n          <input type=\"time\" value={startTime} onChange={(e) => setStartTime(e.target.value)} />\n          <input type=\"time\" value={endTime} onChange={(e) => setEndTime(e.target.value)} />\n          <button\n            onClick={() => {\n              const { totalTime, overtime } = calculateTotalTime(startTime, endTime);\n              handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime, overtime);\n              handleCloseModal();\n            }}\n          >\n            Save Time\n          </button>\n          <button onClick={handleCloseModal}>Cancel</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}