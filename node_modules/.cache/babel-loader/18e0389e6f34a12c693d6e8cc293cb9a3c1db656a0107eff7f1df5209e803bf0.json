{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { collection, getDoc, doc, setDoc, onSnapshot } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n\n  // Fetch employees and time adjustments in real-time\n  useEffect(() => {\n    const unsubscribeEmployees = onSnapshot(collection(db, \"employees\"), snapshot => {\n      const employeeData = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setEmployees(employeeData);\n    });\n    const unsubscribeSettings = onSnapshot(doc(db, \"timeAdjustments\", \"settings\"), docSnap => {\n      if (docSnap.exists()) {\n        setTimeAdjustments(docSnap.data());\n      } else {\n        console.log(\"No time adjustments found\");\n      }\n    });\n    return () => {\n      // Cleanup the listeners when the component unmounts\n      unsubscribeEmployees();\n      unsubscribeSettings();\n    };\n  }, []);\n\n  // Fetch timesheet data in real-time\n  useEffect(() => {\n    const unsubscribeTimesheets = onSnapshot(collection(db, \"timesheets\"), snapshot => {\n      const timesheetData = {};\n      snapshot.forEach(doc => {\n        const employeeData = doc.data().hours;\n        for (const [date, data] of Object.entries(employeeData)) {\n          if (!timesheetData[doc.id]) timesheetData[doc.id] = {};\n          timesheetData[doc.id][date] = data;\n        }\n      });\n      setTimesheetData(timesheetData); // Update timesheet data after fetching\n    });\n    return () => {\n      // Cleanup the listener when the component unmounts\n      unsubscribeTimesheets();\n    };\n  }, []);\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = {\n            startTime: \"\",\n            endTime: \"\",\n            totalTime: 0,\n            nightShift: 0,\n            holidayTime: 0\n          };\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n    }\n  }, [employees, weekDates]);\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n  const handleStartTimeChange = event => {\n    setStartTime(event.target.value);\n    calculateTimes(event.target.value, endTime, nextDay);\n  };\n  const handleEndTimeChange = event => {\n    setEndTime(event.target.value);\n    calculateTimes(startTime, event.target.value, nextDay);\n  };\n  const handleNextDayToggle = () => {\n    setNextDay(prev => !prev);\n    calculateTimes(startTime, endTime, !nextDay); // Ensure we recalculate when the \"nextDay\" state changes\n  };\n  const handleHolidayToggle = () => {\n    setIsHoliday(prev => !prev);\n    if (!isHoliday) {\n      setHolidayTime(totalTime); // Assign holiday time\n      setTotalTime(0);\n      setNightShiftHours(0);\n    } else {\n      setHolidayTime(0);\n      calculateTimes(startTime, endTime, nextDay); // Recalculate if unchecking\n    }\n  };\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n  const calculateTimes = (start, end, isNextDay) => {\n    if (!start || !end) return;\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n\n    // Adjust end time for next day if needed\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1); // Move end date to the next day if \"Next Day\" is checked\n\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    const nightShiftStart = new Date(startDate);\n    nightShiftStart.setHours(22, 0, 0); // 10:00 PM\n\n    const nightShiftEnd = new Date(startDate);\n    nightShiftEnd.setDate(nightShiftEnd.getDate() + 1); // Move to the next day\n    nightShiftEnd.setHours(6, 0, 0); // 6:00 AM\n\n    let nightShiftHours = 0;\n    if (startDate < nightShiftEnd && endDate >= nightShiftStart) {\n      const nightShiftStartTime = startDate < nightShiftStart ? nightShiftStart : startDate;\n      const nightShiftEndTime = endDate > nightShiftEnd ? nightShiftEnd : endDate;\n      nightShiftHours = (nightShiftEndTime - nightShiftStartTime) / (1000 * 60 * 60);\n    }\n    setTotalTime(totalTimeInHours.toFixed(2));\n    setNightShiftHours(nightShiftHours.toFixed(2));\n  };\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, nightShift, holidayTime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n      let updatedData = {};\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = {\n          startTime: start,\n          endTime: end,\n          totalTime,\n          nightShift,\n          holidayTime,\n          isHoliday\n        };\n      } else {\n        updatedData = {\n          [date]: {\n            startTime: start,\n            endTime: end,\n            totalTime,\n            nightShift,\n            holidayTime,\n            isHoliday\n          }\n        };\n      }\n      await setDoc(timesheetDocRef, {\n        hours: updatedData\n      });\n      // Data will automatically update through real-time listeners\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n  const handleInputChange = async (employeeId, date, start, end, totalTime, nightShift, holidayTime) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = {\n        startTime: start,\n        endTime: end,\n        totalTime,\n        nightShift,\n        holidayTime,\n        isHoliday\n      };\n      return newData;\n    });\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, nightShift, holidayTime);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this), weekDates.map(date => {\n            var _timesheetData$employ, _timesheetData$employ2;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleSetTime(employee.id, date),\n                children: \"Set Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 19\n              }, this), ((_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.totalTime) && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Total Time: \", timesheetData[employee.id][date].totalTime, \" hours\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Night Shift: \", timesheetData[employee.id][date].nightShift, \" hours\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Holiday Time: \", timesheetData[employee.id][date].holidayTime, \" hours\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 21\n              }, this)]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this);\n          })]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCloseModal,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"YCR/iYXHjKy9qbbfCQCqH7Wl0g0=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["useState","useEffect","collection","getDoc","doc","setDoc","onSnapshot","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","timeAdjustments","setTimeAdjustments","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","nextDay","setNextDay","isHoliday","setIsHoliday","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","holidayTime","setHolidayTime","unsubscribeEmployees","snapshot","employeeData","docs","map","id","data","unsubscribeSettings","docSnap","exists","console","log","unsubscribeTimesheets","forEach","hours","date","Object","entries","length","initialTimesheetData","reduce","acc","employee","weekAcc","nightShift","handleSetTime","employeeId","handleStartTimeChange","event","target","value","calculateTimes","handleEndTimeChange","handleNextDayToggle","prev","handleHolidayToggle","handleCloseModal","start","end","isNextDay","startHours","startMinutes","split","Number","endHours","endMinutes","startDate","Date","setHours","endDate","setDate","getDate","totalTimeInHours","nightShiftStart","nightShiftEnd","nightShiftStartTime","nightShiftEndTime","toFixed","saveTimesheetDataToFirebase","timesheetDocRef","updatedData","error","handleInputChange","prevData","newData","children","border","fileName","_jsxFileName","lineNumber","columnNumber","name","_timesheetData$employ","_timesheetData$employ2","onClick","Modal","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { collection, getDoc, doc, setDoc, onSnapshot } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n\n  // Fetch employees and time adjustments in real-time\n  useEffect(() => {\n    const unsubscribeEmployees = onSnapshot(collection(db, \"employees\"), (snapshot) => {\n      const employeeData = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setEmployees(employeeData);\n    });\n\n    const unsubscribeSettings = onSnapshot(doc(db, \"timeAdjustments\", \"settings\"), (docSnap) => {\n      if (docSnap.exists()) {\n        setTimeAdjustments(docSnap.data());\n      } else {\n        console.log(\"No time adjustments found\");\n      }\n    });\n\n    return () => {\n      // Cleanup the listeners when the component unmounts\n      unsubscribeEmployees();\n      unsubscribeSettings();\n    };\n  }, []);\n\n  // Fetch timesheet data in real-time\n  useEffect(() => {\n    const unsubscribeTimesheets = onSnapshot(collection(db, \"timesheets\"), (snapshot) => {\n      const timesheetData = {};\n      snapshot.forEach((doc) => {\n        const employeeData = doc.data().hours;\n        for (const [date, data] of Object.entries(employeeData)) {\n          if (!timesheetData[doc.id]) timesheetData[doc.id] = {};\n          timesheetData[doc.id][date] = data;\n        }\n      });\n      setTimesheetData(timesheetData); // Update timesheet data after fetching\n    });\n\n    return () => {\n      // Cleanup the listener when the component unmounts\n      unsubscribeTimesheets();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = { startTime: \"\", endTime: \"\", totalTime: 0, nightShift: 0, holidayTime: 0 };\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n    }\n  }, [employees, weekDates]);\n\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  const handleStartTimeChange = (event) => {\n    setStartTime(event.target.value);\n    calculateTimes(event.target.value, endTime, nextDay);\n  };\n\n  const handleEndTimeChange = (event) => {\n    setEndTime(event.target.value);\n    calculateTimes(startTime, event.target.value, nextDay);\n  };\n\n  const handleNextDayToggle = () => {\n    setNextDay((prev) => !prev);\n    calculateTimes(startTime, endTime, !nextDay); // Ensure we recalculate when the \"nextDay\" state changes\n  };\n\n  const handleHolidayToggle = () => {\n    setIsHoliday((prev) => !prev);\n    if (!isHoliday) {\n      setHolidayTime(totalTime);  // Assign holiday time\n      setTotalTime(0);\n      setNightShiftHours(0);\n    } else {\n      setHolidayTime(0);\n      calculateTimes(startTime, endTime, nextDay);  // Recalculate if unchecking\n    }\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n\n  const calculateTimes = (start, end, isNextDay) => {\n    if (!start || !end) return;\n\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n\n    // Adjust end time for next day if needed\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);  // Move end date to the next day if \"Next Day\" is checked\n\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n\n    const nightShiftStart = new Date(startDate);\n    nightShiftStart.setHours(22, 0, 0); // 10:00 PM\n\n    const nightShiftEnd = new Date(startDate);\n    nightShiftEnd.setDate(nightShiftEnd.getDate() + 1); // Move to the next day\n    nightShiftEnd.setHours(6, 0, 0); // 6:00 AM\n\n    let nightShiftHours = 0;\n\n    if (startDate < nightShiftEnd && endDate >= nightShiftStart) {\n      const nightShiftStartTime = startDate < nightShiftStart ? nightShiftStart : startDate;\n      const nightShiftEndTime = endDate > nightShiftEnd ? nightShiftEnd : endDate;\n      nightShiftHours = (nightShiftEndTime - nightShiftStartTime) / (1000 * 60 * 60);\n    }\n\n    setTotalTime(totalTimeInHours.toFixed(2));\n    setNightShiftHours(nightShiftHours.toFixed(2));\n  };\n\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, nightShift, holidayTime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n\n      let updatedData = {};\n\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = { startTime: start, endTime: end, totalTime, nightShift, holidayTime, isHoliday };\n      } else {\n        updatedData = { [date]: { startTime: start, endTime: end, totalTime, nightShift, holidayTime, isHoliday } };\n      }\n\n      await setDoc(timesheetDocRef, { hours: updatedData });\n      // Data will automatically update through real-time listeners\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  const handleInputChange = async (employeeId, date, start, end, totalTime, nightShift, holidayTime) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = { startTime: start, endTime: end, totalTime, nightShift, holidayTime, isHoliday };\n      return newData;\n    });\n\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, nightShift, holidayTime);\n  };\n\n  return (\n    <div>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td>\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <button onClick={() => handleSetTime(employee.id, date)}>Set Time</button>\n                  {timesheetData[employee.id]?.[date]?.totalTime && (\n                    <div>\n                      <p>Total Time: {timesheetData[employee.id][date].totalTime} hours</p>\n                      <p>Night Shift: {timesheetData[employee.id][date].nightShift} hours</p>\n                      <p>Holiday Time: {timesheetData[employee.id][date].holidayTime} hours</p>\n                    </div>\n                  )}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {modalOpen && (\n        <Modal>\n          {/* Modal code goes here */}\n          <button onClick={handleCloseModal}>Close</button>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}