{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { collection, getDocs, updateDoc, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false); // State for opening the modal\n  const [selectedEmployee, setSelectedEmployee] = useState(null); // Selected employee for time entry\n  const [selectedDate, setSelectedDate] = useState(null); // Selected date for time entry\n  const [startTime, setStartTime] = useState(\"\"); // Start time input\n  const [endTime, setEndTime] = useState(\"\"); // End time input\n  const [totalTime, setTotalTime] = useState(0); // Total time calculated\n  const [overtime, setOvertime] = useState(0); // Overtime calculated\n  const [timeAdjustments, setTimeAdjustments] = useState({}); // Time adjustment settings\n\n  // Fetch employees data from Firebase\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n    fetchEmployees();\n  }, []);\n\n  // Fetch time adjustments settings from Firebase\n  useEffect(() => {\n    const fetchTimeAdjustments = async () => {\n      try {\n        const timeAdjustmentsDocRef = doc(db, \"timeAdjustments\", \"default\");\n        const timeAdjustmentsDoc = await getDoc(timeAdjustmentsDocRef);\n        if (timeAdjustmentsDoc.exists()) {\n          setTimeAdjustments(timeAdjustmentsDoc.data());\n        }\n      } catch (error) {\n        console.error(\"Error fetching time adjustments:\", error);\n      }\n    };\n    fetchTimeAdjustments();\n  }, []);\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = {\n            startTime: \"\",\n            endTime: \"\",\n            totalTime: 0,\n            overtime: 0\n          }; // Initially empty values\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData(); // Fetch timesheet data when employees or weekDates change\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate the total time and overtime, handling overnight shifts\n  const calculateTotalTime = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n\n    // Create Date objects for accurate time calculations\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // If end time is earlier than start time, assume itâ€™s the next day\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // Move end date to the next day\n    }\n\n    // Calculate the total time in hours\n    const diff = (endDate - startDate) / (1000 * 60 * 60);\n    setTotalTime(diff.toFixed(2)); // Set the total time in hours\n\n    // Calculate overtime if total time exceeds normal working hours\n    const normalStartParts = timeAdjustments.normalStartTime.split(\":\").map(Number);\n    const normalEndParts = timeAdjustments.normalEndTime.split(\":\").map(Number);\n    const normalStartDate = new Date();\n    normalStartDate.setHours(normalStartParts[0], normalStartParts[1], 0);\n    const normalEndDate = new Date();\n    normalEndDate.setHours(normalEndParts[0], normalEndParts[1], 0);\n\n    // If the total time worked exceeds normal working hours, calculate overtime\n    if (diff > (normalEndDate - normalStartDate) / (1000 * 60 * 60)) {\n      const overtimeHours = diff - (normalEndDate - normalStartDate) / (1000 * 60 * 60);\n      setOvertime(overtimeHours.toFixed(2));\n    } else {\n      setOvertime(0); // Reset overtime if no overtime is worked\n    }\n  };\n\n  // Handle input changes for work hours\n  const handleInputChange = async (employeeId, date, start, end, totalTime, overtime) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = {\n        startTime: start,\n        endTime: end,\n        totalTime,\n        overtime\n      };\n      return newData;\n    });\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, overtime);\n  };\n\n  // Function to save timesheet data to Firebase\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, overtime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n      let updatedData = {};\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = {\n          startTime: start,\n          endTime: end,\n          totalTime,\n          overtime\n        };\n      } else {\n        updatedData = {\n          [date]: {\n            startTime: start,\n            endTime: end,\n            totalTime,\n            overtime\n          }\n        };\n      }\n      await setDoc(timesheetDocRef, {\n        hours: updatedData\n      });\n      fetchTimesheetData(); // Refetch the data after saving\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Function to fetch the latest timesheet data\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n      setTimesheetData(updatedTimesheetData); // Update state with the fetched data\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  // Handle opening the time modal and selecting time\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  // Handle closing the time modal\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setOvertime(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), \" \", weekDates.map(date => {\n            var _timesheetData$employ;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleSetTime(employee.id, date),\n                children: \"Set Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: ((_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : _timesheetData$employ[date]) && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: `From ${timesheetData[employee.id][date].startTime} - ${timesheetData[employee.id][date].endTime}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: `Total Time: ${timesheetData[employee.id][date].totalTime} hours`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 195,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: `Overtime: ${timesheetData[employee.id][date].overtime} hours`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 196,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 19\n              }, this)]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this);\n          })]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Set Time for \", selectedEmployee, \" on \", selectedDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: startTime,\n        onChange: e => setStartTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: endTime,\n        onChange: e => setEndTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => calculateTotalTime(startTime, endTime),\n        children: \"Calculate Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Total Time: \", totalTime, \" hours\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Overtime: \", overtime, \" hours\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime, overtime),\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCloseModal,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"7zwOukcXORyYPNJcfopvQGjwCgA=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","getDocs","updateDoc","doc","setDoc","getDoc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","totalTime","setTotalTime","overtime","setOvertime","timeAdjustments","setTimeAdjustments","fetchEmployees","querySnapshot","employeeData","docs","map","id","data","error","console","fetchTimeAdjustments","timeAdjustmentsDocRef","timeAdjustmentsDoc","exists","length","initialTimesheetData","reduce","acc","employee","weekAcc","date","fetchTimesheetData","calculateTotalTime","start","end","startParts","split","Number","endParts","startDate","Date","setHours","endDate","setDate","getDate","diff","toFixed","normalStartParts","normalStartTime","normalEndParts","normalEndTime","normalStartDate","normalEndDate","overtimeHours","handleInputChange","employeeId","prevData","newData","saveTimesheetDataToFirebase","timesheetDocRef","updatedData","hours","updatedTimesheetData","forEach","handleSetTime","handleCloseModal","children","border","fileName","_jsxFileName","lineNumber","columnNumber","name","_timesheetData$employ","onClick","className","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { collection, getDocs, updateDoc, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false); // State for opening the modal\n  const [selectedEmployee, setSelectedEmployee] = useState(null); // Selected employee for time entry\n  const [selectedDate, setSelectedDate] = useState(null); // Selected date for time entry\n  const [startTime, setStartTime] = useState(\"\"); // Start time input\n  const [endTime, setEndTime] = useState(\"\"); // End time input\n  const [totalTime, setTotalTime] = useState(0); // Total time calculated\n  const [overtime, setOvertime] = useState(0); // Overtime calculated\n  const [timeAdjustments, setTimeAdjustments] = useState({}); // Time adjustment settings\n\n  // Fetch employees data from Firebase\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n\n    fetchEmployees();\n  }, []);\n\n  // Fetch time adjustments settings from Firebase\n  useEffect(() => {\n    const fetchTimeAdjustments = async () => {\n      try {\n        const timeAdjustmentsDocRef = doc(db, \"timeAdjustments\", \"default\");\n        const timeAdjustmentsDoc = await getDoc(timeAdjustmentsDocRef);\n        if (timeAdjustmentsDoc.exists()) {\n          setTimeAdjustments(timeAdjustmentsDoc.data());\n        }\n      } catch (error) {\n        console.error(\"Error fetching time adjustments:\", error);\n      }\n    };\n\n    fetchTimeAdjustments();\n  }, []);\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = { startTime: \"\", endTime: \"\", totalTime: 0, overtime: 0 }; // Initially empty values\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData(); // Fetch timesheet data when employees or weekDates change\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate the total time and overtime, handling overnight shifts\n  const calculateTotalTime = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n\n    // Create Date objects for accurate time calculations\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // If end time is earlier than start time, assume itâ€™s the next day\n    if (endDate < startDate) {\n      endDate.setDate(endDate.getDate() + 1); // Move end date to the next day\n    }\n\n    // Calculate the total time in hours\n    const diff = (endDate - startDate) / (1000 * 60 * 60);\n    setTotalTime(diff.toFixed(2)); // Set the total time in hours\n\n    // Calculate overtime if total time exceeds normal working hours\n    const normalStartParts = timeAdjustments.normalStartTime.split(\":\").map(Number);\n    const normalEndParts = timeAdjustments.normalEndTime.split(\":\").map(Number);\n\n    const normalStartDate = new Date();\n    normalStartDate.setHours(normalStartParts[0], normalStartParts[1], 0);\n\n    const normalEndDate = new Date();\n    normalEndDate.setHours(normalEndParts[0], normalEndParts[1], 0);\n\n    // If the total time worked exceeds normal working hours, calculate overtime\n    if (diff > (normalEndDate - normalStartDate) / (1000 * 60 * 60)) {\n      const overtimeHours = diff - (normalEndDate - normalStartDate) / (1000 * 60 * 60);\n      setOvertime(overtimeHours.toFixed(2));\n    } else {\n      setOvertime(0); // Reset overtime if no overtime is worked\n    }\n  };\n\n  // Handle input changes for work hours\n  const handleInputChange = async (employeeId, date, start, end, totalTime, overtime) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = { startTime: start, endTime: end, totalTime, overtime };\n      return newData;\n    });\n\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, overtime);\n  };\n\n  // Function to save timesheet data to Firebase\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, overtime) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId); \n      const timesheetData = await getDoc(timesheetDocRef);\n\n      let updatedData = {};\n\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = { startTime: start, endTime: end, totalTime, overtime };\n      } else {\n        updatedData = { [date]: { startTime: start, endTime: end, totalTime, overtime } };\n      }\n\n      await setDoc(timesheetDocRef, { hours: updatedData });\n      fetchTimesheetData(); // Refetch the data after saving\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Function to fetch the latest timesheet data\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n\n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n\n      setTimesheetData(updatedTimesheetData); // Update state with the fetched data\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  // Handle opening the time modal and selecting time\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  // Handle closing the time modal\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setOvertime(0);\n  };\n\n  return (\n    <div>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td> {/* Removed the input field for name */}\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <button onClick={() => handleSetTime(employee.id, date)}>Set Time</button>\n                  <div>\n                    {timesheetData[employee.id]?.[date] && (\n                      <div>\n                        <span>{`From ${timesheetData[employee.id][date].startTime} - ${timesheetData[employee.id][date].endTime}`}</span>\n                        <span>{`Total Time: ${timesheetData[employee.id][date].totalTime} hours`}</span>\n                        <span>{`Overtime: ${timesheetData[employee.id][date].overtime} hours`}</span>\n                      </div>\n                    )}\n                  </div>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {modalOpen && (\n        <div className=\"modal\">\n          <h2>Set Time for {selectedEmployee} on {selectedDate}</h2>\n          <input \n            type=\"time\" \n            value={startTime} \n            onChange={(e) => setStartTime(e.target.value)} \n          />\n          <input \n            type=\"time\" \n            value={endTime} \n            onChange={(e) => setEndTime(e.target.value)} \n          />\n          <button onClick={() => calculateTotalTime(startTime, endTime)}>\n            Calculate Time\n          </button>\n          <div>\n            <span>Total Time: {totalTime} hours</span>\n            <span>Overtime: {overtime} hours</span>\n          </div>\n          <button onClick={() => handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime, overtime)}>Save</button>\n          <button onClick={handleCloseModal}>Cancel</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}