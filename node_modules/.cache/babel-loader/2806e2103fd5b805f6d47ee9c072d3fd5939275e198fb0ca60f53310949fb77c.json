{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\nimport * as XLSX from \"xlsx\"; // Import the xlsx library\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = () => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n\n  const [sortOrder, setSortOrder] = useState(\"asc\"); // Initial sorting order: ascending\n  const [sortBy, setSortBy] = useState(\"totalTime\"); // Default sorting by total time\n\n  const [expandedRows, setExpandedRows] = useState({});\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n  const [today, setToday] = useState(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1; // JS months are 0-indexed\n    const day = now.getDate();\n    return `${month}-${day < 10 ? '0' + day : day}`; // Format MM-DD\n  });\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), snapshot => {\n        const employeeData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, snapshot => {\n        const updatedTimesheetData = {};\n        snapshot.forEach(doc => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    var _timesheetData$employ, _timesheetData$employ2, _timesheetData$employ3, _timesheetData$employ4, _timesheetData$employ5, _timesheetData$employ6;\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(((_timesheetData$employ = timesheetData[employeeId]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.startTime) || \"\");\n    setEndTime(((_timesheetData$employ3 = timesheetData[employeeId]) === null || _timesheetData$employ3 === void 0 ? void 0 : (_timesheetData$employ4 = _timesheetData$employ3[date]) === null || _timesheetData$employ4 === void 0 ? void 0 : _timesheetData$employ4.endTime) || \"\");\n    setIsHoliday(((_timesheetData$employ5 = timesheetData[employeeId]) === null || _timesheetData$employ5 === void 0 ? void 0 : (_timesheetData$employ6 = _timesheetData$employ5[date]) === null || _timesheetData$employ6 === void 0 ? void 0 : _timesheetData$employ6.isHoliday) || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = event => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = event => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n  // Toggle holiday status\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n    if (newIsHoliday) {\n      // If it's a holiday, reset normal time, night shift time, and total time\n      setNormalTime(0);\n      setNightShiftHours(0);\n      setTotalTime(totalTime);\n      setHolidayTime(totalTime); // The holiday time becomes the total time worked\n    } else {\n      // If it's not a holiday, recalculate times\n      calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n    }\n  };\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n\n    // Convert startDate and endDate to Date objects if necessary\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    const nightShiftStartHour = 22; // 10:00 PM\n    const nightShiftEndHour = 6; // 6:00 AM (next day)\n\n    // Initialize nightShiftHours to 0\n    let nightShiftHours = 0;\n\n    // Convert start and end times to decimal hours for easier calculations\n    let startTime = startDate.getHours() + startDate.getMinutes() / 60;\n    let endTime = endDate.getHours() + endDate.getMinutes() / 60;\n\n    // Case 1: Entire shift is within the night shift period (10 PM to 6 AM)\n    if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) && (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n      nightShiftHours = (endDate - startDate) / (1000 * 60 * 60); // Entire shift is within night shift\n    }\n    // Case 2: Shift starts before 10 PM and ends during or after the night shift (crosses into night shift)\n    else if (startTime < nightShiftStartHour && (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n      // Calculate hours from 10 PM to end time for night shift\n      let nightShiftStartTime = new Date(startDate);\n      nightShiftStartTime.setHours(nightShiftStartHour, 0, 0); // Set to 10:00 PM\n      nightShiftHours = (endDate - nightShiftStartTime) / (1000 * 60 * 60); // Hours from 10 PM onwards\n    }\n    // Case 3: Shift starts during the night shift and ends after 6 AM (crosses out of night shift)\n    else if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) && endTime >= nightShiftEndHour) {\n      let nightShiftEndTime = new Date(startDate);\n      nightShiftEndTime.setHours(nightShiftEndHour, 0, 0); // Set to 6:00 AM\n      nightShiftHours = (nightShiftEndTime - startDate) / (1000 * 60 * 60); // Hours until 6 AM\n    }\n    // Case 4: No night shift overlap (shift is entirely outside 10 PM to 6 AM)\n    else {\n      nightShiftHours = 0; // No night shift overlap\n    }\n    setTotalTime(totalTimeInHours.toFixed(1));\n    setNightShiftHours(nightShiftHours.toFixed(1));\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(1));\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(1));\n  };\n\n  // Save timesheet data to Firestore\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      var _await$getDoc$data;\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = ((_await$getDoc$data = (await getDoc(timesheetDocRef)).data()) === null || _await$getDoc$data === void 0 ? void 0 : _await$getDoc$data.hours) || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShiftHours),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday\n      };\n      await setDoc(timesheetDocRef, {\n        hours: timesheetData\n      });\n      setModalOpen(false);\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Calculate monthly totals for an employee\n  const calculateMonthlyTotal = employeeId => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0,\n      totalTime: 0\n    };\n    const monthDays = generateMonthDays(currentYear, currentMonth);\n    monthDays.forEach(date => {\n      var _timesheetData$employ7;\n      const data = (_timesheetData$employ7 = timesheetData[employeeId]) === null || _timesheetData$employ7 === void 0 ? void 0 : _timesheetData$employ7[date];\n      if (data) {\n        monthlyTotal.normalTime += data.normalTime || 0;\n        monthlyTotal.nightShift += data.nightShift || 0;\n        monthlyTotal.holidayTime += data.holidayTime || 0;\n        monthlyTotal.totalTime += data.totalTime || 0;\n      }\n    });\n    return monthlyTotal;\n  };\n\n  // Change to previous month\n  const goToPreviousMonth = () => {\n    setCurrentMonth(prevMonth => prevMonth === 0 ? 11 : prevMonth - 1);\n    if (currentMonth === 0) setCurrentYear(currentYear - 1); // Handle year change\n  };\n\n  // Change to next month\n  const goToNextMonth = () => {\n    setCurrentMonth(prevMonth => prevMonth === 11 ? 0 : prevMonth + 1);\n    if (currentMonth === 11) setCurrentYear(currentYear + 1); // Handle year change\n  };\n  const getColorForWorkedHours = (totalWorkedHours, expectedHours) => {\n    const diff = totalWorkedHours - expectedHours; // Difference from expected hours\n\n    if (diff >= -10 && diff <= 10) {\n      // Green range: -10 <= diff <= 10\n      const greenIntensity = Math.round(155 + 100 * (10 - Math.abs(diff)) / 10); // 155 to 255\n      return `rgb(0, ${greenIntensity}, 0)`; // Shades from dark green to bright green\n    } else if (diff < -10) {\n      // Red range: diff < -10 (underperformance)\n      const adjustedDiff = Math.min(Math.abs(diff) - 10, 50); // Scaling factor\n      const redIntensity = Math.round(100 + 155 * adjustedDiff / 50); // 100 to 255 (more dramatic red)\n      return `rgb(${redIntensity}, 0, -1)`; // Shades from dark red to bright red\n    } else {\n      // Yellow range: diff > 10 (overperformance)\n      const adjustedDiff = Math.min(diff - 10, 40); // Scaling factor\n      const yellowIntensity = Math.round(155 + 100 * adjustedDiff / 40); // 155 to 255\n      return `rgb(${yellowIntensity}, ${yellowIntensity}, 0)`; // Shades from dark yellow to bright yellow\n    }\n  };\n\n  // Get the days for the selected month\n  const monthDays = generateMonthDays(currentYear, currentMonth);\n  const handleSort = column => {\n    const newSortOrder = sortBy === column && sortOrder === \"asc\" ? \"desc\" : \"asc\"; // Toggle sort order\n    setSortBy(column); // Set the column to sort by\n    setSortOrder(newSortOrder); // Update the sort order\n\n    // Sort the employees based on the selected column and order\n    const sortedEmployees = [...employees].sort((a, b) => {\n      const totalA = calculateMonthlyTotal(a.id)[column];\n      const totalB = calculateMonthlyTotal(b.id)[column];\n      if (newSortOrder === \"asc\") {\n        return totalA - totalB;\n      } else {\n        return totalB - totalA;\n      }\n    });\n    setEmployees(sortedEmployees); // Set the sorted employees list\n  };\n  const exportToExcel = () => {\n    // Prepare the data for export\n    const sheetData = [];\n\n    // Header row without the \"Date:\" prefix\n    const headerRow = [\"Employee Name\", \"Shift Type\", ...monthDays.map(date => date), \"Total\"];\n    sheetData.push(headerRow);\n\n    // Create an array to hold the merges\n    const merges = [];\n\n    // Iterate through the employees and their timesheet data\n    employees.forEach(employee => {\n      const monthlyTotal = calculateMonthlyTotal(employee.id);\n\n      // Create a row for each shift type (Regular, Night, Holiday, Total)\n      const rows = [{\n        shiftType: \"Regular\",\n        data: monthDays.map(date => {\n          var _timesheetData$employ8;\n          const data = (_timesheetData$employ8 = timesheetData[employee.id]) === null || _timesheetData$employ8 === void 0 ? void 0 : _timesheetData$employ8[date];\n          return data ? data.normalTime.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.normalTime.toFixed(1)\n      }, {\n        shiftType: \"Night\",\n        data: monthDays.map(date => {\n          var _timesheetData$employ9;\n          const data = (_timesheetData$employ9 = timesheetData[employee.id]) === null || _timesheetData$employ9 === void 0 ? void 0 : _timesheetData$employ9[date];\n          return data ? data.nightShift.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.nightShift.toFixed(1)\n      }, {\n        shiftType: \"Holiday\",\n        data: monthDays.map(date => {\n          var _timesheetData$employ10;\n          const data = (_timesheetData$employ10 = timesheetData[employee.id]) === null || _timesheetData$employ10 === void 0 ? void 0 : _timesheetData$employ10[date];\n          return data ? data.holidayTime.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.holidayTime.toFixed(1)\n      }, {\n        shiftType: \"Total\",\n        data: monthDays.map(date => {\n          var _timesheetData$employ11;\n          const data = (_timesheetData$employ11 = timesheetData[employee.id]) === null || _timesheetData$employ11 === void 0 ? void 0 : _timesheetData$employ11[date];\n          return data ? data.totalTime.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.totalTime.toFixed(1)\n      }];\n\n      // For each shift type, add a row and also merge the \"Employee Name\" cell for all related rows\n      let startRow = sheetData.length;\n      rows.forEach((row, index) => {\n        const newRow = [index === 0 ? employee.name : \"\",\n        // Merge the \"Employee Name\" across rows\n        row.shiftType, ...row.data, row.total];\n        sheetData.push(newRow);\n\n        // If it's the first row for this employee, mark the merge range\n        if (index === 0) {\n          merges.push({\n            s: {\n              r: startRow,\n              c: 0\n            },\n            // Start row and column (Employee Name column)\n            e: {\n              r: startRow + rows.length - 1,\n              c: 0\n            } // End row and column (same column, spanning rows)\n          });\n        }\n\n        // Highlight the \"Total\" row with a specific background color\n        if (row.shiftType === \"Total\") {\n          // Add background color for \"Total\" row (assuming this is index 3)\n          const lastRow = sheetData.length - 1;\n          for (let col = 0; col < sheetData[lastRow].length; col++) {\n            // Set the cell value and its style\n            sheetData[lastRow][col] = {\n              v: sheetData[lastRow][col],\n              s: {\n                fill: {\n                  fgColor: {\n                    rgb: \"FFFF00\"\n                  }\n                }\n              } // Yellow background\n            };\n          }\n        }\n      });\n    });\n\n    // Create a worksheet and workbook from the data\n    const ws = XLSX.utils.aoa_to_sheet(sheetData);\n\n    // Add the merge instruction to the worksheet\n    ws['!merges'] = merges;\n\n    // Create the workbook\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"Timesheets\");\n\n    // Export the workbook to Excel\n    XLSX.writeFile(wb, \"timesheet_data.xlsx\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"month-navigation\",\n      style: {\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToPreviousMonth,\n        children: \"Previous Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: new Date(currentYear, currentMonth).toLocaleString('default', {\n          month: 'long',\n          year: 'numeric'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToNextMonth,\n        children: \"Next Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToExcel,\n        style: {\n          padding: \"10px\",\n          fontSize: \"15px\",\n          backgroundColor: \"#4CAF50\",\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\",\n          position: \"absolute\",\n          right: \"10px\",\n          // Align to the right edge\n          top: \"0px\" // Position below the month navigation\n        },\n        children: \"Export to Excel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Shift\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 7\n          }, this), monthDays.map((date, index) => {\n            // Check if it's today's date\n            const isToday = date === today;\n            return /*#__PURE__*/_jsxDEV(\"th\", {\n              className: isToday ? \"highlight-today\" : \"\",\n              children: parseInt(date.split('-')[1], 10)\n            }, date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 11\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort(\"totalTime\") // Call the sort handler on click\n            ,\n            style: {\n              cursor: \"pointer\"\n            },\n            children: [\"Monthly Total \", sortBy === \"totalTime\" ? sortOrder === \"asc\" ? \"↑\" : \"↓\" : \"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map((employee, employeeIndex) => {\n          const monthlyTotal = calculateMonthlyTotal(employee.id);\n\n          // Filter the monthDays to get only the days up until today\n          const filteredDays = monthDays.filter(date => new Date(date) <= new Date(today));\n\n          // Calculate the number of weekdays (excluding weekends) up until today\n          const expectedWeekdays = filteredDays.filter(date => {\n            const day = new Date(date).getDay(); // Get the day of the week (0 = Sunday, 6 = Saturday)\n            return day !== 0 && day !== 6; // Only weekdays (exclude weekends)\n          }).length;\n\n          // Calculate the total expected hours up until today (expected weekdays * 8 hours per day)\n          const totalExpectedHours = expectedWeekdays * 8;\n\n          // Calculate the total worked hours up until today\n          const totalWorkedHours = filteredDays.reduce((acc, date) => {\n            var _timesheetData$employ12;\n            const employeeData = ((_timesheetData$employ12 = timesheetData[employee.id]) === null || _timesheetData$employ12 === void 0 ? void 0 : _timesheetData$employ12[date]) || {};\n            return acc + (employeeData.normalTime || 0) + (employeeData.nightShift || 0) + (employeeData.holidayTime || 0);\n          }, 0);\n\n          // Determine if the total worked hours meet or exceed the expected hours\n          const isOnTrack = totalWorkedHours >= totalExpectedHours;\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              className: `row ${employeeIndex % 2 === 0 ? \"odd-row\" : \"even-row\"}`,\n              style: {\n                backgroundColor: \"lightgreen\"\n              } // Example for Regular\n              ,\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                rowSpan: 4,\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: employee.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 491,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Regular\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 492,\n                columnNumber: 9\n              }, this), monthDays.map(date => {\n                var _timesheetData$employ13, _timesheetData$employ14, _timesheetData$employ15, _timesheetData$employ16;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  onClick: () => handleSetTime(employee.id, date),\n                  className: date === today ? \"highlight-today\" : \"\",\n                  children: ((_timesheetData$employ13 = timesheetData[employee.id]) === null || _timesheetData$employ13 === void 0 ? void 0 : (_timesheetData$employ14 = _timesheetData$employ13[date]) === null || _timesheetData$employ14 === void 0 ? void 0 : _timesheetData$employ14.normalTime) === 0 ? \"0\" : (_timesheetData$employ15 = timesheetData[employee.id]) !== null && _timesheetData$employ15 !== void 0 && (_timesheetData$employ16 = _timesheetData$employ15[date]) !== null && _timesheetData$employ16 !== void 0 && _timesheetData$employ16.normalTime ? `${timesheetData[employee.id][date].normalTime.toFixed(1)}` : \"\"\n                }, date, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 494,\n                  columnNumber: 13\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: monthlyTotal.normalTime.toFixed(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: `row ${employeeIndex % 2 === 0 ? \"odd-row\" : \"even-row\"}`,\n              style: {\n                backgroundColor: \"lightblue\"\n              } // Example for Night\n              ,\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Night\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 11\n              }, this), monthDays.map(date => {\n                var _timesheetData$employ17, _timesheetData$employ18, _timesheetData$employ19, _timesheetData$employ20;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  onClick: () => handleSetTime(employee.id, date),\n                  className: date === today ? \"highlight-today\" : \"\",\n                  children: ((_timesheetData$employ17 = timesheetData[employee.id]) === null || _timesheetData$employ17 === void 0 ? void 0 : (_timesheetData$employ18 = _timesheetData$employ17[date]) === null || _timesheetData$employ18 === void 0 ? void 0 : _timesheetData$employ18.nightShift) === 0 ? \"0\" : (_timesheetData$employ19 = timesheetData[employee.id]) !== null && _timesheetData$employ19 !== void 0 && (_timesheetData$employ20 = _timesheetData$employ19[date]) !== null && _timesheetData$employ20 !== void 0 && _timesheetData$employ20.nightShift ? `${timesheetData[employee.id][date].nightShift.toFixed(1)}` : \"\"\n                }, date, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 516,\n                  columnNumber: 13\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: monthlyTotal.nightShift.toFixed(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 528,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: `row ${employeeIndex % 2 === 0 ? \"odd-row\" : \"even-row\"}`,\n              style: {\n                backgroundColor: \"lightcoral\"\n              } // Example for Holiday\n              ,\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Holiday\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 536,\n                columnNumber: 11\n              }, this), monthDays.map(date => {\n                var _timesheetData$employ21, _timesheetData$employ22, _timesheetData$employ23, _timesheetData$employ24;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  onClick: () => handleSetTime(employee.id, date),\n                  className: date === today ? \"highlight-today\" : \"\",\n                  children: ((_timesheetData$employ21 = timesheetData[employee.id]) === null || _timesheetData$employ21 === void 0 ? void 0 : (_timesheetData$employ22 = _timesheetData$employ21[date]) === null || _timesheetData$employ22 === void 0 ? void 0 : _timesheetData$employ22.holidayTime) === 0 ? \"0\" : (_timesheetData$employ23 = timesheetData[employee.id]) !== null && _timesheetData$employ23 !== void 0 && (_timesheetData$employ24 = _timesheetData$employ23[date]) !== null && _timesheetData$employ24 !== void 0 && _timesheetData$employ24.holidayTime ? `${timesheetData[employee.id][date].holidayTime.toFixed(1)}` : \"\"\n                }, date, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 538,\n                  columnNumber: 13\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: monthlyTotal.holidayTime.toFixed(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              style: {\n                backgroundColor: getColorForWorkedHours(totalWorkedHours, totalExpectedHours)\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 557,\n                columnNumber: 11\n              }, this), monthDays.map(date => {\n                var _timesheetData$employ25, _timesheetData$employ26, _timesheetData$employ27, _timesheetData$employ28;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  onClick: () => handleSetTime(employee.id, date),\n                  className: date === today ? \"highlight-today\" : \"\",\n                  children: ((_timesheetData$employ25 = timesheetData[employee.id]) === null || _timesheetData$employ25 === void 0 ? void 0 : (_timesheetData$employ26 = _timesheetData$employ25[date]) === null || _timesheetData$employ26 === void 0 ? void 0 : _timesheetData$employ26.totalTime) === 0 ? \"0\" : (_timesheetData$employ27 = timesheetData[employee.id]) !== null && _timesheetData$employ27 !== void 0 && (_timesheetData$employ28 = _timesheetData$employ27[date]) !== null && _timesheetData$employ28 !== void 0 && _timesheetData$employ28.totalTime ? `${timesheetData[employee.id][date].totalTime.toFixed(1)}` : \"\"\n                }, date, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 559,\n                  columnNumber: 13\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: monthlyTotal.totalTime.toFixed(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 571,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 9\n            }, this)]\n          }, employee.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 7\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal1\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content1\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"modal-heading1\",\n          children: \"Timesheet Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-container1\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label1\",\n            children: [\"Start Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: startTime,\n              onChange: handleStartTimeChange,\n              className: \"input-field1\",\n              placeholder: \"hh:mm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label1\",\n            children: [\"End Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: endTime,\n              onChange: handleEndTimeChange,\n              className: \"input-field1\",\n              placeholder: \"hh:mm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"checkbox-container1\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"checkbox-label1\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Next Day:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 611,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: nextDay,\n                onChange: handleNextDayToggle,\n                className: \"checkbox-input1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"checkbox-label1\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Is Holiday:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 621,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: isHoliday,\n                onChange: handleHolidayToggle,\n                className: \"checkbox-input1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 622,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 620,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-summary1\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Time: \", totalTime, \" hours\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Night Shift Hours: \", nightShiftHours, \" hours\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 633,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Normal Time: \", normalTime, \" hours\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 634,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Holiday Time: \", holidayTime, \" hours\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-actions1\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: saveTimesheetDataToFirebase,\n              className: \"save-btn1\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"close-btn1\",\n              onClick: () => setModalOpen(false),\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 410,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"p4xc8KPCnrjln6WGjPjUJ9AQcpg=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","onSnapshot","doc","setDoc","getDoc","db","XLSX","jsxDEV","_jsxDEV","TimesheetList","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","nextDay","setNextDay","isHoliday","setIsHoliday","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","holidayTime","setHolidayTime","normalTime","setNormalTime","currentMonth","setCurrentMonth","Date","getMonth","currentYear","setCurrentYear","getFullYear","sortOrder","setSortOrder","sortBy","setSortBy","expandedRows","setExpandedRows","generateMonthDays","year","month","daysInMonth","getDate","days","day","push","today","setToday","now","fetchEmployees","unsubscribe","snapshot","employeeData","docs","map","id","data","fetchTimesheetData","timesheetDataRef","updatedTimesheetData","forEach","employeeId","hours","date","record","Object","entries","parseFloat","nightShift","Boolean","handleSetTime","_timesheetData$employ","_timesheetData$employ2","_timesheetData$employ3","_timesheetData$employ4","_timesheetData$employ5","_timesheetData$employ6","handleStartTimeChange","event","newStartTime","target","value","calculateTimes","handleEndTimeChange","newEndTime","handleNextDayToggle","newNextDay","handleHolidayToggle","newIsHoliday","start","end","isNextDay","startHours","startMinutes","split","Number","endHours","endMinutes","startDate","setHours","endDate","setDate","totalTimeInHours","nightShiftStartHour","nightShiftEndHour","getHours","getMinutes","nightShiftStartTime","nightShiftEndTime","toFixed","saveTimesheetDataToFirebase","_await$getDoc$data","timesheetDocRef","error","console","calculateMonthlyTotal","monthlyTotal","monthDays","_timesheetData$employ7","goToPreviousMonth","prevMonth","goToNextMonth","getColorForWorkedHours","totalWorkedHours","expectedHours","diff","greenIntensity","Math","round","abs","adjustedDiff","min","redIntensity","yellowIntensity","handleSort","column","newSortOrder","sortedEmployees","sort","a","b","totalA","totalB","exportToExcel","sheetData","headerRow","merges","employee","rows","shiftType","_timesheetData$employ8","total","_timesheetData$employ9","_timesheetData$employ10","_timesheetData$employ11","startRow","length","row","index","newRow","name","s","r","c","e","lastRow","col","v","fill","fgColor","rgb","ws","utils","aoa_to_sheet","wb","book_new","book_append_sheet","writeFile","children","className","style","position","onClick","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","padding","fontSize","backgroundColor","color","border","cursor","right","top","isToday","parseInt","employeeIndex","filteredDays","filter","expectedWeekdays","getDay","totalExpectedHours","reduce","acc","_timesheetData$employ12","isOnTrack","Fragment","rowSpan","_timesheetData$employ13","_timesheetData$employ14","_timesheetData$employ15","_timesheetData$employ16","_timesheetData$employ17","_timesheetData$employ18","_timesheetData$employ19","_timesheetData$employ20","_timesheetData$employ21","_timesheetData$employ22","_timesheetData$employ23","_timesheetData$employ24","_timesheetData$employ25","_timesheetData$employ26","_timesheetData$employ27","_timesheetData$employ28","type","onChange","placeholder","checked","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\nimport * as XLSX from \"xlsx\"; // Import the xlsx library\n\n\nconst TimesheetList = () => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n\n  const [sortOrder, setSortOrder] = useState(\"asc\"); // Initial sorting order: ascending\n  const [sortBy, setSortBy] = useState(\"totalTime\"); // Default sorting by total time\n\n  const [expandedRows, setExpandedRows] = useState({});\n\n\n  \n  \n\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n\n  const [today, setToday] = useState(() => {\n  const now = new Date();\n  const month = now.getMonth() + 1; // JS months are 0-indexed\n  const day = now.getDate();\n  return `${month}-${day < 10 ? '0' + day : day}`; // Format MM-DD\n});\n\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), (snapshot) => {\n        const employeeData = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, (snapshot) => {\n        const updatedTimesheetData = {};\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0,\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(timesheetData[employeeId]?.[date]?.startTime || \"\");\n    setEndTime(timesheetData[employeeId]?.[date]?.endTime || \"\");\n    setIsHoliday(timesheetData[employeeId]?.[date]?.isHoliday || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = (event) => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = (event) => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n// Toggle holiday status\nconst handleHolidayToggle = () => {\n  const newIsHoliday = !isHoliday;\n  setIsHoliday(newIsHoliday);\n\n  if (newIsHoliday) {\n    // If it's a holiday, reset normal time, night shift time, and total time\n    setNormalTime(0);\n    setNightShiftHours(0);\n    setTotalTime(totalTime);\n    setHolidayTime(totalTime); // The holiday time becomes the total time worked\n  } else {\n    // If it's not a holiday, recalculate times\n    calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n  }\n};\n\n\n\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n\n// Convert startDate and endDate to Date objects if necessary\nconst totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n\n\nconst nightShiftStartHour = 22;  // 10:00 PM\nconst nightShiftEndHour = 6;  // 6:00 AM (next day)\n\n// Initialize nightShiftHours to 0\nlet nightShiftHours = 0;\n\n// Convert start and end times to decimal hours for easier calculations\nlet startTime = startDate.getHours() + startDate.getMinutes() / 60;\nlet endTime = endDate.getHours() + endDate.getMinutes() / 60;\n\n// Case 1: Entire shift is within the night shift period (10 PM to 6 AM)\nif ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) &&\n    (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n  nightShiftHours = (endDate - startDate) / (1000 * 60 * 60);  // Entire shift is within night shift\n}\n// Case 2: Shift starts before 10 PM and ends during or after the night shift (crosses into night shift)\nelse if (startTime < nightShiftStartHour && (endTime >= nightShiftStartHour || endTime < nightShiftEndHour)) {\n  // Calculate hours from 10 PM to end time for night shift\n  let nightShiftStartTime = new Date(startDate);\n  nightShiftStartTime.setHours(nightShiftStartHour, 0, 0);  // Set to 10:00 PM\n  nightShiftHours = (endDate - nightShiftStartTime) / (1000 * 60 * 60);  // Hours from 10 PM onwards\n}\n// Case 3: Shift starts during the night shift and ends after 6 AM (crosses out of night shift)\nelse if ((startTime >= nightShiftStartHour || startTime < nightShiftEndHour) && endTime >= nightShiftEndHour) {\n  let nightShiftEndTime = new Date(startDate);\n  nightShiftEndTime.setHours(nightShiftEndHour, 0, 0);  // Set to 6:00 AM\n  nightShiftHours = (nightShiftEndTime - startDate) / (1000 * 60 * 60);  // Hours until 6 AM\n}\n// Case 4: No night shift overlap (shift is entirely outside 10 PM to 6 AM)\nelse {\n  nightShiftHours = 0;  // No night shift overlap\n}\n\n    setTotalTime(totalTimeInHours.toFixed(1));\n    setNightShiftHours(nightShiftHours.toFixed(1));\n\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(1));\n\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(1));\n  };\n\n  // Save timesheet data to Firestore\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = (await getDoc(timesheetDocRef)).data()?.hours || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShiftHours),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday,\n      };\n      await setDoc(timesheetDocRef, { hours: timesheetData });\n      setModalOpen(false);\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Calculate monthly totals for an employee\n  const calculateMonthlyTotal = (employeeId) => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0,\n      totalTime: 0,\n    };\n\n    const monthDays = generateMonthDays(currentYear, currentMonth);\n    monthDays.forEach((date) => {\n      const data = timesheetData[employeeId]?.[date];\n      if (data) {\n        monthlyTotal.normalTime += data.normalTime || 0;\n        monthlyTotal.nightShift += data.nightShift || 0;\n        monthlyTotal.holidayTime += data.holidayTime || 0;\n        monthlyTotal.totalTime += data.totalTime || 0;\n      }\n    });\n\n    return monthlyTotal;\n  };\n\n  // Change to previous month\n  const goToPreviousMonth = () => {\n    setCurrentMonth((prevMonth) => (prevMonth === 0 ? 11 : prevMonth - 1));\n    if (currentMonth === 0) setCurrentYear(currentYear - 1); // Handle year change\n  };\n\n  // Change to next month\n  const goToNextMonth = () => {\n    setCurrentMonth((prevMonth) => (prevMonth === 11 ? 0 : prevMonth + 1));\n    if (currentMonth === 11) setCurrentYear(currentYear + 1); // Handle year change\n  };\n\n\n\n  const getColorForWorkedHours = (totalWorkedHours, expectedHours) => {\n    const diff = totalWorkedHours - expectedHours; // Difference from expected hours\n  \n    if (diff >= -10 && diff <= 10) {\n      // Green range: -10 <= diff <= 10\n      const greenIntensity = Math.round(155 + (100 * (10 - Math.abs(diff)) / 10)); // 155 to 255\n      return `rgb(0, ${greenIntensity}, 0)`; // Shades from dark green to bright green\n    } else if (diff < -10) {\n      // Red range: diff < -10 (underperformance)\n      const adjustedDiff = Math.min(Math.abs(diff) - 10, 50); // Scaling factor\n      const redIntensity = Math.round(100 + (155 * adjustedDiff / 50)); // 100 to 255 (more dramatic red)\n      return `rgb(${redIntensity}, 0, -1)`; // Shades from dark red to bright red\n    } else {\n      // Yellow range: diff > 10 (overperformance)\n      const adjustedDiff = Math.min(diff - 10, 40); // Scaling factor\n      const yellowIntensity = Math.round(155 + (100 * adjustedDiff / 40)); // 155 to 255\n      return `rgb(${yellowIntensity}, ${yellowIntensity}, 0)`; // Shades from dark yellow to bright yellow\n    }\n  };\n\n  // Get the days for the selected month\n  const monthDays = generateMonthDays(currentYear, currentMonth);\n\n\n  const handleSort = (column) => {\n  const newSortOrder = sortBy === column && sortOrder === \"asc\" ? \"desc\" : \"asc\"; // Toggle sort order\n  setSortBy(column); // Set the column to sort by\n  setSortOrder(newSortOrder); // Update the sort order\n\n  // Sort the employees based on the selected column and order\n  const sortedEmployees = [...employees].sort((a, b) => {\n    const totalA = calculateMonthlyTotal(a.id)[column];\n    const totalB = calculateMonthlyTotal(b.id)[column];\n\n    if (newSortOrder === \"asc\") {\n      return totalA - totalB;\n    } else {\n      return totalB - totalA;\n    }\n  });\n  setEmployees(sortedEmployees); // Set the sorted employees list\n};\nconst exportToExcel = () => {\n  // Prepare the data for export\n  const sheetData = [];\n  \n  // Header row without the \"Date:\" prefix\n  const headerRow = [\"Employee Name\", \"Shift Type\", ...monthDays.map(date => date), \"Total\"];\n  sheetData.push(headerRow);\n\n  // Create an array to hold the merges\n  const merges = [];\n\n  // Iterate through the employees and their timesheet data\n  employees.forEach((employee) => {\n    const monthlyTotal = calculateMonthlyTotal(employee.id);\n    \n    // Create a row for each shift type (Regular, Night, Holiday, Total)\n    const rows = [\n      {\n        shiftType: \"Regular\",\n        data: monthDays.map(date => {\n          const data = timesheetData[employee.id]?.[date];\n          return data ? data.normalTime.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.normalTime.toFixed(1),\n      },\n      {\n        shiftType: \"Night\",\n        data: monthDays.map(date => {\n          const data = timesheetData[employee.id]?.[date];\n          return data ? data.nightShift.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.nightShift.toFixed(1),\n      },\n      {\n        shiftType: \"Holiday\",\n        data: monthDays.map(date => {\n          const data = timesheetData[employee.id]?.[date];\n          return data ? data.holidayTime.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.holidayTime.toFixed(1),\n      },\n      {\n        shiftType: \"Total\",\n        data: monthDays.map(date => {\n          const data = timesheetData[employee.id]?.[date];\n          return data ? data.totalTime.toFixed(1) : \"0\";\n        }),\n        total: monthlyTotal.totalTime.toFixed(1),\n      }\n    ];\n\n    // For each shift type, add a row and also merge the \"Employee Name\" cell for all related rows\n    let startRow = sheetData.length;\n    rows.forEach((row, index) => {\n      const newRow = [\n        index === 0 ? employee.name : \"\", // Merge the \"Employee Name\" across rows\n        row.shiftType,\n        ...row.data,\n        row.total,\n      ];\n      sheetData.push(newRow);\n      \n      // If it's the first row for this employee, mark the merge range\n      if (index === 0) {\n        merges.push({\n          s: { r: startRow, c: 0 }, // Start row and column (Employee Name column)\n          e: { r: startRow + rows.length - 1, c: 0 } // End row and column (same column, spanning rows)\n        });\n      }\n\n      // Highlight the \"Total\" row with a specific background color\n      if (row.shiftType === \"Total\") {\n        // Add background color for \"Total\" row (assuming this is index 3)\n        const lastRow = sheetData.length - 1;\n        for (let col = 0; col < sheetData[lastRow].length; col++) {\n          // Set the cell value and its style\n          sheetData[lastRow][col] = {\n            v: sheetData[lastRow][col], \n            s: { fill: { fgColor: { rgb: \"FFFF00\" } } } // Yellow background\n          };\n        }\n      }\n    });\n  });\n\n  // Create a worksheet and workbook from the data\n  const ws = XLSX.utils.aoa_to_sheet(sheetData);\n  \n  // Add the merge instruction to the worksheet\n  ws['!merges'] = merges;\n\n  // Create the workbook\n  const wb = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(wb, ws, \"Timesheets\");\n\n  // Export the workbook to Excel\n  XLSX.writeFile(wb, \"timesheet_data.xlsx\");\n};\n\n\n\n  return (\n    <div>\n    <div className=\"month-navigation\" style={{ position: \"relative\" }}>\n      <button onClick={goToPreviousMonth}>Previous Month</button>\n      <span>{new Date(currentYear, currentMonth).toLocaleString('default', { month: 'long', year: 'numeric' })}</span>\n      <button onClick={goToNextMonth}>Next Month</button>\n\n      <button \n        onClick={exportToExcel}\n        style={{\n          padding: \"10px\",\n          fontSize: \"15px\", \n          backgroundColor: \"#4CAF50\",\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\",\n          position: \"absolute\",\n          right: \"10px\",  // Align to the right edge\n          top: \"0px\"     // Position below the month navigation\n        }}\n      >\n        Export to Excel\n      </button>\n    </div>\n      <table border=\"1\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Shift</th>\n      {monthDays.map((date, index) => {\n        // Check if it's today's date\n        const isToday = date === today;\n        return (\n          <th\n            key={date}\n            className={isToday ? \"highlight-today\" : \"\"}\n          >\n            {parseInt(date.split('-')[1], 10)}\n          </th>\n        );\n      })}\n      <th\n  onClick={() => handleSort(\"totalTime\")} // Call the sort handler on click\n  style={{ cursor: \"pointer\" }}\n>\n  Monthly Total {sortBy === \"totalTime\" ? (sortOrder === \"asc\" ? \"↑\" : \"↓\") : \"\"}\n</th>\n\n    </tr>\n  </thead>\n  <tbody>\n  {employees.map((employee, employeeIndex) => {\n    const monthlyTotal = calculateMonthlyTotal(employee.id);\n\n    // Filter the monthDays to get only the days up until today\n    const filteredDays = monthDays.filter(date => new Date(date) <= new Date(today));\n\n    // Calculate the number of weekdays (excluding weekends) up until today\n    const expectedWeekdays = filteredDays.filter(date => {\n      const day = new Date(date).getDay(); // Get the day of the week (0 = Sunday, 6 = Saturday)\n      return day !== 0 && day !== 6; // Only weekdays (exclude weekends)\n    }).length;\n\n    // Calculate the total expected hours up until today (expected weekdays * 8 hours per day)\n    const totalExpectedHours = expectedWeekdays * 8;\n\n    // Calculate the total worked hours up until today\n    const totalWorkedHours = filteredDays.reduce((acc, date) => {\n      const employeeData = timesheetData[employee.id]?.[date] || {};\n      return acc + (employeeData.normalTime || 0) + (employeeData.nightShift || 0) + (employeeData.holidayTime || 0);\n    }, 0);\n\n    // Determine if the total worked hours meet or exceed the expected hours\n    const isOnTrack = totalWorkedHours >= totalExpectedHours;\n    return (\n      <React.Fragment key={employee.id}>\n        <tr\n          className={`row ${\n            employeeIndex % 2 === 0 ? \"odd-row\" : \"even-row\"\n          }`}\n          style={{ backgroundColor: \"lightgreen\" }} // Example for Regular\n        >\n        <td rowSpan={4}><strong>{employee.name}</strong></td>\n        <td>Regular</td>\n          {monthDays.map((date) => (\n            <td\n              key={date}\n              onClick={() => handleSetTime(employee.id, date)}\n              className={date === today ? \"highlight-today\" : \"\"}\n            >\n              {timesheetData[employee.id]?.[date]?.normalTime === 0\n                ? \"0\"\n                : timesheetData[employee.id]?.[date]?.normalTime\n                ? `${timesheetData[employee.id][date].normalTime.toFixed(1)}`\n                : \"\"}\n            </td>\n          ))}\n          <td>{monthlyTotal.normalTime.toFixed(1)}</td>\n        </tr>\n        <tr\n          className={`row ${\n            employeeIndex % 2 === 0 ? \"odd-row\" : \"even-row\"\n          }`}\n          style={{ backgroundColor: \"lightblue\" }} // Example for Night\n        >\n          <td>Night</td>\n          {monthDays.map((date) => (\n            <td\n              key={date}\n              onClick={() => handleSetTime(employee.id, date)}\n              className={date === today ? \"highlight-today\" : \"\"}\n            >\n              {timesheetData[employee.id]?.[date]?.nightShift === 0\n                ? \"0\"\n                : timesheetData[employee.id]?.[date]?.nightShift\n                ? `${timesheetData[employee.id][date].nightShift.toFixed(1)}`\n                : \"\"}\n            </td>\n          ))}\n          <td>{monthlyTotal.nightShift.toFixed(1)}</td>\n        </tr>\n        <tr\n          className={`row ${\n            employeeIndex % 2 === 0 ? \"odd-row\" : \"even-row\"\n          }`}\n          style={{ backgroundColor: \"lightcoral\" }} // Example for Holiday\n        >\n          <td>Holiday</td>\n          {monthDays.map((date) => (\n            <td\n              key={date}\n              onClick={() => handleSetTime(employee.id, date)}\n              className={date === today ? \"highlight-today\" : \"\"}\n            >\n              {timesheetData[employee.id]?.[date]?.holidayTime === 0\n                ? \"0\"\n                : timesheetData[employee.id]?.[date]?.holidayTime\n                ? `${timesheetData[employee.id][date].holidayTime.toFixed(1)}`\n                : \"\"}\n            </td>\n          ))}\n          <td>{monthlyTotal.holidayTime.toFixed(1)}</td>\n        </tr>\n        <tr\n        style={{\n          backgroundColor: getColorForWorkedHours(totalWorkedHours, totalExpectedHours),\n        }}\n      >\n          <td>Total</td>\n          {monthDays.map((date) => (\n            <td\n              key={date}\n              onClick={() => handleSetTime(employee.id, date)}\n              className={date === today ? \"highlight-today\" : \"\"}\n            >\n              {timesheetData[employee.id]?.[date]?.totalTime === 0\n                ? \"0\"\n                : timesheetData[employee.id]?.[date]?.totalTime\n                ? `${timesheetData[employee.id][date].totalTime.toFixed(1)}`\n                : \"\"}\n            </td>\n          ))}\n          <td>{monthlyTotal.totalTime.toFixed(1)}</td>\n        </tr>\n      </React.Fragment>\n    );\n  })}\n</tbody>\n\n\n\n</table>\n{modalOpen && (\n  <div className=\"modal1\">\n    <div className=\"modal-content1\">\n      <h2 className=\"modal-heading1\">Timesheet Details</h2>\n      \n      <div className=\"form-container1\">\n        <label className=\"form-label1\">\n          Start Time:\n          <input\n            type=\"text\"\n            value={startTime}\n            onChange={handleStartTimeChange}\n            className=\"input-field1\"\n            placeholder=\"hh:mm\"\n          />\n        </label>\n        \n        <label className=\"form-label1\">\n          End Time:\n          <input\n            type=\"text\"\n            value={endTime}\n            onChange={handleEndTimeChange}\n            className=\"input-field1\"\n            placeholder=\"hh:mm\"\n          />\n        </label>\n\n        <div className=\"checkbox-container1\">\n          <label className=\"checkbox-label1\">\n            <span>Next Day:</span>\n            <input\n              type=\"checkbox\"\n              checked={nextDay}\n              onChange={handleNextDayToggle}\n              className=\"checkbox-input1\"\n            />\n          </label>\n\n          <label className=\"checkbox-label1\">\n            <span>Is Holiday:</span>\n            <input\n              type=\"checkbox\"\n              checked={isHoliday}\n              onChange={handleHolidayToggle}\n              className=\"checkbox-input1\"\n            />\n          </label>\n        </div>\n        \n        <div className=\"time-summary1\">\n          <p>Total Time: {totalTime} hours</p>\n          <p>Night Shift Hours: {nightShiftHours} hours</p>\n          <p>Normal Time: {normalTime} hours</p>\n          <p>Holiday Time: {holidayTime} hours</p>\n        </div>\n        \n        <div className=\"modal-actions1\">\n          <button onClick={saveTimesheetDataToFirebase} className=\"save-btn1\">Save</button>\n          <button className=\"close-btn1\" onClick={() => setModalOpen(false)}>Close</button>\n        </div>\n      </div>\n    </div>\n  </div>\n)}\n\n\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}