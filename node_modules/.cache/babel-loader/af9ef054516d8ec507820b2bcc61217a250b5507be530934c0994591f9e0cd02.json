{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = () => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n  const [searchTerm, setSearchTerm] = useState(\"\"); // Search term for employee filtering\n  const [sortBy, setSortBy] = useState('name'); // Sorting criterion (name or totalTime)\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n  const [today, setToday] = useState(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1; // JS months are 0-indexed\n    const day = now.getDate();\n    return `${month}-${day < 10 ? '0' + day : day}`; // Format MM-DD\n  });\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), snapshot => {\n        const employeeData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, snapshot => {\n        const updatedTimesheetData = {};\n        snapshot.forEach(doc => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    var _timesheetData$employ, _timesheetData$employ2, _timesheetData$employ3, _timesheetData$employ4, _timesheetData$employ5, _timesheetData$employ6;\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(((_timesheetData$employ = timesheetData[employeeId]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.startTime) || \"\");\n    setEndTime(((_timesheetData$employ3 = timesheetData[employeeId]) === null || _timesheetData$employ3 === void 0 ? void 0 : (_timesheetData$employ4 = _timesheetData$employ3[date]) === null || _timesheetData$employ4 === void 0 ? void 0 : _timesheetData$employ4.endTime) || \"\");\n    setIsHoliday(((_timesheetData$employ5 = timesheetData[employeeId]) === null || _timesheetData$employ5 === void 0 ? void 0 : (_timesheetData$employ6 = _timesheetData$employ5[date]) === null || _timesheetData$employ6 === void 0 ? void 0 : _timesheetData$employ6.isHoliday) || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = event => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = event => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n    if (newIsHoliday) {\n      setNormalTime(0);\n      setNightShiftHours(0);\n      setTotalTime(totalTime);\n      setHolidayTime(totalTime);\n    } else {\n      calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n    }\n  };\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    let nightShiftHours = 0;\n    let startTime = startDate.getHours() + startDate.getMinutes() / 60;\n    let endTime = endDate.getHours() + endDate.getMinutes() / 60;\n    if ((startTime >= 22 || startTime < 6) && (endTime >= 22 || endTime < 6)) {\n      nightShiftHours = totalTimeInHours;\n    } else if (startTime < 22 && (endTime >= 22 || endTime < 6)) {\n      let nightShiftStartTime = new Date(startDate);\n      nightShiftStartTime.setHours(22, 0, 0);\n      nightShiftHours = (endDate - nightShiftStartTime) / (1000 * 60 * 60);\n    } else if ((startTime >= 22 || startTime < 6) && endTime >= 6) {\n      let nightShiftEndTime = new Date(startDate);\n      nightShiftEndTime.setHours(6, 0, 0);\n      nightShiftHours = (nightShiftEndTime - startDate) / (1000 * 60 * 60);\n    }\n    setTotalTime(totalTimeInHours.toFixed(1));\n    setNightShiftHours(nightShiftHours.toFixed(1));\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(1));\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(1));\n  };\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      var _await$getDoc$data;\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = ((_await$getDoc$data = (await getDoc(timesheetDocRef)).data()) === null || _await$getDoc$data === void 0 ? void 0 : _await$getDoc$data.hours) || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShiftHours),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday\n      };\n      await setDoc(timesheetDocRef, {\n        hours: timesheetData\n      });\n      setModalOpen(false);\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Calculate monthly totals for an employee\n  const calculateMonthlyTotal = employeeId => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0,\n      totalTime: 0\n    };\n    const monthDays = generateMonthDays(currentYear, currentMonth);\n    monthDays.forEach(date => {\n      var _timesheetData$employ7;\n      const dayData = (_timesheetData$employ7 = timesheetData[employeeId]) === null || _timesheetData$employ7 === void 0 ? void 0 : _timesheetData$employ7[date];\n      if (dayData) {\n        monthlyTotal.totalTime += dayData.totalTime;\n        monthlyTotal.normalTime += dayData.normalTime;\n        monthlyTotal.nightShift += dayData.nightShift;\n        monthlyTotal.holidayTime += dayData.holidayTime;\n      }\n    });\n    return monthlyTotal;\n  };\n\n  // Filtering employees based on search term\n  const filteredEmployees = employees.filter(employee => employee.name.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  // Sorting employees based on selected criteria\n  const sortedEmployees = filteredEmployees.sort((a, b) => {\n    if (sortBy === 'totalTime') {\n      return (calculateMonthlyTotal(b.id).totalTime || 0) - (calculateMonthlyTotal(a.id).totalTime || 0);\n    }\n    return a.name.localeCompare(b.name); // Default sort by name\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timesheet-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search by name\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value),\n      className: \"search-bar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"timesheet-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Position\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total Hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: sortedEmployees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.position\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: calculateMonthlyTotal(employee.id).totalTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSetTime(employee.id, today),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this)]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Set Time for \", selectedEmployee]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Start Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            value: startTime,\n            onChange: handleStartTimeChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"End Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            value: endTime,\n            onChange: handleEndTimeChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Next Day:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: nextDay,\n            onChange: handleNextDayToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Is Holiday:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: isHoliday,\n            onChange: handleHolidayToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: saveTimesheetDataToFirebase,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setModalOpen(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"OedbgFEmOK+INiCcoi+7VH96IoE=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","onSnapshot","doc","setDoc","getDoc","db","jsxDEV","_jsxDEV","TimesheetList","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","nextDay","setNextDay","isHoliday","setIsHoliday","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","holidayTime","setHolidayTime","normalTime","setNormalTime","currentMonth","setCurrentMonth","Date","getMonth","currentYear","setCurrentYear","getFullYear","searchTerm","setSearchTerm","sortBy","setSortBy","generateMonthDays","year","month","daysInMonth","getDate","days","day","push","today","setToday","now","fetchEmployees","unsubscribe","snapshot","employeeData","docs","map","id","data","fetchTimesheetData","timesheetDataRef","updatedTimesheetData","forEach","employeeId","hours","date","record","Object","entries","parseFloat","nightShift","Boolean","handleSetTime","_timesheetData$employ","_timesheetData$employ2","_timesheetData$employ3","_timesheetData$employ4","_timesheetData$employ5","_timesheetData$employ6","handleStartTimeChange","event","newStartTime","target","value","calculateTimes","handleEndTimeChange","newEndTime","handleNextDayToggle","newNextDay","handleHolidayToggle","newIsHoliday","start","end","isNextDay","startHours","startMinutes","split","Number","endHours","endMinutes","startDate","setHours","endDate","setDate","totalTimeInHours","getHours","getMinutes","nightShiftStartTime","nightShiftEndTime","toFixed","saveTimesheetDataToFirebase","_await$getDoc$data","timesheetDocRef","error","console","calculateMonthlyTotal","monthlyTotal","monthDays","_timesheetData$employ7","dayData","filteredEmployees","filter","employee","name","toLowerCase","includes","sortedEmployees","sort","a","b","localeCompare","className","children","type","placeholder","onChange","e","fileName","_jsxFileName","lineNumber","columnNumber","position","onClick","checked","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\n\nconst TimesheetList = () => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n  const [searchTerm, setSearchTerm] = useState(\"\"); // Search term for employee filtering\n  const [sortBy, setSortBy] = useState('name'); // Sorting criterion (name or totalTime)\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n\n  const [today, setToday] = useState(() => {\n    const now = new Date();\n    const month = now.getMonth() + 1; // JS months are 0-indexed\n    const day = now.getDate();\n    return `${month}-${day < 10 ? '0' + day : day}`; // Format MM-DD\n  });\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), (snapshot) => {\n        const employeeData = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, (snapshot) => {\n        const updatedTimesheetData = {};\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0,\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(timesheetData[employeeId]?.[date]?.startTime || \"\");\n    setEndTime(timesheetData[employeeId]?.[date]?.endTime || \"\");\n    setIsHoliday(timesheetData[employeeId]?.[date]?.isHoliday || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = (event) => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = (event) => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n    if (newIsHoliday) {\n      setNormalTime(0);\n      setNightShiftHours(0);\n      setTotalTime(totalTime);\n      setHolidayTime(totalTime);\n    } else {\n      calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n    }\n  };\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    let nightShiftHours = 0;\n    let startTime = startDate.getHours() + startDate.getMinutes() / 60;\n    let endTime = endDate.getHours() + endDate.getMinutes() / 60;\n\n    if ((startTime >= 22 || startTime < 6) && (endTime >= 22 || endTime < 6)) {\n      nightShiftHours = totalTimeInHours;\n    } else if (startTime < 22 && (endTime >= 22 || endTime < 6)) {\n      let nightShiftStartTime = new Date(startDate);\n      nightShiftStartTime.setHours(22, 0, 0);\n      nightShiftHours = (endDate - nightShiftStartTime) / (1000 * 60 * 60);\n    } else if ((startTime >= 22 || startTime < 6) && endTime >= 6) {\n      let nightShiftEndTime = new Date(startDate);\n      nightShiftEndTime.setHours(6, 0, 0);\n      nightShiftHours = (nightShiftEndTime - startDate) / (1000 * 60 * 60);\n    }\n\n    setTotalTime(totalTimeInHours.toFixed(1));\n    setNightShiftHours(nightShiftHours.toFixed(1));\n\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(1));\n\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(1));\n  };\n\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = (await getDoc(timesheetDocRef)).data()?.hours || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShiftHours),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday,\n      };\n      await setDoc(timesheetDocRef, { hours: timesheetData });\n      setModalOpen(false);\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Calculate monthly totals for an employee\n  const calculateMonthlyTotal = (employeeId) => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0,\n      totalTime: 0,\n    };\n\n    const monthDays = generateMonthDays(currentYear, currentMonth);\n    monthDays.forEach((date) => {\n      const dayData = timesheetData[employeeId]?.[date];\n      if (dayData) {\n        monthlyTotal.totalTime += dayData.totalTime;\n        monthlyTotal.normalTime += dayData.normalTime;\n        monthlyTotal.nightShift += dayData.nightShift;\n        monthlyTotal.holidayTime += dayData.holidayTime;\n      }\n    });\n    return monthlyTotal;\n  };\n\n  // Filtering employees based on search term\n  const filteredEmployees = employees.filter((employee) =>\n    employee.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Sorting employees based on selected criteria\n  const sortedEmployees = filteredEmployees.sort((a, b) => {\n    if (sortBy === 'totalTime') {\n      return (\n        (calculateMonthlyTotal(b.id).totalTime || 0) -\n        (calculateMonthlyTotal(a.id).totalTime || 0)\n      );\n    }\n    return a.name.localeCompare(b.name); // Default sort by name\n  });\n\n  return (\n    <div className=\"timesheet-container\">\n      <input\n        type=\"text\"\n        placeholder=\"Search by name\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        className=\"search-bar\"\n      />\n\n      <table className=\"timesheet-table\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Position</th>\n            <th>Total Hours</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sortedEmployees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td>\n              <td>{employee.position}</td>\n              <td>{calculateMonthlyTotal(employee.id).totalTime}</td>\n              <td>\n                <button onClick={() => handleSetTime(employee.id, today)}>\n                  Edit\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {/* Modal for time entry */}\n      {modalOpen && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <h3>Set Time for {selectedEmployee}</h3>\n            <label>\n              Start Time:\n              <input\n                type=\"time\"\n                value={startTime}\n                onChange={handleStartTimeChange}\n              />\n            </label>\n            <label>\n              End Time:\n              <input\n                type=\"time\"\n                value={endTime}\n                onChange={handleEndTimeChange}\n              />\n            </label>\n            <label>\n              Next Day:\n              <input\n                type=\"checkbox\"\n                checked={nextDay}\n                onChange={handleNextDayToggle}\n              />\n            </label>\n            <label>\n              Is Holiday:\n              <input\n                type=\"checkbox\"\n                checked={isHoliday}\n                onChange={handleHolidayToggle}\n              />\n            </label>\n            <div>\n              <button onClick={saveTimesheetDataToFirebase}>Save</button>\n              <button onClick={() => setModalOpen(false)}>Cancel</button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}