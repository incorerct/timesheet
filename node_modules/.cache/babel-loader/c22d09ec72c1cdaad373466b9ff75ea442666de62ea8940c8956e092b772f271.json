{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0); // Track night shift hours\n  const [nextDay, setNextDay] = useState(false); // Add \"Next Day\" flag\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\");\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data());\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = {\n            startTime: \"\",\n            endTime: \"\",\n            totalTime: 0,\n            nightShift: 0\n          };\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData();\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate total time and night shift hours\n  const calculateTotalTimeAndNightShift = (start, end, nextDay) => {\n    if (isEndBeforeStart(start, end) && !nextDay) {\n      // Return nothing if end time is before start time and Next Day is not checked\n      return {\n        totalTime: 0,\n        nightShift: 0\n      };\n    }\n    const startParts = start.split(\":\").map(Number); // [hours, minutes]\n    const endParts = end.split(\":\").map(Number);\n\n    // Convert start and end times into Date objects\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // Adjust for next day if selected\n    if (nextDay) {\n      endDate.setDate(endDate.getDate() + 1); // Adjust the end date to the next day\n    }\n\n    // Calculate total time worked (in hours)\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60); // Convert to hours\n\n    // Night shift hours (10:00 PM to 6:00 AM)\n    const nightShiftStart = 22; // 10:00 PM\n    const nightShiftEnd = 6; // 6:00 AM\n\n    let nightShiftHours = 0;\n\n    // Night shift overlap calculation\n    const calculateNightShiftOverlap = (startDate, endDate) => {\n      let nightShift = 0;\n      const startHour = startDate.getHours();\n      const startMinutes = startDate.getMinutes();\n      const endHour = endDate.getHours();\n      const endMinutes = endDate.getMinutes();\n      if (startHour < nightShiftStart) {\n        if (endHour >= nightShiftStart) {\n          const overlapStart = nightShiftStart;\n          const overlapEnd = endHour + endMinutes / 60;\n          nightShift += overlapEnd - overlapStart;\n        }\n      } else if (startHour >= nightShiftStart && startHour < 24) {\n        const overlapStart = startHour + startMinutes / 60;\n        const overlapEnd = endHour + endMinutes / 60;\n        nightShift += Math.max(0, overlapEnd - overlapStart);\n      }\n      if (startHour >= 0 && startHour < nightShiftEnd) {\n        const overlapStart = Math.max(startHour, 0) + startMinutes / 60;\n        const overlapEnd = Math.min(endHour, nightShiftEnd) + endMinutes / 60;\n        nightShift += overlapEnd - overlapStart;\n      }\n      return nightShift;\n    };\n    nightShiftHours = calculateNightShiftOverlap(startDate, endDate);\n    return {\n      totalTime: totalTimeInHours.toFixed(2),\n      nightShift: nightShiftHours.toFixed(2)\n    };\n  };\n  const isEndBeforeStart = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n    return endDate < startDate;\n  };\n  const handleInputChange = async (employeeId, date, start, end, totalTime, nightShift) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = {\n        startTime: start,\n        endTime: end,\n        totalTime,\n        nightShift\n      };\n      return newData;\n    });\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, nightShift);\n  };\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, nightShift) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n      let updatedData = {};\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = {\n          startTime: start,\n          endTime: end,\n          totalTime,\n          nightShift\n        };\n      } else {\n        updatedData = {\n          [date]: {\n            startTime: start,\n            endTime: end,\n            totalTime,\n            nightShift\n          }\n        };\n      }\n      await setDoc(timesheetDocRef, {\n        hours: updatedData\n      });\n      fetchTimesheetData();\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n      setTimesheetData(updatedTimesheetData);\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setNightShiftHours(0); // Reset night shift\n    setNextDay(false); // Reset Next Day flag\n  };\n  const handleStartTimeChange = e => {\n    setStartTime(e.target.value);\n    if (endTime) {\n      const {\n        totalTime,\n        nightShift\n      } = calculateTotalTimeAndNightShift(e.target.value, endTime, nextDay);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    }\n  };\n  const handleEndTimeChange = e => {\n    setEndTime(e.target.value);\n    if (startTime) {\n      const {\n        totalTime,\n        nightShift\n      } = calculateTotalTimeAndNightShift(startTime, e.target.value, nextDay);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSetTime(employee.id, date),\n              children: \"Set Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 19\n            }, this)\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 17\n          }, this))]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Set Time for \", selectedEmployee]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Start Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: startTime,\n          onChange: handleStartTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"End Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: endTime,\n          onChange: handleEndTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Next Day?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: nextDay,\n          onChange: () => setNextDay(!nextDay)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Time: \", totalTime, \" hours\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Night Shift: \", nightShiftHours, \" hours\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleInputChange(selectedEmployee, selectedDate, startTime, endTime, totalTime, nightShiftHours),\n          children: \"Save Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCloseModal,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"RAeZzDicpiTLy2cDsFjKOoXPhkM=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["useState","useEffect","collection","getDocs","getDoc","doc","setDoc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","timeAdjustments","setTimeAdjustments","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","nextDay","setNextDay","fetchData","employeeSnapshot","employeeData","docs","map","id","data","settingsDocRef","settingsDoc","exists","console","log","error","length","initialTimesheetData","reduce","acc","employee","weekAcc","date","nightShift","fetchTimesheetData","calculateTotalTimeAndNightShift","start","end","isEndBeforeStart","startParts","split","Number","endParts","startDate","Date","setHours","endDate","setDate","getDate","totalTimeInHours","nightShiftStart","nightShiftEnd","calculateNightShiftOverlap","startHour","getHours","startMinutes","getMinutes","endHour","endMinutes","overlapStart","overlapEnd","Math","max","min","toFixed","handleInputChange","employeeId","prevData","newData","saveTimesheetDataToFirebase","timesheetDocRef","updatedData","hours","querySnapshot","updatedTimesheetData","forEach","handleSetTime","handleCloseModal","handleStartTimeChange","e","target","value","handleEndTimeChange","children","fileName","_jsxFileName","lineNumber","columnNumber","name","onClick","className","type","onChange","checked","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { collection, getDocs, getDoc, doc, setDoc } from \"firebase/firestore\"; \nimport { db } from \"./firebaseConfig\";\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [timeAdjustments, setTimeAdjustments] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0); // Track night shift hours\n  const [nextDay, setNextDay] = useState(false); // Add \"Next Day\" flag\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const employeeSnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = employeeSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n\n        const settingsDocRef = doc(db, \"timeAdjustments\", \"settings\");\n        const settingsDoc = await getDoc(settingsDocRef);\n        if (settingsDoc.exists()) {\n          setTimeAdjustments(settingsDoc.data());\n        } else {\n          console.log(\"No time adjustments found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = { startTime: \"\", endTime: \"\", totalTime: 0, nightShift: 0 };\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData();\n    }\n  }, [employees, weekDates]);\n\n  // Function to calculate total time and night shift hours\n  const calculateTotalTimeAndNightShift = (start, end, nextDay) => {\n    if (isEndBeforeStart(start, end) && !nextDay) {\n      // Return nothing if end time is before start time and Next Day is not checked\n      return { totalTime: 0, nightShift: 0 };\n    }\n\n    const startParts = start.split(\":\").map(Number); // [hours, minutes]\n    const endParts = end.split(\":\").map(Number);\n\n    // Convert start and end times into Date objects\n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n    \n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n\n    // Adjust for next day if selected\n    if (nextDay) {\n      endDate.setDate(endDate.getDate() + 1); // Adjust the end date to the next day\n    }\n    \n    // Calculate total time worked (in hours)\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60); // Convert to hours\n\n    // Night shift hours (10:00 PM to 6:00 AM)\n    const nightShiftStart = 22; // 10:00 PM\n    const nightShiftEnd = 6; // 6:00 AM\n    \n    let nightShiftHours = 0;\n\n    // Night shift overlap calculation\n    const calculateNightShiftOverlap = (startDate, endDate) => {\n      let nightShift = 0;\n      \n      const startHour = startDate.getHours();\n      const startMinutes = startDate.getMinutes();\n      const endHour = endDate.getHours();\n      const endMinutes = endDate.getMinutes();\n      \n      if (startHour < nightShiftStart) {\n        if (endHour >= nightShiftStart) {\n          const overlapStart = nightShiftStart;\n          const overlapEnd = endHour + (endMinutes / 60);\n          nightShift += overlapEnd - overlapStart;\n        }\n      } else if (startHour >= nightShiftStart && startHour < 24) {\n        const overlapStart = startHour + (startMinutes / 60);\n        const overlapEnd = endHour + (endMinutes / 60);\n        nightShift += Math.max(0, overlapEnd - overlapStart);\n      }\n      \n      if (startHour >= 0 && startHour < nightShiftEnd) {\n        const overlapStart = Math.max(startHour, 0) + startMinutes / 60;\n        const overlapEnd = Math.min(endHour, nightShiftEnd) + endMinutes / 60;\n        nightShift += overlapEnd - overlapStart;\n      }\n      \n      return nightShift;\n    };\n\n    nightShiftHours = calculateNightShiftOverlap(startDate, endDate);\n\n    return { \n      totalTime: totalTimeInHours.toFixed(2), \n      nightShift: nightShiftHours.toFixed(2) \n    };\n  };\n\n  const isEndBeforeStart = (start, end) => {\n    const startParts = start.split(\":\").map(Number);\n    const endParts = end.split(\":\").map(Number);\n    \n    const startDate = new Date();\n    startDate.setHours(startParts[0], startParts[1], 0);\n\n    const endDate = new Date();\n    endDate.setHours(endParts[0], endParts[1], 0);\n    \n    return endDate < startDate;\n  };\n\n  const handleInputChange = async (employeeId, date, start, end, totalTime, nightShift) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = { startTime: start, endTime: end, totalTime, nightShift };\n      return newData;\n    });\n\n    await saveTimesheetDataToFirebase(employeeId, date, start, end, totalTime, nightShift);\n  };\n\n  const saveTimesheetDataToFirebase = async (employeeId, date, start, end, totalTime, nightShift) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId);\n      const timesheetData = await getDoc(timesheetDocRef);\n\n      let updatedData = {};\n\n      if (timesheetData.exists()) {\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = { startTime: start, endTime: end, totalTime, nightShift };\n      } else {\n        updatedData = { [date]: { startTime: start, endTime: end, totalTime, nightShift } };\n      }\n\n      await setDoc(timesheetDocRef, { hours: updatedData });\n      fetchTimesheetData();\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n\n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n\n      setTimesheetData(updatedTimesheetData);\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setTotalTime(0);\n    setNightShiftHours(0); // Reset night shift\n    setNextDay(false); // Reset Next Day flag\n  };\n\n  const handleStartTimeChange = (e) => {\n    setStartTime(e.target.value);\n    if (endTime) {\n      const { totalTime, nightShift } = calculateTotalTimeAndNightShift(e.target.value, endTime, nextDay);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    }\n  };\n\n  const handleEndTimeChange = (e) => {\n    setEndTime(e.target.value);\n    if (startTime) {\n      const { totalTime, nightShift } = calculateTotalTimeAndNightShift(startTime, e.target.value, nextDay);\n      setTotalTime(totalTime);\n      setNightShiftHours(nightShift);\n    }\n  };\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td>\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <button onClick={() => handleSetTime(employee.id, date)}>\n                    Set Time\n                  </button>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {modalOpen && (\n        <div className=\"modal\">\n          <h2>Set Time for {selectedEmployee}</h2>\n          <div>\n            <label>Start Time</label>\n            <input type=\"time\" value={startTime} onChange={handleStartTimeChange} />\n          </div>\n          <div>\n            <label>End Time</label>\n            <input type=\"time\" value={endTime} onChange={handleEndTimeChange} />\n          </div>\n          <div>\n            <label>Next Day?</label>\n            <input\n              type=\"checkbox\"\n              checked={nextDay}\n              onChange={() => setNextDay(!nextDay)}\n            />\n          </div>\n          <div>\n            <p>Total Time: {totalTime} hours</p>\n            <p>Night Shift: {nightShiftHours} hours</p>\n          </div>\n          <div>\n            <button\n              onClick={() =>\n                handleInputChange(\n                  selectedEmployee,\n                  selectedDate,\n                  startTime,\n                  endTime,\n                  totalTime,\n                  nightShiftHours\n                )\n              }\n            >\n              Save Time\n            </button>\n            <button onClick={handleCloseModal}>Close</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}