{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  useEffect(() => {\n    // Fetch employees and timesheet data\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), snapshot => {\n        const employeeData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, snapshot => {\n        const updatedTimesheetData = {};\n        snapshot.forEach(doc => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Calculate monthly totals\n  const calculateMonthlyTotal = employeeId => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0,\n      totalTime: 0\n    };\n\n    // Iterate through all weekDates and aggregate the times\n    weekDates.forEach(date => {\n      var _timesheetData$employ;\n      const data = (_timesheetData$employ = timesheetData[employeeId]) === null || _timesheetData$employ === void 0 ? void 0 : _timesheetData$employ[date];\n      if (data) {\n        monthlyTotal.normalTime += data.normalTime || 0;\n        monthlyTotal.nightShift += data.nightShift || 0;\n        monthlyTotal.holidayTime += data.holidayTime || 0;\n        monthlyTotal.totalTime += data.totalTime || 0;\n      }\n    });\n\n    // Return totals rounded to 2 decimals\n    return {\n      normalTime: monthlyTotal.normalTime.toFixed(2),\n      nightShift: monthlyTotal.nightShift.toFixed(2),\n      holidayTime: monthlyTotal.holidayTime.toFixed(2),\n      totalTime: monthlyTotal.totalTime.toFixed(2)\n    };\n  };\n\n  // Handle setting times and toggling options\n  const handleSetTime = (employeeId, date) => {\n    var _timesheetData$employ2, _timesheetData$employ3, _timesheetData$employ4, _timesheetData$employ5, _timesheetData$employ6, _timesheetData$employ7;\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(((_timesheetData$employ2 = timesheetData[employeeId]) === null || _timesheetData$employ2 === void 0 ? void 0 : (_timesheetData$employ3 = _timesheetData$employ2[date]) === null || _timesheetData$employ3 === void 0 ? void 0 : _timesheetData$employ3.startTime) || \"\");\n    setEndTime(((_timesheetData$employ4 = timesheetData[employeeId]) === null || _timesheetData$employ4 === void 0 ? void 0 : (_timesheetData$employ5 = _timesheetData$employ4[date]) === null || _timesheetData$employ5 === void 0 ? void 0 : _timesheetData$employ5.endTime) || \"\");\n    setIsHoliday(((_timesheetData$employ6 = timesheetData[employeeId]) === null || _timesheetData$employ6 === void 0 ? void 0 : (_timesheetData$employ7 = _timesheetData$employ6[date]) === null || _timesheetData$employ7 === void 0 ? void 0 : _timesheetData$employ7.isHoliday) || false);\n    setModalOpen(true);\n  };\n  const handleStartTimeChange = event => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n  const handleEndTimeChange = event => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n    calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n  };\n\n  // Calculate time including night shift and holiday calculations\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    const nightShiftStart = new Date(startDate);\n    nightShiftStart.setHours(22, 0, 0);\n    const nightShiftEnd = new Date(startDate);\n    nightShiftEnd.setDate(nightShiftEnd.getDate() + 1);\n    nightShiftEnd.setHours(6, 0, 0);\n    let nightShiftHours = 0;\n    if (startDate < nightShiftEnd && endDate >= nightShiftStart) {\n      const nightShiftStartTime = startDate < nightShiftStart ? nightShiftStart : startDate;\n      const nightShiftEndTime = endDate > nightShiftEnd ? nightShiftEnd : endDate;\n      nightShiftHours = (nightShiftEndTime - nightShiftStartTime) / (1000 * 60 * 60);\n    }\n    setTotalTime(totalTimeInHours.toFixed(2));\n    setNightShiftHours(nightShiftHours.toFixed(2));\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(2));\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(2));\n  };\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      var _await$getDoc$data;\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = ((_await$getDoc$data = (await getDoc(timesheetDocRef)).data()) === null || _await$getDoc$data === void 0 ? void 0 : _await$getDoc$data.hours) || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShiftHours),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday\n      };\n      await setDoc(timesheetDocRef, {\n        hours: timesheetData\n      });\n      setModalOpen(false);\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Shift Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Monthly Total\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => {\n          const monthlyTotal = calculateMonthlyTotal(employee.id);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Normal Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this), weekDates.map(date => {\n              var _timesheetData$employ8, _timesheetData$employ9;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => handleSetTime(employee.id, date),\n                children: ((_timesheetData$employ8 = timesheetData[employee.id]) === null || _timesheetData$employ8 === void 0 ? void 0 : (_timesheetData$employ9 = _timesheetData$employ8[date]) === null || _timesheetData$employ9 === void 0 ? void 0 : _timesheetData$employ9.normalTime) || \"0 hrs\"\n              }, date, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 19\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [monthlyTotal.normalTime, \" hrs\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this)]\n          }, employee.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"LuJF93aoCyJzjR3hVD8EVfLaOJo=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","onSnapshot","doc","setDoc","getDoc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","nextDay","setNextDay","isHoliday","setIsHoliday","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","holidayTime","setHolidayTime","normalTime","setNormalTime","fetchEmployees","unsubscribe","snapshot","employeeData","docs","map","id","data","fetchTimesheetData","timesheetDataRef","updatedTimesheetData","forEach","employeeId","hours","date","record","Object","entries","parseFloat","nightShift","Boolean","calculateMonthlyTotal","monthlyTotal","_timesheetData$employ","toFixed","handleSetTime","_timesheetData$employ2","_timesheetData$employ3","_timesheetData$employ4","_timesheetData$employ5","_timesheetData$employ6","_timesheetData$employ7","handleStartTimeChange","event","newStartTime","target","value","calculateTimes","handleEndTimeChange","newEndTime","handleNextDayToggle","newNextDay","handleHolidayToggle","newIsHoliday","start","end","isNextDay","startHours","startMinutes","split","Number","endHours","endMinutes","startDate","Date","setHours","endDate","setDate","getDate","totalTimeInHours","nightShiftStart","nightShiftEnd","nightShiftStartTime","nightShiftEndTime","saveTimesheetDataToFirebase","_await$getDoc$data","timesheetDocRef","error","console","children","border","fileName","_jsxFileName","lineNumber","columnNumber","employee","name","_timesheetData$employ8","_timesheetData$employ9","onClick","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n\n  useEffect(() => {\n    // Fetch employees and timesheet data\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), (snapshot) => {\n        const employeeData = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, (snapshot) => {\n        const updatedTimesheetData = {};\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0,\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Calculate monthly totals\n  const calculateMonthlyTotal = (employeeId) => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0,\n      totalTime: 0,\n    };\n\n    // Iterate through all weekDates and aggregate the times\n    weekDates.forEach((date) => {\n      const data = timesheetData[employeeId]?.[date];\n      if (data) {\n        monthlyTotal.normalTime += data.normalTime || 0;\n        monthlyTotal.nightShift += data.nightShift || 0;\n        monthlyTotal.holidayTime += data.holidayTime || 0;\n        monthlyTotal.totalTime += data.totalTime || 0;\n      }\n    });\n\n    // Return totals rounded to 2 decimals\n    return {\n      normalTime: monthlyTotal.normalTime.toFixed(2),\n      nightShift: monthlyTotal.nightShift.toFixed(2),\n      holidayTime: monthlyTotal.holidayTime.toFixed(2),\n      totalTime: monthlyTotal.totalTime.toFixed(2),\n    };\n  };\n\n  // Handle setting times and toggling options\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(timesheetData[employeeId]?.[date]?.startTime || \"\");\n    setEndTime(timesheetData[employeeId]?.[date]?.endTime || \"\");\n    setIsHoliday(timesheetData[employeeId]?.[date]?.isHoliday || false);\n    setModalOpen(true);\n  };\n\n  const handleStartTimeChange = (event) => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  const handleEndTimeChange = (event) => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n    calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n  };\n\n  // Calculate time including night shift and holiday calculations\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    const nightShiftStart = new Date(startDate);\n    nightShiftStart.setHours(22, 0, 0);\n    const nightShiftEnd = new Date(startDate);\n    nightShiftEnd.setDate(nightShiftEnd.getDate() + 1);\n    nightShiftEnd.setHours(6, 0, 0);\n\n    let nightShiftHours = 0;\n    if (startDate < nightShiftEnd && endDate >= nightShiftStart) {\n      const nightShiftStartTime = startDate < nightShiftStart ? nightShiftStart : startDate;\n      const nightShiftEndTime = endDate > nightShiftEnd ? nightShiftEnd : endDate;\n      nightShiftHours = (nightShiftEndTime - nightShiftStartTime) / (1000 * 60 * 60);\n    }\n\n    setTotalTime(totalTimeInHours.toFixed(2));\n    setNightShiftHours(nightShiftHours.toFixed(2));\n\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(2));\n\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(2));\n  };\n\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = (await getDoc(timesheetDocRef)).data()?.hours || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShiftHours),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday,\n      };\n      await setDoc(timesheetDocRef, { hours: timesheetData });\n      setModalOpen(false);\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Shift Type</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n            <th>Monthly Total</th>\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => {\n            const monthlyTotal = calculateMonthlyTotal(employee.id);\n\n            return (\n              <tr key={employee.id}>\n                <td>{employee.name}</td>\n                <td>Normal Time</td>\n                {weekDates.map((date) => (\n                  <td key={date} onClick={() => handleSetTime(employee.id, date)}>\n                    {timesheetData[employee.id]?.[date]?.normalTime || \"0 hrs\"}\n                  </td>\n                ))}\n                <td>{monthlyTotal.normalTime} hrs</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {modalOpen && (\n        <div>\n          {/* Modal code for editing timesheet */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}