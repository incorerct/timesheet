{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n// Import Firebase functions and Firestore\nimport { collection, getDocs, updateDoc, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = ({\n  weekDates\n}) => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n\n  // Fetch employees data from Firebase\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        // Get employees collection from Firebase\n        const querySnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n    fetchEmployees();\n  }, []);\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = \"\"; // Initially no work hours\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData(); // Fetch timesheet data when employees or weekDates change\n    }\n  }, [employees, weekDates]);\n\n  // Handle input changes for work hours\n  const handleInputChange = async (employeeId, date, hours) => {\n    setTimesheetData(prevData => {\n      const newData = {\n        ...prevData\n      };\n      newData[employeeId][date] = hours;\n      return newData;\n    });\n\n    // Save updated timesheet data to Firebase\n    await saveTimesheetDataToFirebase(employeeId, date, hours);\n  };\n\n  // Handle employee name change\n  const handleEmployeeNameChange = async (employeeId, newName) => {\n    try {\n      // Update employee name in Firestore\n      const employeeDoc = doc(db, \"employees\", employeeId);\n      await updateDoc(employeeDoc, {\n        name: newName\n      });\n\n      // Update local employee list\n      setEmployees(prevEmployees => prevEmployees.map(employee => employee.id === employeeId ? {\n        ...employee,\n        name: newName\n      } : employee));\n    } catch (error) {\n      console.error(\"Error updating employee name:\", error);\n    }\n  };\n\n  // Function to save timesheet data to Firebase\n  const saveTimesheetDataToFirebase = async (employeeId, date, hours) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId); // Use employee ID as doc reference\n      const timesheetData = await getDoc(timesheetDocRef); // Check if document already exists\n\n      let updatedData = {}; // Initialize an object to hold updated timesheet data\n\n      if (timesheetData.exists()) {\n        // If the document exists, get the current data and merge the new data\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = hours; // Update the specific date with the new hours\n      } else {\n        // If the document does not exist, create new data\n        updatedData = {\n          [date]: hours // Set initial value for this date\n        };\n      }\n\n      // Save or update the document in Firestore with the merged data\n      await setDoc(timesheetDocRef, {\n        hours: updatedData\n      });\n\n      // After saving the data, fetch the updated timesheet data\n      fetchTimesheetData(); // Refetch the data after saving\n    } catch (error) {\n      console.error(\"Error saving timesheet data to Firebase:\", error);\n    }\n  };\n\n  // Function to fetch the latest timesheet data\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n      setTimesheetData(updatedTimesheetData); // Update state with the fetched data\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), weekDates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: employee.name,\n              onChange: e => handleEmployeeNameChange(employee.id, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), weekDates.map(date => {\n            var _timesheetData$employ;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: ((_timesheetData$employ = timesheetData[employee.id]) === null || _timesheetData$employ === void 0 ? void 0 : _timesheetData$employ[date]) || \"\" // Leave empty if no data\n                ,\n                onChange: e => handleInputChange(employee.id, date, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 19\n              }, this)\n            }, date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this);\n          })]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"q6b3jx+uK+aPbLRgtBzUVfcscnQ=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","getDocs","updateDoc","doc","setDoc","getDoc","db","jsxDEV","_jsxDEV","TimesheetList","weekDates","_s","employees","setEmployees","timesheetData","setTimesheetData","fetchEmployees","querySnapshot","employeeData","docs","map","id","data","error","console","length","initialTimesheetData","reduce","acc","employee","weekAcc","date","fetchTimesheetData","handleInputChange","employeeId","hours","prevData","newData","saveTimesheetDataToFirebase","handleEmployeeNameChange","newName","employeeDoc","name","prevEmployees","timesheetDocRef","updatedData","exists","updatedTimesheetData","forEach","children","border","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","_timesheetData$employ","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n// Import Firebase functions and Firestore\nimport { collection, getDocs, updateDoc, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\n\nconst TimesheetList = ({ weekDates }) => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n\n  // Fetch employees data from Firebase\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        // Get employees collection from Firebase\n        const querySnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n\n    fetchEmployees();\n  }, []);\n\n  // Initialize timesheet data when employees or weekDates change\n  useEffect(() => {\n    if (employees.length > 0 && weekDates.length > 0) {\n      const initialTimesheetData = employees.reduce((acc, employee) => {\n        acc[employee.id] = weekDates.reduce((weekAcc, date) => {\n          weekAcc[date] = \"\"; // Initially no work hours\n          return weekAcc;\n        }, {});\n        return acc;\n      }, {});\n      setTimesheetData(initialTimesheetData);\n      fetchTimesheetData(); // Fetch timesheet data when employees or weekDates change\n    }\n  }, [employees, weekDates]);\n\n  // Handle input changes for work hours\n  const handleInputChange = async (employeeId, date, hours) => {\n    setTimesheetData((prevData) => {\n      const newData = { ...prevData };\n      newData[employeeId][date] = hours;\n      return newData;\n    });\n\n    // Save updated timesheet data to Firebase\n    await saveTimesheetDataToFirebase(employeeId, date, hours);\n  };\n\n  // Handle employee name change\n  const handleEmployeeNameChange = async (employeeId, newName) => {\n    try {\n      // Update employee name in Firestore\n      const employeeDoc = doc(db, \"employees\", employeeId);\n      await updateDoc(employeeDoc, { name: newName });\n\n      // Update local employee list\n      setEmployees((prevEmployees) =>\n        prevEmployees.map((employee) =>\n          employee.id === employeeId ? { ...employee, name: newName } : employee\n        )\n      );\n    } catch (error) {\n      console.error(\"Error updating employee name:\", error);\n    }\n  };\n\n  // Function to save timesheet data to Firebase\n  const saveTimesheetDataToFirebase = async (employeeId, date, hours) => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", employeeId); // Use employee ID as doc reference\n      const timesheetData = await getDoc(timesheetDocRef); // Check if document already exists\n\n      let updatedData = {}; // Initialize an object to hold updated timesheet data\n\n      if (timesheetData.exists()) {\n        // If the document exists, get the current data and merge the new data\n        updatedData = timesheetData.data().hours;\n        updatedData[date] = hours; // Update the specific date with the new hours\n      } else {\n        // If the document does not exist, create new data\n        updatedData = {\n          [date]: hours, // Set initial value for this date\n        };\n      }\n\n      // Save or update the document in Firestore with the merged data\n      await setDoc(timesheetDocRef, { hours: updatedData });\n\n      // After saving the data, fetch the updated timesheet data\n      fetchTimesheetData(); // Refetch the data after saving\n    } catch (error) {\n      console.error(\"Error saving timesheet data to Firebase:\", error);\n    }\n  };\n\n  // Function to fetch the latest timesheet data\n  const fetchTimesheetData = async () => {\n    try {\n      const querySnapshot = await getDocs(collection(db, \"timesheets\"));\n      const updatedTimesheetData = {};\n\n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        updatedTimesheetData[doc.id] = data.hours;\n      });\n\n      setTimesheetData(updatedTimesheetData); // Update state with the fetched data\n    } catch (error) {\n      console.error(\"Error fetching timesheet data:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((date) => (\n              <th key={date}>{date}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>\n                <input\n                  type=\"text\"\n                  value={employee.name}\n                  onChange={(e) =>\n                    handleEmployeeNameChange(employee.id, e.target.value)\n                  }\n                />\n              </td>\n              {weekDates.map((date) => (\n                <td key={date}>\n                  <input\n                    type=\"number\"\n                    value={timesheetData[employee.id]?.[date] || \"\"} // Leave empty if no data\n                    onChange={(e) =>\n                      handleInputChange(\n                        employee.id,\n                        date,\n                        e.target.value\n                      )\n                    }\n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}