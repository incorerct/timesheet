{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = () => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), snapshot => {\n        const employeeData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, snapshot => {\n        const updatedTimesheetData = {};\n        snapshot.forEach(doc => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    var _timesheetData$employ, _timesheetData$employ2, _timesheetData$employ3, _timesheetData$employ4, _timesheetData$employ5, _timesheetData$employ6;\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(((_timesheetData$employ = timesheetData[employeeId]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.startTime) || \"\");\n    setEndTime(((_timesheetData$employ3 = timesheetData[employeeId]) === null || _timesheetData$employ3 === void 0 ? void 0 : (_timesheetData$employ4 = _timesheetData$employ3[date]) === null || _timesheetData$employ4 === void 0 ? void 0 : _timesheetData$employ4.endTime) || \"\");\n    setIsHoliday(((_timesheetData$employ5 = timesheetData[employeeId]) === null || _timesheetData$employ5 === void 0 ? void 0 : (_timesheetData$employ6 = _timesheetData$employ5[date]) === null || _timesheetData$employ6 === void 0 ? void 0 : _timesheetData$employ6.isHoliday) || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = event => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = event => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n    calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n  };\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    const nightShiftStart = new Date(startDate);\n    nightShiftStart.setHours(22, 0, 0);\n    const nightShiftEnd = new Date(startDate);\n    nightShiftEnd.setDate(nightShiftEnd.getDate() + 1);\n    nightShiftEnd.setHours(6, 0, 0);\n    let nightShiftHours = 0;\n    if (startDate < nightShiftEnd && endDate >= nightShiftStart) {\n      const nightShiftStartTime = startDate < nightShiftStart ? nightShiftStart : startDate;\n      const nightShiftEndTime = endDate > nightShiftEnd ? nightShiftEnd : endDate;\n      nightShiftHours = (nightShiftEndTime - nightShiftStartTime) / (1000 * 60 * 60);\n    }\n    setTotalTime(totalTimeInHours.toFixed(2));\n    setNightShiftHours(nightShiftHours.toFixed(2));\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(2));\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(2));\n  };\n\n  // Save timesheet data to Firestore\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      var _await$getDoc$data;\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = ((_await$getDoc$data = (await getDoc(timesheetDocRef)).data()) === null || _await$getDoc$data === void 0 ? void 0 : _await$getDoc$data.hours) || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShiftHours),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday\n      };\n      await setDoc(timesheetDocRef, {\n        hours: timesheetData\n      });\n      setModalOpen(false);\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Calculate monthly totals for an employee\n  const calculateMonthlyTotal = employeeId => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0,\n      totalTime: 0\n    };\n    const monthDays = generateMonthDays(currentYear, currentMonth);\n    monthDays.forEach(date => {\n      var _timesheetData$employ7;\n      const data = (_timesheetData$employ7 = timesheetData[employeeId]) === null || _timesheetData$employ7 === void 0 ? void 0 : _timesheetData$employ7[date];\n      if (data) {\n        monthlyTotal.normalTime += data.normalTime || 0;\n        monthlyTotal.nightShift += data.nightShift || 0;\n        monthlyTotal.holidayTime += data.holidayTime || 0;\n        monthlyTotal.totalTime += data.totalTime || 0;\n      }\n    });\n    return monthlyTotal;\n  };\n\n  // Change to previous month\n  const goToPreviousMonth = () => {\n    setCurrentMonth(prevMonth => prevMonth === 0 ? 11 : prevMonth - 1);\n    if (currentMonth === 0) setCurrentYear(currentYear - 1); // Handle year change\n  };\n\n  // Change to next month\n  const goToNextMonth = () => {\n    setCurrentMonth(prevMonth => prevMonth === 11 ? 0 : prevMonth + 1);\n    if (currentMonth === 11) setCurrentYear(currentYear + 1); // Handle year change\n  };\n\n  // Get the days for the selected month\n  const monthDays = generateMonthDays(currentYear, currentMonth);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goToPreviousMonth,\n      children: \"Previous Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"current-month\",\n      children: new Date(currentYear, currentMonth).toLocaleString('default', {\n        month: 'long',\n        year: 'numeric'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goToNextMonth,\n      children: \"Next Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this), monthDays.map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: day\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this), monthDays.map(day => {\n            var _timesheetData$employ8;\n            const data = ((_timesheetData$employ8 = timesheetData[employee.id]) === null || _timesheetData$employ8 === void 0 ? void 0 : _timesheetData$employ8[day]) || {};\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              onClick: () => handleSetTime(employee.id, day),\n              children: data.totalTime || \"-\"\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 19\n            }, this);\n          })]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Set Time for \", selectedEmployee]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Start Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: startTime,\n          onChange: handleStartTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"End Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: endTime,\n          onChange: handleEndTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Next Day:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: nextDay,\n          onChange: handleNextDayToggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Holiday:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isHoliday,\n          onChange: handleHolidayToggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Total Time: \", totalTime, \" hours\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Night Shift Hours: \", nightShiftHours]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Holiday Time: \", holidayTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Normal Time: \", normalTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveTimesheetDataToFirebase,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setModalOpen(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"GtL7G+CIYHZoqFNJ+BgOdeBo91k=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","onSnapshot","doc","setDoc","getDoc","db","jsxDEV","_jsxDEV","TimesheetList","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","nextDay","setNextDay","isHoliday","setIsHoliday","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","holidayTime","setHolidayTime","normalTime","setNormalTime","currentMonth","setCurrentMonth","Date","getMonth","currentYear","setCurrentYear","getFullYear","generateMonthDays","year","month","daysInMonth","getDate","days","day","push","fetchEmployees","unsubscribe","snapshot","employeeData","docs","map","id","data","fetchTimesheetData","timesheetDataRef","updatedTimesheetData","forEach","employeeId","hours","date","record","Object","entries","parseFloat","nightShift","Boolean","handleSetTime","_timesheetData$employ","_timesheetData$employ2","_timesheetData$employ3","_timesheetData$employ4","_timesheetData$employ5","_timesheetData$employ6","handleStartTimeChange","event","newStartTime","target","value","calculateTimes","handleEndTimeChange","newEndTime","handleNextDayToggle","newNextDay","handleHolidayToggle","newIsHoliday","start","end","isNextDay","startHours","startMinutes","split","Number","endHours","endMinutes","startDate","setHours","endDate","setDate","totalTimeInHours","nightShiftStart","nightShiftEnd","nightShiftStartTime","nightShiftEndTime","toFixed","saveTimesheetDataToFirebase","_await$getDoc$data","timesheetDocRef","error","console","calculateMonthlyTotal","monthlyTotal","monthDays","_timesheetData$employ7","goToPreviousMonth","prevMonth","goToNextMonth","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","toLocaleString","employee","name","_timesheetData$employ8","type","onChange","checked","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\n\nconst TimesheetList = () => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), (snapshot) => {\n        const employeeData = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, (snapshot) => {\n        const updatedTimesheetData = {};\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0,\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(timesheetData[employeeId]?.[date]?.startTime || \"\");\n    setEndTime(timesheetData[employeeId]?.[date]?.endTime || \"\");\n    setIsHoliday(timesheetData[employeeId]?.[date]?.isHoliday || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = (event) => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = (event) => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n    calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n  };\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    const nightShiftStart = new Date(startDate);\n    nightShiftStart.setHours(22, 0, 0);\n    const nightShiftEnd = new Date(startDate);\n    nightShiftEnd.setDate(nightShiftEnd.getDate() + 1);\n    nightShiftEnd.setHours(6, 0, 0);\n\n    let nightShiftHours = 0;\n    if (startDate < nightShiftEnd && endDate >= nightShiftStart) {\n      const nightShiftStartTime = startDate < nightShiftStart ? nightShiftStart : startDate;\n      const nightShiftEndTime = endDate > nightShiftEnd ? nightShiftEnd : endDate;\n      nightShiftHours = (nightShiftEndTime - nightShiftStartTime) / (1000 * 60 * 60);\n    }\n\n    setTotalTime(totalTimeInHours.toFixed(2));\n    setNightShiftHours(nightShiftHours.toFixed(2));\n\n    const normalTime = isHoliday ? 0 : totalTimeInHours - nightShiftHours;\n    setNormalTime(normalTime.toFixed(2));\n\n    const holidayTime = isHoliday ? totalTimeInHours : 0;\n    setHolidayTime(holidayTime.toFixed(2));\n  };\n\n  // Save timesheet data to Firestore\n  const saveTimesheetDataToFirebase = async () => {\n    try {\n      const timesheetDocRef = doc(db, \"timesheets\", selectedEmployee);\n      const timesheetData = (await getDoc(timesheetDocRef)).data()?.hours || {};\n      timesheetData[selectedDate] = {\n        startTime,\n        endTime,\n        totalTime: parseFloat(totalTime),\n        nightShift: parseFloat(nightShiftHours),\n        holidayTime: parseFloat(holidayTime),\n        normalTime: parseFloat(normalTime),\n        isHoliday,\n      };\n      await setDoc(timesheetDocRef, { hours: timesheetData });\n      setModalOpen(false);\n    } catch (error) {\n      console.error(\"Error saving timesheet data:\", error);\n    }\n  };\n\n  // Calculate monthly totals for an employee\n  const calculateMonthlyTotal = (employeeId) => {\n    let monthlyTotal = {\n      normalTime: 0,\n      nightShift: 0,\n      holidayTime: 0,\n      totalTime: 0,\n    };\n\n    const monthDays = generateMonthDays(currentYear, currentMonth);\n    monthDays.forEach((date) => {\n      const data = timesheetData[employeeId]?.[date];\n      if (data) {\n        monthlyTotal.normalTime += data.normalTime || 0;\n        monthlyTotal.nightShift += data.nightShift || 0;\n        monthlyTotal.holidayTime += data.holidayTime || 0;\n        monthlyTotal.totalTime += data.totalTime || 0;\n      }\n    });\n\n    return monthlyTotal;\n  };\n\n  // Change to previous month\n  const goToPreviousMonth = () => {\n    setCurrentMonth((prevMonth) => (prevMonth === 0 ? 11 : prevMonth - 1));\n    if (currentMonth === 0) setCurrentYear(currentYear - 1); // Handle year change\n  };\n\n  // Change to next month\n  const goToNextMonth = () => {\n    setCurrentMonth((prevMonth) => (prevMonth === 11 ? 0 : prevMonth + 1));\n    if (currentMonth === 11) setCurrentYear(currentYear + 1); // Handle year change\n  };\n\n  // Get the days for the selected month\n  const monthDays = generateMonthDays(currentYear, currentMonth);\n\n  return (\n    <div>\n      <button onClick={goToPreviousMonth}>Previous Month</button>\n      <span className=\"current-month\">\n        {new Date(currentYear, currentMonth).toLocaleString('default', { month: 'long', year: 'numeric' })}\n      </span>\n      <button onClick={goToNextMonth}>Next Month</button>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {monthDays.map((day) => (\n              <th key={day}>{day}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td>\n              {monthDays.map((day) => {\n                const data = timesheetData[employee.id]?.[day] || {};\n                return (\n                  <td key={day} onClick={() => handleSetTime(employee.id, day)}>\n                    {data.totalTime || \"-\"}\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {modalOpen && (\n        <div className=\"modal\">\n          <h2>Set Time for {selectedEmployee}</h2>\n          <label>Start Time:\n            <input type=\"time\" value={startTime} onChange={handleStartTimeChange} />\n          </label>\n          <label>End Time:\n            <input type=\"time\" value={endTime} onChange={handleEndTimeChange} />\n          </label>\n          <label>\n            Next Day:\n            <input type=\"checkbox\" checked={nextDay} onChange={handleNextDayToggle} />\n          </label>\n          <label>\n            Holiday:\n            <input type=\"checkbox\" checked={isHoliday} onChange={handleHolidayToggle} />\n          </label>\n          <div>Total Time: {totalTime} hours</div>\n          <div>Night Shift Hours: {nightShiftHours}</div>\n          <div>Holiday Time: {holidayTime}</div>\n          <div>Normal Time: {normalTime}</div>\n          <button onClick={saveTimesheetDataToFirebase}>Save</button>\n          <button onClick={() => setModalOpen(false)}>Cancel</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}