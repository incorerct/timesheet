{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/EmployeeManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { collection, addDoc, getDocs } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmployeeManagement = () => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [newEmployeeName, setNewEmployeeName] = useState(\"\");\n\n  // Fetch employee data from Firebase\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n    fetchEmployees();\n  }, []);\n\n  // Handle adding a new employee\n  const handleAddEmployee = async () => {\n    if (newEmployeeName.trim() === \"\") return;\n    try {\n      const docRef = await addDoc(collection(db, \"employees\"), {\n        name: newEmployeeName\n      });\n\n      // Add the new employee locally to the state\n      setEmployees(prevEmployees => [...prevEmployees, {\n        id: docRef.id,\n        name: newEmployeeName\n      }]);\n      setNewEmployeeName(\"\"); // Clear input after adding\n    } catch (error) {\n      console.error(\"Error adding employee:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Employee Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newEmployeeName,\n      onChange: e => setNewEmployeeName(e.target.value),\n      placeholder: \"Enter new employee name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddEmployee,\n      children: \"Add Employee\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: employee.name\n      }, employee.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(EmployeeManagement, \"S9IKaxI5vtDWUVjlhU1+eVtREao=\");\n_c = EmployeeManagement;\nexport default EmployeeManagement;\nvar _c;\n$RefreshReg$(_c, \"EmployeeManagement\");","map":{"version":3,"names":["React","useState","useEffect","collection","addDoc","getDocs","db","jsxDEV","_jsxDEV","EmployeeManagement","_s","employees","setEmployees","newEmployeeName","setNewEmployeeName","fetchEmployees","querySnapshot","employeeData","docs","map","doc","id","data","error","console","handleAddEmployee","trim","docRef","name","prevEmployees","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","employee","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/EmployeeManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { collection, addDoc, getDocs } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\"; // Import the Firestore db instance\n\nconst EmployeeManagement = () => {\n  const [employees, setEmployees] = useState([]);\n  const [newEmployeeName, setNewEmployeeName] = useState(\"\");\n\n  // Fetch employee data from Firebase\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, \"employees\"));\n        const employeeData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setEmployees(employeeData);\n      } catch (error) {\n        console.error(\"Error fetching employees:\", error);\n      }\n    };\n    fetchEmployees();\n  }, []);\n\n  // Handle adding a new employee\n  const handleAddEmployee = async () => {\n    if (newEmployeeName.trim() === \"\") return;\n\n    try {\n      const docRef = await addDoc(collection(db, \"employees\"), {\n        name: newEmployeeName,\n      });\n\n      // Add the new employee locally to the state\n      setEmployees((prevEmployees) => [\n        ...prevEmployees,\n        { id: docRef.id, name: newEmployeeName },\n      ]);\n      setNewEmployeeName(\"\"); // Clear input after adding\n    } catch (error) {\n      console.error(\"Error adding employee:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Employee Management</h2>\n      <input\n        type=\"text\"\n        value={newEmployeeName}\n        onChange={(e) => setNewEmployeeName(e.target.value)}\n        placeholder=\"Enter new employee name\"\n      />\n      <button onClick={handleAddEmployee}>Add Employee</button>\n\n      <ul>\n        {employees.map((employee) => (\n          <li key={employee.id}>{employee.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default EmployeeManagement;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}