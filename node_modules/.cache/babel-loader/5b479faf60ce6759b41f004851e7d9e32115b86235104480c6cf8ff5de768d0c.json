{"ast":null,"code":"var _jsxFileName = \"/Users/tuvshuu/timesheet/src/TimesheetList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimesheetList = () => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), snapshot => {\n        const employeeData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, snapshot => {\n        const updatedTimesheetData = {};\n        snapshot.forEach(doc => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    var _timesheetData$employ, _timesheetData$employ2, _timesheetData$employ3, _timesheetData$employ4, _timesheetData$employ5, _timesheetData$employ6;\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(((_timesheetData$employ = timesheetData[employeeId]) === null || _timesheetData$employ === void 0 ? void 0 : (_timesheetData$employ2 = _timesheetData$employ[date]) === null || _timesheetData$employ2 === void 0 ? void 0 : _timesheetData$employ2.startTime) || \"\");\n    setEndTime(((_timesheetData$employ3 = timesheetData[employeeId]) === null || _timesheetData$employ3 === void 0 ? void 0 : (_timesheetData$employ4 = _timesheetData$employ3[date]) === null || _timesheetData$employ4 === void 0 ? void 0 : _timesheetData$employ4.endTime) || \"\");\n    setIsHoliday(((_timesheetData$employ5 = timesheetData[employeeId]) === null || _timesheetData$employ5 === void 0 ? void 0 : (_timesheetData$employ6 = _timesheetData$employ5[date]) === null || _timesheetData$employ6 === void 0 ? void 0 : _timesheetData$employ6.isHoliday) || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = event => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = event => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n    calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n  };\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    setTotalTime(totalTimeInHours);\n\n    // Assume night shift calculation is between 9 PM and 6 AM\n    const nightShiftTime = calculateNightShift(startDate, endDate);\n    setNightShiftHours(nightShiftTime);\n\n    // If holiday, all hours are considered holiday hours\n    if (isHoliday) {\n      setHolidayTime(totalTimeInHours);\n      setNormalTime(0);\n    } else {\n      setHolidayTime(0);\n      setNormalTime(totalTimeInHours - nightShiftTime);\n    }\n  };\n\n  // Calculate night shift hours\n  const calculateNightShift = (start, end) => {\n    const nightStart = new Date();\n    nightStart.setHours(21, 0, 0); // 9 PM\n    const nightEnd = new Date();\n    nightEnd.setHours(6, 0, 0); // 6 AM\n\n    let nightShift = 0;\n    if (start < nightStart) start = nightStart;\n    if (end > nightEnd) end = nightEnd;\n    if (start < end) {\n      nightShift = (end - start) / (1000 * 60 * 60);\n    }\n    return nightShift;\n  };\n\n  // Handle save action for the modal\n  const handleSave = async () => {\n    if (!selectedEmployee || !selectedDate) return;\n    const employeeDocRef = doc(db, \"timesheets\", selectedEmployee);\n    const docSnap = await getDoc(employeeDocRef);\n    const employeeData = docSnap.exists() ? docSnap.data() : {};\n\n    // Update or add new entry for the date\n    const newEntry = {\n      startTime,\n      endTime,\n      totalTime,\n      nightShift: nightShiftHours,\n      normalTime,\n      holidayTime,\n      isHoliday\n    };\n    const updatedHours = {\n      ...employeeData.hours,\n      [selectedDate]: newEntry\n    };\n    await setDoc(employeeDocRef, {\n      hours: updatedHours\n    }, {\n      merge: true\n    });\n    setModalOpen(false);\n  };\n\n  // Handle closing the modal without saving\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Employee Timesheets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Timesheet for \", currentMonth + 1, \"-\", currentYear]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: generateMonthDays(currentYear, currentMonth).map(date => {\n              var _timesheetData$employ7;\n              const employeeTimesheet = (_timesheetData$employ7 = timesheetData[employee.id]) === null || _timesheetData$employ7 === void 0 ? void 0 : _timesheetData$employ7[date];\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: employeeTimesheet ? `${employeeTimesheet.startTime} - ${employeeTimesheet.endTime}` : 'No time set'\n              }, date, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: generateMonthDays(currentYear, currentMonth).map(date => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSetTime(employee.id, date),\n              children: \"Set Time\"\n            }, date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this)]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: handleCloseModal,\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Set Time for \", selectedEmployee, \" on \", selectedDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Start Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: startTime,\n          onChange: handleStartTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"End Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: endTime,\n          onChange: handleEndTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: nextDay,\n            onChange: handleNextDayToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this), \"Next Day\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: isHoliday,\n            onChange: handleHolidayToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this), \"Holiday\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-btn\",\n            onClick: handleCloseModal,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-btn\",\n            onClick: handleSave,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(TimesheetList, \"GtL7G+CIYHZoqFNJ+BgOdeBo91k=\");\n_c = TimesheetList;\nexport default TimesheetList;\nvar _c;\n$RefreshReg$(_c, \"TimesheetList\");","map":{"version":3,"names":["React","useState","useEffect","collection","onSnapshot","doc","setDoc","getDoc","db","jsxDEV","_jsxDEV","TimesheetList","_s","employees","setEmployees","timesheetData","setTimesheetData","modalOpen","setModalOpen","selectedEmployee","setSelectedEmployee","selectedDate","setSelectedDate","startTime","setStartTime","endTime","setEndTime","nextDay","setNextDay","isHoliday","setIsHoliday","totalTime","setTotalTime","nightShiftHours","setNightShiftHours","holidayTime","setHolidayTime","normalTime","setNormalTime","currentMonth","setCurrentMonth","Date","getMonth","currentYear","setCurrentYear","getFullYear","generateMonthDays","year","month","daysInMonth","getDate","days","day","push","fetchEmployees","unsubscribe","snapshot","employeeData","docs","map","id","data","fetchTimesheetData","timesheetDataRef","updatedTimesheetData","forEach","employeeId","hours","date","record","Object","entries","parseFloat","nightShift","Boolean","handleSetTime","_timesheetData$employ","_timesheetData$employ2","_timesheetData$employ3","_timesheetData$employ4","_timesheetData$employ5","_timesheetData$employ6","handleStartTimeChange","event","newStartTime","target","value","calculateTimes","handleEndTimeChange","newEndTime","handleNextDayToggle","newNextDay","handleHolidayToggle","newIsHoliday","start","end","isNextDay","startHours","startMinutes","split","Number","endHours","endMinutes","startDate","setHours","endDate","setDate","totalTimeInHours","nightShiftTime","calculateNightShift","nightStart","nightEnd","handleSave","employeeDocRef","docSnap","exists","newEntry","updatedHours","merge","handleCloseModal","children","fileName","_jsxFileName","lineNumber","columnNumber","employee","name","_timesheetData$employ7","employeeTimesheet","onClick","className","type","onChange","checked","_c","$RefreshReg$"],"sources":["/Users/tuvshuu/timesheet/src/TimesheetList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { collection, onSnapshot, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"./firebaseConfig\";\nimport './TimesheetStyles.css';\n\nconst TimesheetList = () => {\n  const [employees, setEmployees] = useState([]);\n  const [timesheetData, setTimesheetData] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [nextDay, setNextDay] = useState(false);\n  const [isHoliday, setIsHoliday] = useState(false);\n  const [totalTime, setTotalTime] = useState(0);\n  const [nightShiftHours, setNightShiftHours] = useState(0);\n  const [holidayTime, setHolidayTime] = useState(0);\n  const [normalTime, setNormalTime] = useState(0);\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth()); // Start with current month\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear()); // Start with current year\n\n  // Generate all days of the current month\n  const generateMonthDays = (year, month) => {\n    const daysInMonth = new Date(year, month + 1, 0).getDate(); // month is 0-indexed\n    const days = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(`${month + 1}-${day < 10 ? '0' + day : day}`);\n    }\n    return days;\n  };\n\n  // Fetch employee and timesheet data from Firestore\n  useEffect(() => {\n    const fetchEmployees = () => {\n      const unsubscribe = onSnapshot(collection(db, \"employees\"), (snapshot) => {\n        const employeeData = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setEmployees(employeeData);\n      });\n      return unsubscribe;\n    };\n\n    const fetchTimesheetData = () => {\n      const timesheetDataRef = collection(db, \"timesheets\");\n      const unsubscribe = onSnapshot(timesheetDataRef, (snapshot) => {\n        const updatedTimesheetData = {};\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          const employeeId = doc.id;\n          if (data.hours) {\n            updatedTimesheetData[employeeId] = {};\n            for (const [date, record] of Object.entries(data.hours)) {\n              updatedTimesheetData[employeeId][date] = {\n                startTime: record.startTime,\n                endTime: record.endTime,\n                totalTime: parseFloat(record.totalTime),\n                nightShift: parseFloat(record.nightShift),\n                holidayTime: parseFloat(record.holidayTime),\n                isHoliday: Boolean(record.isHoliday),\n                normalTime: parseFloat(record.normalTime) || 0,\n              };\n            }\n          }\n        });\n        setTimesheetData(updatedTimesheetData);\n      });\n      return unsubscribe;\n    };\n\n    fetchEmployees();\n    fetchTimesheetData();\n  }, []);\n\n  // Handle the time settings for a specific employee and date\n  const handleSetTime = (employeeId, date) => {\n    setSelectedEmployee(employeeId);\n    setSelectedDate(date);\n    setStartTime(timesheetData[employeeId]?.[date]?.startTime || \"\");\n    setEndTime(timesheetData[employeeId]?.[date]?.endTime || \"\");\n    setIsHoliday(timesheetData[employeeId]?.[date]?.isHoliday || false);\n    setModalOpen(true);\n  };\n\n  // Handle changes in start time\n  const handleStartTimeChange = (event) => {\n    const newStartTime = event.target.value;\n    setStartTime(newStartTime);\n    calculateTimes(newStartTime, endTime, nextDay, isHoliday);\n  };\n\n  // Handle changes in end time\n  const handleEndTimeChange = (event) => {\n    const newEndTime = event.target.value;\n    setEndTime(newEndTime);\n    calculateTimes(startTime, newEndTime, nextDay, isHoliday);\n  };\n\n  // Toggle next day status\n  const handleNextDayToggle = () => {\n    const newNextDay = !nextDay;\n    setNextDay(newNextDay);\n    calculateTimes(startTime, endTime, newNextDay, isHoliday);\n  };\n\n  // Toggle holiday status\n  const handleHolidayToggle = () => {\n    const newIsHoliday = !isHoliday;\n    setIsHoliday(newIsHoliday);\n    calculateTimes(startTime, endTime, nextDay, newIsHoliday);\n  };\n\n  // Calculate total time, night shift hours, and normal/holiday time\n  const calculateTimes = (start, end, isNextDay, isHoliday) => {\n    if (!start || !end) return;\n\n    const [startHours, startMinutes] = start.split(\":\").map(Number);\n    const [endHours, endMinutes] = end.split(\":\").map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHours, startMinutes, 0);\n    const endDate = new Date();\n    endDate.setHours(endHours, endMinutes, 0);\n    if (isNextDay) endDate.setDate(endDate.getDate() + 1);\n\n    const totalTimeInHours = (endDate - startDate) / (1000 * 60 * 60);\n    setTotalTime(totalTimeInHours);\n\n    // Assume night shift calculation is between 9 PM and 6 AM\n    const nightShiftTime = calculateNightShift(startDate, endDate);\n    setNightShiftHours(nightShiftTime);\n\n    // If holiday, all hours are considered holiday hours\n    if (isHoliday) {\n      setHolidayTime(totalTimeInHours);\n      setNormalTime(0);\n    } else {\n      setHolidayTime(0);\n      setNormalTime(totalTimeInHours - nightShiftTime);\n    }\n  };\n\n  // Calculate night shift hours\n  const calculateNightShift = (start, end) => {\n    const nightStart = new Date();\n    nightStart.setHours(21, 0, 0); // 9 PM\n    const nightEnd = new Date();\n    nightEnd.setHours(6, 0, 0); // 6 AM\n\n    let nightShift = 0;\n    if (start < nightStart) start = nightStart;\n    if (end > nightEnd) end = nightEnd;\n    if (start < end) {\n      nightShift = (end - start) / (1000 * 60 * 60);\n    }\n    return nightShift;\n  };\n\n  // Handle save action for the modal\n  const handleSave = async () => {\n    if (!selectedEmployee || !selectedDate) return;\n\n    const employeeDocRef = doc(db, \"timesheets\", selectedEmployee);\n    const docSnap = await getDoc(employeeDocRef);\n    const employeeData = docSnap.exists() ? docSnap.data() : {};\n\n    // Update or add new entry for the date\n    const newEntry = {\n      startTime,\n      endTime,\n      totalTime,\n      nightShift: nightShiftHours,\n      normalTime,\n      holidayTime,\n      isHoliday,\n    };\n\n    const updatedHours = {\n      ...employeeData.hours,\n      [selectedDate]: newEntry,\n    };\n\n    await setDoc(employeeDocRef, { hours: updatedHours }, { merge: true });\n    setModalOpen(false);\n  };\n\n  // Handle closing the modal without saving\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <div>\n      <h2>Employee Timesheets</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Employee Name</th>\n            <th>Timesheet for {currentMonth + 1}-{currentYear}</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((employee) => (\n            <tr key={employee.id}>\n              <td>{employee.name}</td>\n              <td>\n                {generateMonthDays(currentYear, currentMonth).map((date) => {\n                  const employeeTimesheet = timesheetData[employee.id]?.[date];\n                  return (\n                    <div key={date}>\n                      {employeeTimesheet ? `${employeeTimesheet.startTime} - ${employeeTimesheet.endTime}` : 'No time set'}\n                    </div>\n                  );\n                })}\n              </td>\n              <td>\n                {generateMonthDays(currentYear, currentMonth).map((date) => (\n                  <button key={date} onClick={() => handleSetTime(employee.id, date)}>\n                    Set Time\n                  </button>\n                ))}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {modalOpen && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <button className=\"close-btn\" onClick={handleCloseModal}>X</button>\n            <h3>Set Time for {selectedEmployee} on {selectedDate}</h3>\n            <label>Start Time</label>\n            <input type=\"time\" value={startTime} onChange={handleStartTimeChange} />\n            <label>End Time</label>\n            <input type=\"time\" value={endTime} onChange={handleEndTimeChange} />\n            <label>\n              <input type=\"checkbox\" checked={nextDay} onChange={handleNextDayToggle} />\n              Next Day\n            </label>\n            <label>\n              <input type=\"checkbox\" checked={isHoliday} onChange={handleHolidayToggle} />\n              Holiday\n            </label>\n\n            <div className=\"modal-actions\">\n              <button className=\"close-btn\" onClick={handleCloseModal}>Close</button>\n              <button className=\"save-btn\" onClick={handleSave}>Save</button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimesheetList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}